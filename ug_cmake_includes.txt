
################################################
# created by Sebastian Reiter
# s.b.reiter@googlemail.com
#
# ug cmake includes
################################################

################################################
# OVERVIEW
# This file is a compilation of code required by cmake files of most applications.
# If you want to use ug in your application, you should add
# include(ug_cmake_includes.txt)
# to your CMakeLists.txt file. Make sure that you specify the right path to this file.
# Please note that this file only works correctly if it is located in the ug-root path.
#
# The following code automatically takes care of finding important external libraries,
# adding important include paths (including ug-include paths),
# and links with the ug libraries and external libraries.
#
#
# OPTIONS
# You can enable and disable some parts of ug, in order to reduce build-times or
# unwanted dependencies.
# It is good practice to disable everything you don't need.
# The following options can be enabled / disabled:
#
# - UG_DEBUG: Produces slow but debuggable applications.
# - FORCE_64: Produces 64bit-code
# - FORCE_32: Produces 32bit-code
# - NO_MPI: Disables MPI support.
# - NO_ALGEBRA: Disables support for algebra and discretization.
# - HYPRE: Enables support for hypre.
# - NO_BOOST: Disables support for boost (should only be disabled if required).
# - NO_PCL: Disables creation of the pcl-library.
# - NO_FORTRAN: Disables Fortran (Fortran may be needed to find LAPACK)
# - NO_LAPACK: Disable LAPACK libraries
# - NO_BLAS: Disable BLAS libraries
#
#
# To enable or disable options during the cmake call, call cmake like this:
# cmake -DUG_DEBUG=ON -DNO_MPI=OFF SomePath
#
# If you want to disable some parts of ug in the CMakeLists.txt file of your
# application (a good idea if your application doesn't need some part of ug)
# you can set those options before including the ug_cmake_includes file using
# set(NO_MPI ON)
# set(NO_ALGEBRA OFF)
# include(ug_cmake_includes.txt)
#
# Please note that UG_DEBUG should not be set in any CMakeLists.txt file. It should
# only be used as a command-line parameter to cmake.
#
# If you want to build a library using ug_cmake_includes.txt, you should call
# set(UG_LIBRARY_BUILD on) before including ug_cmake_includes.txt.
# This will avoid unnecessary calls to link_libraries.
#
# DEFINES
# Some defines that are accessible from your source-code are defined here:
# - UG_DEBUG is defined if UG_DEBUG is set to ON (use cmake -DUG_DEBUG=ON)
# - UG_PARALLEL is defined if NO_PCL is set to OFF and NO_MPI is set to OFF.
################################################


# Make sure code is only executed once.
if(NOT UG_CMAKE_INCLUDES_INCLUDED)
	set(UG_CMAKE_INCLUDES_INCLUDED on)

	# options for use in cmake gui and help strings in CMakeCache.txt
	OPTION(UG_DEBUG "debug mode")
    OPTION(UG_SHARED "builds a shared lib")
	OPTION(FORCE_64 "Force -m64, 64bit-Compilation")
	OPTION(FORCE_32 "Force -m32, 32bit-Compiltation")
	OPTION(NO_MPI "Disable MPI Support")
	OPTION(NO_ALGEBRA "Disable algebra and discretization")
	OPTION(HYPRE "Enable Hypre")
	OPTION(NO_BOOST "disable support for BOOST")
	OPTION(NO_PCL "Disable parallel communication library")

	OPTION(NO_FORTRAN "Do not use Fortran (Fortran may be needed to find LAPACK)")
	OPTION(NO_LAPACK "Disable LAPACK")
	OPTION(NO_BLAS "Disable BLAS")
    OPTION(NO_VRL "Disables vrl-bindings. Important if no java environment exists.")

	#######################
	# include ug header and library path
	get_filename_component(UG_ROOT_PATH ${CMAKE_CURRENT_LIST_FILE} PATH)
	include_directories(${UG_ROOT_PATH}/ugbase)
	link_directories(${UG_ROOT_PATH}/lib)

	#######################
	# compiler flags

	# Check whether debug or release mode is activated.
	if(UG_DEBUG)
		# Enable debugging output
		message(STATUS "INFO: Debug mode. (Enable release-mode by defining -DUG_DEBUG=OFF)")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -Wall")
		add_definitions(-DUG_DEBUG)
	else(UG_DEBUG)
		message(STATUS "INFO: Release mode. (Enable debug-mode by defining -DUG_DEBUG=ON)")
		# Enable these flags for a fast ublas algebra
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DNDEBUG -DBOOST_UBLAS_NDEBUG -O3 -Wall")
	endif(UG_DEBUG)

	#######################
	# FORCE_32/64 . for use e.g. on MacOS 10.6, where -m64 is default otherwise

	# prevent 32 AND 64 bit
	if(FORCE_64 AND FORCE_32)
		message(FATAL_ERROR "FORCE_64=ON and FORCE_32=ON. do not use FORCE_32 and FORCE_64 together.")
	endif(FORCE_64 AND FORCE_32)
	
	if(FORCE_64)
	   # set 64bit mode
		message(STATUS "INFO: 64bit mode. (Disable by defining -DFORCE_64=OFF)")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m64")
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m64")
	endif(FORCE_64)

	if(FORCE_32)
	    # set 32bit mode
		message(STATUS "INFO: 32bit mode. (Disable by defining -DFORCE_32=OFF)")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32")
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m32")
		# otherwise it gets compiled as 64bit on Snow Leopard Systems
	endif(FORCE_32)

	#######################
	# MPI - find include-path and link-libraries
	if(NO_MPI)
		message(STATUS "INFO: Not using MPI. (To use MPI define -DNO_MPI=OFF)")
	else(NO_MPI)
		message(STATUS "INFO: Using MPI. (To disbale MPI define -DNO_MPI=ON)")

		find_package(MPI)
		if(MPI_FOUND)
			include_directories(${MPI_INCLUDE_PATH})
			set(MPI_LIBS ${MPI_LIBRARY} ${MPI_EXTRA_LIBRARY})
			ADD_DEFINITIONS(-DUG_PARALLEL)
		else(MPI_FOUND)
			message(WARNING " MPI not found!")
		endif(MPI_FOUND)
	endif(NO_MPI)

	#######################
	# BOOST
	if(NO_BOOST)
		message(STATUS "INFO: Not using BOOST. (To enable BOOST define -DNO_BOOST=OFF)")
	else(NO_BOOST)
		find_package(Boost 1.40.0)

		if(Boost_FOUND)
			message(STATUS "INFO: Using BOOST (version ${Boost_MAJOR_VERSION}.${Boost_MINOR_VERSION}.${Boost_SUBMINOR_VERSION}, libs at '${Boost_INCLUDE_DIRS}'). (To disable boost define -DNO_BOOST=ON)")

			# add include path
			include_directories (${Boost_INCLUDE_DIRS})

		else(Boost_FOUND)
		    find_package(Boost)
			if(Boost_FOUND)
			    message(WARNING " BOOST in ${Boost_INCLUDE_DIRS} is not compatible (requires 1.40.0, but is ${Boost_MAJOR_VERSION}.${Boost_MINOR_VERSION}.${Boost_SUBMINOR_VERSION}) . Compiling WITHOUT Boost.")
				UNSET(Boost_FOUND)
				UNSET(Boost_INCLUDE_DIRS CACHE)
				UNSET(Boost_INCLUDE_DIR CACHE)
			else(Boost_FOUND)
				message(WARNING " BOOST not found! Compiling WITHOUT Boost.")
			endif(Boost_FOUND)
		endif(Boost_FOUND)
	endif(NO_BOOST)

	#######################
	# ALGEBRA
 	if (NOT NO_ALGEBRA)
		if(NOT HYPRE)
			message(STATUS "INFO: Not using HYPRE. (To enable HYPRE define -DHYPRE=ON)")
		else(NOT HYPRE)
			find_path (HYPRELIB_DIR libHYPRE.a
					PATHS ENV PATH
					PATH_SUFFIXES src/hypre/lib/ )

			if(HYPRELIB_DIR)
				message(STATUS "INFO: Using HYPRE (libs at '${HYPRELIB_DIR}'). (To disable HYPRE define -DHYPRE=OFF)")

				# add include path
				include_directories (${HYPRELIB_DIR}/../include/)
				SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DHYPRELIB_DIR")

			else(HYPRELIB_DIR)
				message(WARNING " HYPRE not found! Compiling WITHOUT HYPRE.")
			endif(HYPRELIB_DIR)
		endif(NOT HYPRE)
	endif(NOT NO_ALGEBRA)

	#######################
	# UG_LIBRARIES
	# clear UG_LIBRARIES
	# THE ORDER OF THE LIBRARIES IN UG_LIBRARIES IS CRUCIAL FOR THE LINKER

        set(UG_LIBRARIES)

        if(NOT NO_UGBRIDGE)
            set(UG_LIBRARIES ugscript ugbridge)
        endif(NOT NO_UGBRIDGE)

	if(NOT NO_ALGEBRA)
		set(UG_LIBRARIES ${UG_LIBRARIES} discretization algebra)
		if(HYPRE AND HYPRELIB_DIR)
			set(UG_LIBRARIES ${UG_LIBRARIES} ${HYPRELIB_DIR}/libHYPRE.a)
		endif(HYPRE AND HYPRELIB_DIR)
	endif(NOT NO_ALGEBRA)

	set(UG_LIBRARIES ${UG_LIBRARIES} grid)

	if(NOT NO_PCL AND MPI_FOUND)
		set(UG_LIBRARIES ${UG_LIBRARIES} pcl)
	endif(NOT NO_PCL AND MPI_FOUND)

	set(UG_LIBRARIES ${UG_LIBRARIES} node_tree common)

	if(MPI_FOUND)
		set(UG_LIBRARIES ${UG_LIBRARIES} ${MPI_LIBS})
	endif(MPI_FOUND)


        if(UG_SHARED)
        #   if we're building a shared library, only mpi has to be linked.
        #   this is important for the shared library
            if(MPI_FOUND)
                link_libraries(${MPI_LIBS})
            endif(MPI_FOUND)
 			message(STATUS "INFO: Building dynamic library (To disable Dynamic Library define -DUG_SHARED=OFF)")
        else(UG_SHARED)
            link_libraries(${UG_LIBRARIES})
 			message(STATUS "INFO: Not building dynamic library (To enable Dynamic Library define -DUG_SHARED=ON)")
        endif(UG_SHARED)


	#######################
	# Fortran compiler
	# is needed for find_package(LAPACK)
	# disable with -DNO_FORTRAN=ON
	# if disabled, you might not be able to use LAPACK on clusters

	if(NOT APPLE)
		if(NOT NO_FORTRAN)
			ENABLE_LANGUAGE(Fortran)
			if(CMAKE_Fortran_COMPILER_WORKS)
				message(STATUS "INFO: Fortran compiler found: '${CMAKE_Fortran_COMPILER}' (To disable Fortran define -DNO_FORTRAN=ON)")
			else(CMAKE_Fortran_Compiler_WORKS)
				message(STATUS "INFO: Fortran compiler NOT found (To disable Fortran define -DNO_FORTRAN=ON).")				
			endif(CMAKE_Fortran_COMPILER_WORKS)
		endif(NOT NO_FORTRAN)
	endif(NOT APPLE)


	#######################
	# LAPACK
	# find lapack. On Apple Systems, this is -framework vecLib for LAPACK and BLAS
	# On other systems, it uses find_package(LAPACK) which requires Fortran
	# without fortran, it tries to find a LAPACK library by itself

	if(NO_LAPACK)
	    message("-- INFO: Not using LAPACK. (To enable LAPACK define -DNO_LAPACK=OFF)")
	else(NO_LAPACK)	    
	    if(APPLE)
		      message(STATUS "INFO: Working on MacOS, using -framework vecLib for LAPACK and BLAS  (To disable LAPACK define -DNO_LAPACK=ON).")
		      set(LAPACK_LIBRARIES "-framework vecLib" CACHE STRING "LAPACK library" FORCE)
			  set(LAPACK_FOUND YES)
		else(APPLE)
			if(CMAKE_Fortran_COMPILER_WORKS)
				message(STATUS "INFO: Searching for LAPACK with find_package... (To disable LAPACK define -DNO_LAPACK=ON)")
		   		find_package(LAPACK)
			else(CMAKE_Fortran_COMPILER_WORKS)
				message(STATUS "INFO: Searching for LAPACK with find_library... (To disable LAPACK define -DNO_LAPACK=ON)")
			    find_library(LAPACK_LIBRARIES NAMES atlas PATHS /usr/local/lib /usr/lib /lib)
				if(LAPACK_LIBRARIES)
		             set(LAPACK_FOUND YES)
			  	endif(LAPACK_LIBRARIES)
			endif(CMAKE_Fortran_COMPILER_WORKS)
		endif(APPLE)

		if(LAPACK_FOUND)
			if(NOT LAPACK_INCLUDE_PATH)
				FIND_PATH(LAPACK_INCLUDE_PATH clapack.h /usr/local/include/ /usr/include /include)
			endif(NOT LAPACK_INCLUDE_PATH)

			if(LAPACK_INCLUDE_PATH)
					link_libraries(${LAPACK_LIBRARIES})
					include_directories (${LAPACK_INCLUDE_PATH})
					message(STATUS "INFO: LAPACK Found. (lib = '${LAPACK_LIBRARIES}', flags = '${LAPACK_LINKER_FLAGS}', headers at '${LAPACK_INCLUDE_PATH})")
					set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DLAPACK_AVAILABLE")
			else(LAPACK_INCLUDE_PATH)			
				   message(STATUS "INFO:  Found LAPACK (lib = '${LAPACK_LIBRARIES}') , but not clapack.h ! (To disable LAPACK define -DNO_LAPACK=ON)")
		   endif(LAPACK_INCLUDE_PATH)

		else(LAPACK_FOUND)
		    message(STATUS "INFO: Did not find LAPACK ! (To disable LAPACK define -DNO_LAPACK=ON)")
		    if(NO_FORTRAN)
		    	message(STATUS "(NO_FORTRAN is on. When setting -DNO_FORTRAN=OFF, better search routines for LAPACK can be used)")
		    endif(NO_FORTRAN)
		endif(LAPACK_FOUND)

	endif(NO_LAPACK)

	#######################
	# BLAS
	# see LAPACK

	if(NO_BLAS)
	    message("-- INFO: Not using BLAS. (To enable BLAS define -DNO_BLAS=OFF)")
	else(NO_BLAS)
		if(APPLE)
			set(BLAS_LIBRARIES "-framework vecLib" CACHE STRING "CBLAS library" FORCE)
			set(BLAS_FOUND YES)
		else(APPLE)
			if(NOT BLAS_FOUND) # BLAS can be found by FindLAPACK					
				if(CMAKE_Fortran_COMPILER_WORKS)
					message(STATUS "INFO: Searching for BLAS with find_package... (To disable BLAS define -DNO_BLAS=ON)")		 	
					find_package(BLAS)
				else(CMAKE_Fortran_COMPILER_WORKS)
					message(STATUS "INFO: Searching for BLAS with find_library... (To disable BLAS define -DNO_BLAS=ON)")
			   		find_library(BLAS_LIBRARIES NAMES cblas PATHS)
					if(BLAS_LIBRARIES)
						set(BLAS_FOUND YES)
					endif(BLAS_LIBRARIES)
				endif(CMAKE_Fortran_COMPILER_WORKS)
			endif(NOT BLAS_FOUND)
		endif(APPLE)

		if(BLAS_FOUND)		
			if(NOT BLAS_INCLUDE_PATH)
				find_path(BLAS_INCLUDE_PATH cblas.h /usr/local/include/ /usr/include /include)
			endif(NOT BLAS_INCLUDE_PATH)

			if(BLAS_INCLUDE_PATH)
			     link_libraries(${BLAS_LIBRARIES})
				 include_directories (${BLAS_INCLUDE_PATH})
				 message(STATUS "INFO: BLAS Found. (lib = '${BLAS_LIBRARIES}', flags = '${BLAS_LINKER_FLAGS}', headers at '${BLAS_INCLUDE_PATH})")
				 set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DBLAS_AVAILABLE")
			else(BLAS_INCLUDE_PATH)		  	
				   message(STATUS "INFO: Found BLAS (lib = '${BLAS_LIBRARIES}), but not cblas.h ! (To disable BLAS define -DNO_BLAS=ON)")
		   	endif(BLAS_INCLUDE_PATH)
		else(BLAS_FOUND)
		    message(STATUS "INFO: Did not find BLAS ! (To disable LAPACK define -DNO_LAPACK=ON)")
		endif(BLAS_FOUND)

	endif(NO_BLAS)


    #######################
    # Export sources to global variable.
    # PURPOSE: use this function to add local package sources to global
    #          ugSources property which is used to build libug4
    # @param prefix current directory prefix
    # @param sources sources list to export
    function(ExportSources prefix sources)
        # iterate over all arguments and insert given prefix
        foreach(l ${ARGV})
            # FIXME: this is a hack to omit the first argument
            #        which is the prefix. Shall we use boolean or index variable?
            if(NOT "${l}" STREQUAL "${prefix}")
                # retrieve the global property ugSources and store it
                # in tmp variable
                # NOTE: properties must be assigned to variables before being used
                get_property(tmp GLOBAL PROPERTY ugSources)
                # append tmp to the global ugSources property using the correct prefix
                set_property(GLOBAL PROPERTY ugSources ${tmp} "${prefix}/${l}")
            endif(NOT "${l}" STREQUAL "${prefix}")
        endforeach(l)
    endfunction(ExportSources)

    ####
    # External dependencies
    ####
    if(UG_SHARED AND NOT NO_VRL)
        find_package(JNI REQUIRED)
        include_directories(${JNI_INCLUDE_DIRS})
    endif(UG_SHARED AND NOT NO_VRL)

endif(NOT UG_CMAKE_INCLUDES_INCLUDED)
