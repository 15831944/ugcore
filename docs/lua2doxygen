#!/usr/bin/env perl
# this code is based on code from Alec Chen
# changed by Martin Rupp. More copyright information follows.


use strict;
use warnings;

my $input = $ARGV[0];

my $bInBlock = 0;
my $bInFunction = 0;
my $blockName = q{};
my $result = q{};
my $deux = 0;
my $luaDoxygenMark = "--!";
my $originalLine;
my $functionLine;
my $inMultilineComment = 0;
my $inDocuMultilineComment = 0;
my $functionComment = "";
my $code="";
open FH, "<$input"  or die "Can't open $input for reading: $!";


foreach my $line (<FH>)
{
	chomp $line;
    $originalLine=$line;

    
    if ($inDocuMultilineComment == 1 or $inMultilineComment == 1)
    {
    	if ( $line =~ /\]\]--/ )
    	{
    		$inMultilineComment=0;
    		$inDocuMultilineComment=0;    		
    	}
    	elsif ( $inDocuMultilineComment == 1 )
    	{
    		# remove additional --
    		$line =~ s/^--//;
    		$functionComment .= $line ."\n";
    	}
    	next;
    }
    
    if ($originalLine =~ /--\[\[!/)
    {
    	$inDocuMultilineComment=1;
    	next;
    }
    elsif ($line =~ /--\[\[/)
    {
      	$inMultilineComment=1;
    	next;
    }
    
    # skip normal comments
    next if $line =~ /^\s*--[^!]/;
    
    # remove end of line comments
    $line =~ s/--[^!].*//;
    
    # skip comparison??
    #next if $line =~ /==/;
    
    # translate to doxygen mark
    $line =~ s{$luaDoxygenMark}{///};

    if ($line =~ m{^\s*///(.*)}) 
    {    
        $functionComment .= "$1\n";        
        next;
    }
    
    $code .= $originalLine . "\n";
    
    # function start
    if ( $line =~ /^\s*function[ \t]/) 
    {
        $bInFunction = 1;
        $line .= q{;};
        $line =~ s/:/-/;
        $functionLine = $line;
        $result .= "\n/**\n";
        if($functionComment ne "")
        {
        	$result .= $functionComment."\n";
        }
        $result .= "\\code\n".$originalLine."\n\n";
        $functionComment = "";
        next
    }
    elsif ( $line =~ /^\s*(\w*)\s+=\s+function\s*\(([^\)]*)/ ) 
    {
        $bInFunction = 1;
        $line = "function $1($2);";
        $line =~ s/:/-/;
        $functionLine = $line;
        $result .= "\n/**\n";
        if($functionComment ne "")
        {
        	$result .= $functionComment."\n";
        }
        $result .= "\\code\n".$originalLine."\n\n";
        $functionComment = "";
        next
    }
    elsif($functionComment ne "")
    {
    	$result.="/**\n".$functionComment."\n**/\n\n";
    	$functionComment = "";
    }
        
    # function end
    if ($bInFunction == 1) 
    {
    	if ( $line =~ /^[ \t]*end/ )
     	{
        	$bInFunction = 0;
        	$result .= "$line\n\\endcode\n**/\n".$functionLine."\n";
        }
        else
        {
        	$result .= $originalLine . "\n";
        }
    }
    
    # block start
    elsif ($bInFunction == 0 && $line =~ /^(\S+)\s*=\s*{/ && $line !~ /}/) 
    {
        $blockName = $1; 
        $bInBlock = 1;
    }
    
    # block end
    elsif ($bInFunction == 0 && $bInBlock == 1 && $line =~ /^\s*}/) 
    {
        $blockName = q{};
        $bInBlock = 0;
    }
    
    elsif ($line =~ /.*util.GetParam(Number|)\s*\(\"-(\w*)\"\s*(.*)/ )
    {
    	if ($1 eq "Number")
    	{ $result .= "parameterNumber ".$2; }
    	else { $result .= "parameterString ".$2; }
    	if ($3 =~ /^,\s*(\"[^\"]*\")\s*(.*)/ or $3 =~ /^,\s*(\w*)(.*)/)
    	{ 	
    		$result .= " = ".$1;
    		# description
    		if ( $2 =~ /^,\s*\"([^\"]*)/ )
    		{
    			$result .= "; ///< ".$1."\n"	
			}
	    	else { 	$result .= ";\n";	}			
    	}
		else { 	$result .= ";\n";	}
    }   
    elsif ($line =~ /.*util.HasParamOption\s*\(\"-(\w*)\"\s*(.*)/ )
    {
    	$result .= "parameterBool ".$1;
   		# description
   		if ( $2 =~ /^,\s*\"([^\"]*)/ )
   		{
   			$result .= "; ///< ".$1.";\n";    		
    	}
    	else { 	$result .= ";\n";	}
    }     
        
    # variables
    # we don't want variables
    # elsif ($bInFunction == 0 && $line =~ /=/) {
    #     $line =~ s/(?=\S)/$blockName./ if $blockName;
    #     $line =~ s{,?(\s*)(?=///|$)}{;$1};
    #     $result .= "$line\n";
    # }
}

close FH;
$result .= "\n/** <hr> \\include $input */\n";
#print("/**\n\\file $input\n\\brief my superfile\n\\code\n".$code."\n\\endcode\n**/\n");
print($result);
