/*
 * Copyright (c) 2013-2015:  G-CSC, Goethe University Frankfurt
 * Author: Martin Rupp
 * 
 * This file is part of UG4.
 * 
 * UG4 is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License version 3 (as published by the
 * Free Software Foundation) with the following additional attribution
 * requirements (according to LGPL/GPL v3 §7):
 * 
 * (1) The following notice must be displayed in the Appropriate Legal Notices
 * of covered and combined works: "Based on UG4 (www.ug4.org/license)".
 * 
 * (2) The following notice must be displayed at a prominent place in the
 * terminal output of covered works: "Based on UG4 (www.ug4.org/license)".
 * 
 * (3) The following bibliography is recommended for citation and must be
 * preserved in all covered files:
 * "Reiter, S., Vogel, A., Heppner, I., Rupp, M., and Wittum, G. A massively
 *   parallel geometric multigrid solver on hierarchically distributed grids.
 *   Computing and visualization in science 16, 4 (2013), 151-164"
 * "Vogel, A., Reiter, S., Rupp, M., Nägel, A., and Wittum, G. UG4 -- a novel
 *   flexible software system for simulating pde based models on high performance
 *   computers. Computing and visualization in science 16, 4 (2013), 165-179"
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 */

/** \page pageUG4SVN SVN

[TOC]

<hr>
\section secSVNBasics SVN Basics

SVN is a version control system. That means it is a software to coordinate software development within a team.

SVN is installed on a server, and there are
- one or more \ref secSVNRepository which keep the source codes for a project
- \ref secSVNUsers, which can
- \ref secSVNCheckout 
- \ref secSVNCommit
- \ref secSVNUpdate

Every time a users successfully commits changes to the repository (that is: uploaded some changes),
the <em>revision number</em> will be increased by one.
The most up-to-date version is called the current revision, the current revision number, HEAD revision or just HEAD.

<hr>
\section secSVNRepository SVN Repositories
an SVN repository is a URL to a server, added with a description which repository from the server you want to have.
For \ug4, the SVN server is <tt>svn://fuji.gcsc.uni-frankfurt.de</tt>, and the repository there is called ug4, so the complete
SVN URL is <tt>svn://fuji.gcsc.uni-frankfurt.de/ug4</tt>. 

<hr>
\section secSVNUsers SVN Users
Sebastian Reiter can create a new SVN user for you. SVN Users consists of a username and a password.


<hr>
\section secSVNCheckout Download the source code (checkout)
To checkout \ug4's trunk directory to the directory <tt>ug4svn</tt>, we do
\code
svn co svn://fuji.gcsc.uni-frankfurt.de/ug4/trunk ug4svn
\endcode

SVN will prompt you for your password:
\verbatim
Authentication realm: <svn://fuji.gcsc.uni-frankfurt.de:3690> fuji-svn-repositories
Password for 'mrupp': 
\endverbatim

after that, \ug4 (HEAD revision) will be downloaded. See also \ref secSVNPartialCheckout.

\note All commands following are relative to the current directory, and working in a subdirectory will \em not effect the
directories above.

<hr>
\section secSVNCommit Upload/check in changes (commit)

You can work now normally with the code, perform changes and so on.
Say you changed the file <tt>ug4/plugins/experimental/myplugin/bla.cpp</tt>. Then 

\code
svn commit plugins/experimental/myplugin/bla.cpp -m"i added some usefull stuff"
\endcode

Will upload or check in (commit) your changes to the server. Note that you have to specify some describing text via <tt>-m</tt>.


<hr>
\section secSVNUpdate Download changes others uploaded (update)
Say i am another user, and i need the changes you made to <tt>ug4/plugins/experimental/myplugin/bla.cpp</tt>, then i can do a
\code
svn update
\endcode
in the ug4 directory, and i'll have the new version. You can see \em checkout as the initial \em update.
\note When you do a <tt>svn update</tt> in a subdirectory, \em only the subdirectory will be updated.
\note SVN always keeps track of the last updated/checked out version (see diff and status).

<hr>
\section secSVNFiles Add, delete or rename files or directories
If you create a new file, say  <tt>ug4/plugins/experimental/myplugin/blub.cpp</tt>, the file is not <em>under version control</em>
or not \em versioned. 
That means, SVN won't upload changes of that file. To change that, do
\code
svn add plugins/experimental/myplugin/blub.cpp
svn commit plugins/experimental/myplugin/blub.cpp -m"added blub.cpp"
\endcode
Note that you also have to \em commit the changes (in this case: addition of a file).
In the same way you can remove files (<tt>svn rm file</tt>) and rename files (<tt>svn rename fileOld fileNew</tt>), 
same is also true for directories.

<hr>
\section secSVNStatus Knowing what you have to check in
\code
svn status
\endcode

result will be for example
\verbatim
? 	not_under_version_control.txt
M	file_i_modified.cpp
A	file_i_added.cpp
D	file_i_deleted.cpp
!	missing_file.cpp
\endverbatim

Files marked with '?' are not under version control. Files marked with '!' are files you deleted, but are under version control.
They will be recreated when you do a <tt>svn update</tt>. Use <tt>svn rm theFile.cpp</tt> to delete files.
\note All files marked with an M or A will be checked in if you to a <tt>svn commit -m"bla"</tt> (that is a commit of the current directory).

<hr>
\section secSVNRevert Reverting your changes
Sometimes you want to revert the changes you made (that way you can also be sure to be able to update):
\code
svn revert filename.cpp
\endcode
(also possible with directories, use with care and better check with <tt>svn status</tt>).

<hr>
\section secSVNConflicts Conflicts
Now two people are working on <tt>plugins/experimental/myplugin/bla.cpp</tt>, so one day it happens that user A and B 
did some different changes <tt>bla.cpp</tt>, and now both want to commit the changes. 
By conincidence, user A is first, everything is ok.
Now user B wants to commit his changes, but the error message is "file is out of date", user B has to do an \em update
first. Now since the file <tt>bla.cpp</tt> was changed by user B, SVN has to \em merge the changes from the 
\em update process with the changes user B made. As in all synchronization problems, there can be \em conflicts,
and various ways to solve them.

\verbatim
Conflict discovered in 'bla.cpp'.
Select: (p) postpone, (df) diff-full, (e) edit,
        (mc) mine-conflict, (tc) theirs-conflict,
        (s) show all options: 
\endverbatim

see <a href="http://www.logicaltrinkets.com/wordpress/?p=178">here</a> about how to resolve conflicts.
If you want to throw away your changes, and just use the version from the server, enter <tt>tf</tt> (theirs full).
If you made some changes you want to keep, use <tt>tc</tt> (theirs conflict).

SVN remembers the state of the last version you checked out (or updated), so it always knows which files you changed 
and which changes you made.


<hr>
\section secSVNOtherConflicts Error, other conflicts, troubleshooting

\verbatim
svn: Failed to add file 'bla.cpp': an unversioned file of the same name already exists
\endverbatim
SVN is afraid to overwrite the file bla.cpp, it is an unversioned file. You can rename the locally created bla.cpp to my_bla.cpp, and then
the update should work. After that, merge your changes from my_bla.cpp manually.

\verbatim
svn: Failed to add directory 'another/directory': an unversioned directory of the same name already exists
\endverbatim
Again, SVN is afraid to overwrite the directory another/directory. Rename it to another/directory_my, update, and merge the two directories
 manually.

\subsection secSSH_outdatedSVN Incompatible SVN Versions
Sometimes the SVN version installed on the cluster is not compatible with yours,
so when you used your local svn on the remote directory, you can't use the
remote svn anymore. See this script to <a href="http://svn.apache.org/repos/asf/subversion/trunk/tools/client-side/change-svn-wc-format.py">
Change SVN format</a>.

<hr>
\section secSVNSSHTunneling SVN/SSH Tunneling
On some clusters it is forbidden to connect directly to the internet. That also includes fuji.gcsc.uni-frankfurt.de. On those clusters, you can not check out or update svn sources.
The cure for this problem is called SSH Tunneling.
Say you connect to your cluster with <tt>ssh martin@cluster.com</tt>. You now need to replace this call with
\code
ssh -R5337:fuji.gcsc.uni-frankfurt.de:3690 martin@cluster.com
\endcode
Here the -R specifies that all connections to localhost:5337 are forwarded to fuji.gcsc.uni-frankfurt.de:3690.
It is important to issue this ssh command on a computer which can connect to fuji.gcsc.uni-frankfurt.de.
Now we instead of <tt>svn co svn://fuji.gcsc.uni-frankfurt.de/ug4/trunk</tt> we can do 
\code
svn co svn://localhost:5337/ug4/trunk
\endcode  

You can now do a svn co or update. However, some externals might not be able to be checked out.
\code
cd externals
svn propedit svn:externals .
\endcode
(If you are getting an error that no editor is set use <tt>export EDITOR=emacs</tt> or similar)
Now change
\code
boost_1_56_0/boost	svn://fuji.gcsc.uni-frankfurt.de/boost_mirror/boost_1_56_0/boost
\endcode
to
\code
boost_1_56_0/boost	svn://localhost:5337/boost_mirror/boost_1_56_0/boost
\endcode

Now you should be able to do a complete update/co.

For convenience it is nice to have an alias for such clusters like
\code
alias ssh-cluster="ssh -Y-R5337:fuji.gcsc.uni-frankfurt.de:3690 martin@cluster.com"
\endcode
since you need to do this ssh -R every time you want to do svn on the cluster.

\note uginstall also supports this, e.g.
\code
uginstall SuperLU -svnServer localhost:5337
\endcode

\note When you are doing SVN/SSH Tunneling, all your svn data is transfered through your connection. To avoid this, you might want to first connect to a server with good connection 
(like quadruped at GCSC), and connect from there with tunneling to the cluster. 

<hr>
\subsection secSVNMore More
\subsubsection secSVNRevisionNumber SVN Revision number
Getting the svn revision number of this directory and the subdirectories
\code
svnversion
\endcode
The output has the form
\verbatim
LOWESTREVISION[:HIGHESTREVISION][M]
\endverbatim

So <tt>9476:9496M</tt> means the lowest revision number is 9476, the highest is 9496, and you modified some files which are 
under version control (hence the 'M'). 
An output like <tt>9476</tt> means that all files are on revision number 9476 and non of them is modified.

\subsubsection update ug4 or ug4's revision number
With "updating ug4" we mean you need to update \em all of \ug4, not only some subdirectory. For that, go to your ug4 base directory,
and enter <tt>svn update</tt>. There you can also do a <tt>svnversion</tt> to get the SVN version of whole ug4.
 
\subsubsection secSVNMoreUsername Other Usernames
Without specifying the username explicitly, SVN assumes that the SVN username is the name of the current user.
If SVN has the wrong username, you might have your checkout line to 
\code
svn co --username horst svn://fuji.gcsc.uni-frankfurt.de/ug4/trunk ug4svn
\endcode

\note SVN remembers your user names. This can lead to errors, since other updates might then also use that user. 
Users are saved in <tt>~/.subversion/auth</tt>, so when you want to remove user 'otherUser' you could try to delete all files listed in a
 <tt>fgrep -r otherUser ~/.subversion/auth/</tt> . 
 

\subsubsection secSVNMoreHistory Log or History

Showing the SVN log or history
\code
svn log bla.cpp
\endcode
will show the complete log entries of bla.cpp. 
\code
svn log -l 7
\endcode
will show the last 7 entries of the log of the current directory (and its subdirectories and files).

\subsubsection secSVNMoreDiff diff

Knowing what you changed in the files (diff)
\code
svn diff bla.cpp
\endcode
will compare the file bla.cpp to the version you last updated.


\subsubsection secSVNMoreExample Other Examples
current directory is CURDIR
<ul>
<li><tt>svn co -r 9767 svn://fuji.gcsc.uni-frankfurt.de/ug4/trunk ug4svn</tt><br>
checking out revision number 9767 (instead of HEAD)</li>
<li><tt>svn status</tt><br>
show svn status (modified, versioned, added, deleted) of CURDIR</li>
<li><tt>svn status mydir</tt><br>
show svn status of CURDIR/mydir (if mydir relative) or mydir (if mydir absolute)</li>
<li><tt>svn commit -m"commiting CURDIR"</tt><br>
upload changes in CURDIR and its subdirectories</li>
<li><tt>svn commit myfile.cpp -m"commiting CURDIR"</tt><br>
upload changes in myfile.cpp</li>
<li><tt>svn commit bla1.cpp bla2.cpp -m"commiting CURDIR"</tt><br>
upload changes in bla1.cpp and bla2.cpp</li>
<li><tt>svn add myfile.cpp</tt><br>
add the file myfile.cpp to the versioning system. needs \em commit to upload changes.</li>
<li><tt>svn add myfile.cpp myfile2.cpp</tt><br>
adding the files myfile.cpp and myfile2.cpp</li>
<li><tt>svn add *.cpp</tt><br>
adding all .cpp files in CURDIR</li>
<li><tt>svn add subdir subdir/*.cpp</tt><br>
adding CURDIR/subdir and all .cpp files in CURDIR/subdir</li>
<li><tt>svn update -r 1978 bla.cpp</tt><br>
get the bla.cpp version from revision 1978 (used e.g. when you need to find out bugs which didn't happened some revisions ago)</li>
<li><tt>svn update -r {2013-02-03} mydir</tt><br>
get the version from 02.03.2013 (date) of CURDIR/mydir</li>
<li><tt>svn update -r PREV</tt><br>
get the previous version of CURDIR</li>
<li><tt>svn update</tt><br>
update CURDIR</li>
<li><tt>svn update SUBDIR</tt><br>
update the contents of CURDIR/SUBDIR</li>
<li><tt>svn diff</tt><br>
show diff of CURDIR, subdirectories, and files</li>
<li><tt>svn diff bla.cpp </tt><br>
show diff of bla.cpp</li>
<li><tt>svn diff -r HEAD bla.cpp</tt><br>
compare bla.cpp with the current HEAD revision on the server</li>
<li><tt>svn revert bla.cpp</tt><br>
revert the changes you've made to bla.cpp</li>
<li><tt>svn revert -R .</tt><br>
revert the changes you've made to this directory and the subdirectories</li>
</ul>

<hr>
\section secSVNEclipse SVN in Eclipse
Eclipse provides an easy-to-use interface for SVN in Eclipse. If you have code which is under version control, you will see
the revision number on the right side of the files. On the left side you can see a '>', that means this file is modified, or,
on directories: this directory or a subdirectory contains modifications.

Right mouseclick on a file, you have 
<ul>
<li>
<b>Team</b>:
- <b>Commit</b> : performs a <tt>svn commit</tt> of this file/directory. You can enter a commit message, you see which changes are committed 
and you can deselect some of the files. 
\warning Unlike <tt>svn commit</tt>, if you have unversioned files in your directory, they will be added. You have to deselect them again.
 Consider adding those files to svn:ignore.
- <b>Update</b> : <tt>svn update</tt> of this file
- <b>Update to revision</b>: bring this file to an older revision state (used e.g. when you need to find out bugs which didn't happened some revisions ago)
- <b>Revert</b>: <tt>svn revert</tt> of this file/directory.
- <b>Show History</b>: shows the svn log of this file
- <b>Add to svn:ignore</b> : This way, svn won't care about these files anymore. They also won't show up on <tt>svn status</tt>, and Eclipse
won't add them if you commit their parent directory.
</li>
<li>
<b>Compare With...</b> : various ways to compare this file</li>
<li>
<b>Replace With...</b> : various ways to replace this file</li>
</ul>

\note You disable that new files are automatically added when using Commit here: Preferences -> Team -> SVN -> Uncheck "Check the new resources in the commit dialog".

<hr>
\section secSVNWarnings Some Warnings
<ul>
<li> \warning Do not add unnecessary files. That means: Make sure you don't add unnecessary files. In ug4, a click on ug4's
 base directory and there a commit will almost always add lots of unnecessary files like your build, bin or lib files.
 Make use of the svn:ignore option or that those files are unchecked. </li>
<li> \warning Do not add lots of result files or huge data files. Keep in mind \em everyone has to download them.
</li></ul>

<hr>
Other sources:
- http://svnbook.red-bean.com
- http://maverick.inria.fr/~Xavier.Decoret/resources/svn/ 

<hr>
\section secSVNTroubleshooting SVN Troubleshooting
Sometimes SVN is not getting it right. Some problems are:
<ul>

<li>svn update says 'Skipped .'. That is because your current directory is not under version control. If you do a 'ls -la', you will see you don't have a .svn folder there. That can
 have several reasons:
 <ul>
 <li>You are in a directory which is not meant to be in SVN, for example the subfolders bin, debug or release,  . They are not under version control because those files are generated 
 from the build script, and contain a lot of big files, and we don't want everyone to be forced to download unnecessary files. Solution: Change to another directory. </li>
 <li> Sometimes you are sure that a directory should be in svn, but is not, because .svn was deleted accidentially. Then: say your directory is THEDIR/THESUBDIR and you are in
  THEDIR/THESUBDIR. then
 \code
 cd ..
 mv THESUBDIR THESUBDIR_mine
 svn update THESUBDIR
 \endcode
 This way, you save your directories contents, and forced SVN to re-download the contents of THESUBDIR, which then contains a .svn again. If you made changes to THESUBDIR, use
 \code
 diff THESUBDIR THESUBDIR_mine
 \endcode
 Now you can manually re-insert your changes from THESUBDIR_mine to THESUBDIR.
 </li>
 <li> If the same happended to you in the base directory of ug4, you have to rename your whole ug4 to ug4_mine and re-checkout ug4.</li>
 </ul>
 <li> I accidentially deleted directory THESUBDIR which was under SVN control. How to get it back?
 \code
 cd ..
 svn update THESUBDIR
 \endcode
 </li>
 <li> svn update / co takes a while, then displays some connection error.<br>
 This might be a problem on a cluster that you are not allowed to connect to the svn server (see \ref secSVNSSHTunneling), or our svn server is down. 
 </ul>  


\section secSVNPartialCheckout Partial Checkout
In most cases it is not necessary to check out the whole \ug4 repository.
Therefore SVN provides the possibility to only checkout certain directories of
a repository.

To achieve this, first checkout the trunk of \ug4 without recursing into subdirectories
by
\code
    svn co --depth immediates svn://fuji.gcsc.uni-frankfurt.de/ug4/trunk ug4svn
\endcode
Now only folders and files of `ug4/trunk` without their content is downloaded.
To get a minimal compiling copy of \ug4 issue the following commands:
\code
    cd ug4svn
    cd ugbase && svn update --set-depth infinity && cd ..
    cd cmake && svn update --set-depth infinity && cd ..
    cd scripts && svn update --set-depth infinity && cd ..
\endcode
This will download all the core parts of \ug4 (`ugbase`), the various files and
scripts for \em CMake (`cmake`) and the utility scripts, which might turn
out helpful (`scripts`).

If you are working on a certain app without bothering about all the others, first
get the list of all apps and then only check out your awesome one:
\code
    cd apps && svn update --set-depth immediates && cd ..
    cd apps/your_awesome_app && svn update --set-depth infinity && cd ../..
\endcode
Similar you proceed with plugins:
\code
    cd plugins && svn update --set-depth immediates && cd ..
    cd plugins/core && svn update --set-depth immediates && cd ../..
    cd plugins/experimental && svn update --set-depth immediates && cd ../..
\endcode
Finally there are some great news for you: SVN will keep track and remember your 
settings regarding the depth.
I.e. if you `svn update` in the root (i.e. `ug4svn`) it will only checkout and
update those directories and files, which you have checked out so you will not
get annoyed by a flood of changes in a boring app you don't care about!

*/