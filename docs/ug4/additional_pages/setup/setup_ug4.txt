//	created by Martin Rupp
//	martin.rupp@gcsc.uni-frankfurt.de
//	y12 m02 d29

/**	\page pageSetupUG4 Setting up UG on Clusters

	- \ref secGeneral_Notes "General Notes"
	- \ref secCMake "CMake, Toolchains, Compilers"
	- \ref secInstallation_of_additional_software "Installation of additional software"
	- \ref secMacOSX "MacOSX"
	- \ref secCekon	"Cekon"
	- \ref secJuGene "JuGene"
	- \ref secHermit "Hermit"

<hr>
\section secGeneral_Notes General Notes
<hr>
All examples are for running ug in parallel with <tt><NP></tt> processors and <tt>$UGARGS</tt> as arguments,
where <tt>$UGARGS</tt> is a environment variable which for example is defined by (Bash):

\verbatim
UGARGS=UGARGS="-ex ../scripts/tests/modular_scalability_test.lua -dim 2 -grid ../data/grids/unit_square_01/unit_square_01_quads_8x8.ugx"
\endverbatim

Except for your own Computer/Workstation or explicitly stated, do NOT EVER use <tt>mpirun -np <NP> ugshell $UGARGS</tt>
to start your job on a cluster! The node you are logging into is only a login node, and you don't 
want to run your job on these.

<hr>
\section secCMake CMake, Toolchains, Compilers
<hr>
On systems where login nodes and compute nodes run different OSes it is necessary to "cross compile".
The necessary information is provided by a so called "toolchain file"
(cf. for example <a href="http://www.vtk.org/Wiki/CMake_Cross_Compiling">CMake Cross Compiling</a>).

In this case run CMake like this
\verbatim
cmake -DCMAKE_TOOLCHAIN_FILE=<TOOLCHAINFILE> ..
\endverbatim
You can specify other compilers than detected by CMake from the command line with
\verbatim
cmake -DCMAKE_C_COMPILER=cc -DCMAKE_CXX_COMPILER=CC ..
\endverbatim

<hr>
\section secInstallation_of_additional_software Installation of additional software
</hr>

TODO: The following information for additional software can possibly be placed in a more general context.

In case a software needed for a certain tasks is not available on the system
(or has the wrong version number) one has to install it locally (unless you
have administrator privileges - congratulations ...)
We propose the following procedures for which we assume that all additional
software is installed in a directory <tt>local</tt> directly in your home directory.

<ul>
    <li> CMake:
    \verbatim
    wget http://www.cmake.org/files/v2.8/cmake-2.8.6.tar.gz
    tar xvzf cmake-2.8.6.tar.gz
    cd cmake-2.8.6/
    ./bootstrap --prefix=$HOME/local
    make
    make install
    \endverbatim

    Shortcut for executing:
    \verbatim
    alias cmake='$HOME/local/bin/cmake'
    \endverbatim
    </li>
</ul>

<hr>
\section secWindows Windows
<hr>


<hr>
\section secMacOSX MacOSX
<hr>
You can use 
\verbatim
mpirun -np <NP> ugshell $UGARGS
\endverbatim
to run ug.


<hr>
\section secCekon Cekon
<hr>
Cekon is the in-house cluster of the G-CSC.
By now it consists of 23 compute nodes with 4 cores per node, that is 92 computing cores.

Start your job with
\verbatim
salloc -n <NP> mpirun ugshell $UGARGS
\endverbatim

DDT: Todo: Is DDT installed, and can it be used.

<hr>
\section secJuGene JuGene
</hr>

<a href="http://www.fz-juelich.de/ias/jsc/EN/Expertise/Supercomputers/JUGENE/JUGENE_node.html">JuGene</a> - the 
<a href="www.fz-juelich.de/ias/jsc/EN/Expertise/Supercomputers/JUGENE/Configuration/Configuration_node.html">72 racks Blue Gene/P </a> system at FZ J&uuml;lich in total provides 
294.912 cores and 144 Tbyte RAM. The 73.728 compute nodes each have a quadcore Power 32-bit PC 450 running at 850 MHz, with 2 Gbyte of RAM. 
See more on the Architecture of Jugene <a href="http://www.fz-juelich.de/SharedDocs/Downloads/IAS/JSC/EN/JUGENE/SlidesBGPArchitecture.pdf"> here </a>.

<p>
Note that the login nodes are running under "SuSE Linux Enterprise Server 10" (SLES 10), while the CNs are running a limited version of Linux called "Compute Node Kernel" (CNK),
Therefore its necessary to cross-compile for BlueGene (cf \sec. \ref secCMake; see sec. \ref secConfiguration_of_ug4_for_JuGene).

<hr>
\subsection secAccess_to_JuGenes_login_nodes Access to JuGene's login nodes:
</hr>
Its necessary to upload the SSH key of the machine from which to connect to one of JuGenes login nodes.
To be able to connect from different machines maybe you find it useful to define one of GCSCs machines (e.g. speedo, quadruped, ...) as "springboard" to one of JuGenes login nodes.
See <a href="http://www.fz-juelich.de/ias/jsc/EN/Expertise/Supercomputers/JUGENE/UserInfo/Logon.html">Logging on to JUGENE</a> (also for X11 problems).

<hr>
\subsection secConfiguration_of_ug4_for_JuGene Configuration of ug4 for JuGene cross compile
</hr>

For JuGene you have to use a different toolchain file. Start cmake like this
\verbatim
cmake -DCMAKE_TOOLCHAIN_FILE=../toolchain_file_jugene.cmake ..
\endverbatim
or, for static builds which is the configuration of joice if you want to execute very large jobs,

\verbatim
cmake -DSTATIC=ON -DCMAKE_TOOLCHAIN_FILE=../toolchain_file_jugene_static.cmake ..
\endverbatim

Note: A "static build" where also all system libraries are linked statically need some additional "hand work" by now:
After configuration with CMake edit the following files by replacing all occurences of <tt>libXXXXXXX.so</tt> by <tt>libXXXXXXX.a</tt>:
   CMakeCache.txt,                                                                                                                                
   ugbase/ug_shell/CMakeFiles/ugshell.dir/link.txt,                                                                                               
   ugbase/ug_shell/CMakeFiles/ugshell.dir/build.make                                                                                              

Or use this sed line:
\verbatim
sed -i '' 's/\([[:alnum:]]*\).so/\1.a/g' CMakeCache.txt ugbase/ug_shell/CMakeFiles/ugshell.dir/link.txt ugbase/ug_shell/CMakeFiles/ugshell.dir/build.make 
\endverbatim

<hr>
\subsection secWorking_with_ug4_on_JuGene Working with ug4 on JuGene
</hr>



<hr>
\subsubsection secBasic_job_handling Basic job handling
</hr>

<ul>
	<li> There are different computing modes:
	<ul>
	<li> Quad Mode: All four cores run one MPI process. Memory/MPI Process = 1/4 CN RAM. (-mode VN)
	<li> Dual Mode: Two cores run one MPI process. (hybrid MPI/OpenMP). Memory/MPI Process = 1/2 CN RAM. (-mode DUAL)
	<li> SMP Mode: All four cores run one MPI process. (hybrid MPI/OpenMP). Memory/MPI Process = CN RAM. (-mode SMP)
	</ul>
	Note that in quad mode (using all 4 processors of a computing node) this means each core has 512 MByte of RAM.
	<li> <a href="http://www.fz-juelich.de/ias/jsc/EN/Expertise/Supercomputers/JUGENE/UserInfo/QuickIntroduction.html">Quick Introduction</a> to job handling.
	<li> Also look at <a href="http://www.fz-juelich.de/ias/jsc/EN/Expertise/Supercomputers/JUGENE/UserInfo/mpirun.html"> job/mpirun options </a>
	<li> 
	<a href="http://www.fz-juelich.de/ias/jsc/EN/Expertise/Supercomputers/JUGENE/UserInfo/llview.html"> llview </a> is a tool with a graphical X11 user interface for displaying system status.
		
    <li> Running interactive jobs ( <a href="http://www.fz-juelich.de/ias/jsc/EN/Expertise/Supercomputers/JUGENE/UserInfo/LoadLevelerInteractive.html"> llrun </a> )
	
    Example:
    \verbatim
    llrun -np  <NP> -exe ./ugshell -mode VN -mapfile TXYZ -verbose 2 -env LD_LIBRARY_PATH=/bgsys/drivers/ppcfloor/comm/lib/ $UGARGS
    \endverbatim

    Please note that <tt>llrun</tt> only allows jobs up to 256 (-mode SMP) / 512 (-mode DUAL) / 1024 (-mode VN) tasks!
    </li>

    <li> Querying Quota Status:

    \verbatim
    q_cpuquota <options>
    \endverbatim

    Useful Options: 
    \arg <tt>-?</tt>             usage information and all options 
    \arg <tt>-j <jobstepid></tt> for a single job 
    \arg <tt>-t <time></tt>      for all jobs in the specified time, e.g.
    <tt>q_cpuquota -t 23.11.2011 01.12.2011</tt>
    \arg <tt>-d <number></tt> for last number of days (positive integer)
    </li>

	<li> Batch Jobs are submitted by <a href="http://www2.fz-juelich.de/jsc/jugene/usage/loadl/llsubmit/"> llsubmit</a>:

	\verbatim
	llsubmit <cmdfile>
	\endverbatim

	where <tt><cmdfile></tt> is a shell script file containing job definitions.
	See <a href="http://www.fz-juelich.de/ias/jsc/EN/Expertise/Supercomputers/JUGENE/UserInfo/LoadLevelerSamples.html">Job File Samples</a>.
	TODO: LoadLeveler script etc. hinterlegen.
<hr>
\subsubsection secVery_large_jobs_on_JuGene Very large jobs on JuGene
</hr>

For very large jobs be sure to have ug4 built as a completely static executable (c.f. above)!
In general: Large jobs (e.g. jobs larger than 32 racks normally run on Tuesday only.

More information <a href="mailto:ingo.heppner@gcsc.uni-frankfurt.de">ingo.heppner@gcsc.uni-frankfurt.de</a>


<hr>
\section secHermit Hermit
<hr>
For Hermit, you have to use a different toolchain file. Start cmake like this
\verbatim
cmake -DCMAKE_TOOLCHAIN_FILE=../toolchain_file_hermit.cmake ..
\endverbatim

<hr>

*/
