//	created by Martin Rupp
//	martin.rupp@gcsc.uni-frankfurt.de
//	y12 m02 d29

//todo:	More prominent note on OpenMPI for all operating systems!

/** \page pageUG4SetupParallel Installation on Parallel Computers

- \ref secGeneral_Notes
- \ref secCMake
- \ref secInstallation_of_additional_software 
- \ref secMacOSX

Special instructions for the different parallel computers are on separate pages:
- \subpage pageUG4ParallelCekon
- \subpage pageUG4ParallelJuGene &mdash; R.I.P. &mdash; please use \em JuQueen!
- \subpage pageUG4ParallelJuQueen
- \subpage pageUG4ParallelHermit

Instructions for password-less login to the different clusters are on the page
about \ref pageUG4SSH (including \ref secSSHKeys, \ref secSSHHopping, \ref secSSHFS).

 See also \ref pageugsubmit.

<hr>
\section secGeneral_Notes General Notes

All examples are for running ug in parallel with <tt>&lt;NP&gt;</tt> processors 
and <tt>$UGARGS</tt> as arguments, where <tt>&lt;NP&gt;</tt> is a placeholder 
for the number of MPI processes and <tt>$UGARGS</tt> is an Unix environment 
variable which for example is defined by (Bash syntax; just to shorten command 
lines):
\verbatim
UGARGS="-ex ../scripts/tests/modular_scalability_test.lua -dim 2 -grid ../data/grids/unit_square_01/unit_square_01_quads_8x8.ugx"
\endverbatim

\warning Except for your own computer/workstation or explicitly stated, do 
<strong>NOT EVER</strong> use <tt>mpirun -np &lt;NP&gt; ugshell $UGARGS</tt> to 
start your job on a cluster!
The node you are logging into is only a login node, and you don't want to run 
your job on these.


<hr>
\section secCMake CMake, Toolchains, Compilers

\subsection secCMake_ToolchainFiles Toolchain File
On some systems (especially when the software is built for a different system 
than the one which does the build) it is necessary to change some configuration 
settings done by \em CMake (like compilers or flags to use) by a so called 
"toolchain file" (cf. for example 
<a href="http://www.vtk.org/Wiki/CMake_Cross_Compiling">CMake Cross Compiling</a>).

In this case run \em CMake like this
\verbatim
cmake -DCMAKE_TOOLCHAIN_FILE=<TOOLCHAINFILE> ..
\endverbatim

Toolchain files are located in <tt>cmake/toolchain</tt>.

\subsection secStaticBuild Static Builds 
ug4 is using external libraries and distributes some of its own codes into libraries (e.g. plugins).
There are two ways of dealing with libraries:
<ul>
<li> <em>dynamic linking</em>: When the program is started, the library code is loaded out of another file. Those other files are called <a href=http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html>shared libraries</a>. They usually end on .so or .so*.</li>
<li> <em>static linking</em>: The library code is written into the program binary when linking is done. When the program is started, all code is already loaded, since
it is <em>in</em> the program itself. Static libraries usually end on '.a'. See also <a href=https://en.wikipedia.org/wiki/Static_library>Static Libraries</a>.</li>
</ul>   
Although its possible on most clusters to create shared libraries and run 
dynamically linked executables this is <strong>in general not 
recommended</strong>, since loading of shared libraries can delay the 
startup of such an application considerably, especially when using large 
partitions (8 racks or more).
See for example  <a href="http://www.fz-juelich.de/ias/jsc/EN/Expertise/Supercomputers/JUQUEEN/UserInfo/SharedLibraries.html">Shared Libraries and Dynamic Executables on Juqueen</a>.

Start CMake like this
\code
cmake -DSTATIC_BUILD=ON -DCMAKE_TOOLCHAIN_FILE=../cmake/toolchain/juqueen.cmake ..
\endcode

If you're using a \ref secCMake_ToolchainFiles, use
\code
cmake -DSTATIC_BUILD=ON -DCMAKE_TOOLCHAIN_FILE=<TOOLCHAINFILE> ..
\endcode 

\warning You must use this line in a <em>clean</em> directory, without previous cmake files. Otherwise you will have linking problems with some files like MPI (error "attempted static link of dynamic object").
    

\subsection secCMake_OtherCompilers Setting compilers to use
You can specify other compilers than detected by \em CMake from the command 
line with
\verbatim
cmake -DCMAKE_C_COMPILER=cc -DCMAKE_CXX_COMPILER=CC ..
\endverbatim

\subsection secCMake_GCC412 GCC 4.1.2
<em>GCC v. 4.1.2</em>, like it is default on \em cekon, is not able to compile 
a debug build (i.e. configured with <tt>cmake -DDEBUG=ON ..</tt>) because of an 
internal compiler error (<tt>internal compiler error: in force_type_die, at 
dwarf2out.c...</tt>). The error seems also to be there on gcc 4.3.
In this case it is possible to configure \ug4 by specifying <em>GCC v. 
4.4.4</em>, which is also installed on \em cekon as an alternative compiler:
\verbatim
cmake -DCMAKE_CXX_COMPILER=/usr/bin/g++44 ..
\endverbatim

Alternatively one can instruct the (default) compiler to produce the debug 
infos in <a href="http://gcc.gnu.org/ml/gcc/2001-04/msg01028.html">another 
format</a>. 
To do so, call \em CMake with
\verbatim
cmake -DDEBUG_FORMAT=-gstabs ..
\endverbatim

This sets \em STABS as format of debug infos.

If you need to choose another compiler, please consider writing your own 
toolchain file, so others can benefit from your knowledge. 


<hr>
\section secInstallation_of_additional_software Installation of Additional Software

Unfortunately on some systems it turned out that especially the build tool 
\em CMake, absolutely necessary to configure \ug4 (cf. \ref pageUG4Install, 
\ref secInstallCMake), was not available.
In such cases you have to install the required software yourself (typically 
locally).
For some installation instructions &mdash; including those for \em CMake &mdash;
see \ref pageAdditionalSoftware .


<hr>
\section secWindows Windows
<!--
TODO: Write installation instructions for Windows clusters and parallel computing on Windows
-->


<hr>
\section secMacOSX MacOSX

After installation of a MPI implementation (e.g. 
<a href="http://www.open-mpi.org/">OpenMPI</a>, for example via 
<a href="http://www.macports.org">MacPorts</a>:
<tt>sudo port install openmpi</tt>) you can use
\verbatim
mpirun -np <NP> ugshell $UGARGS
\endverbatim
to run \ug4.

*/
