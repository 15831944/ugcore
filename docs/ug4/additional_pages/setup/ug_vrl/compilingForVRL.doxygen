/** \page pageUG4SetupUG_VRL How to build UG for VRL

These pages give instructions and help in setting up and compiling \ug4 for VRL.
simple and special usage as well for development.

\note This page is at the moment a copy of some private notes that were made
      during the try to build \ug for VRL at a windows pc. 
      
      

-------------------------------------
NATIV UG UNTER WINDOWS 7 BAUEN    
stand 2012-06-27
-------------------------------------


0) VORBEREITUNGEN

0.1)  Es werden die folgenden Programme benötigt:

  - git oder svn 
  - MSYS
  - Mingw64
  - Cmake
  - Boost
  - DependencyWalker
  - UG (aus dem repository)

0.2) Installations-Hinweise:

  - UG

  *) erzeuge einen Ordner ug
  *) öffne eine Konsole (cmd) und gehe in der Konsole in den neu erzeugten Ordner ug
  
  * svn) im Ordner ug: (erzeugt einen ordner release) (stabile version)

	svn co svn://fuji.gcsc.uni-frankfurt.de/ug4/tags/releases

  * git) im Ordner ug: (erzeugt einen ordner trunk) (aktuelle Entwicklerversion)
        (NUR BSP , GENAUEN BEFEHL PRUEFEN) (USER durch eigenen benutzernamen ersetzen)

	git svn clone USER@fuji.gcsc.uni-frankfurt.de/ug4/trunk

  *) erzeuge im Ordner (ug oder releases) 2 neue Ordner, 
     "builds64" fuer die 64-bit-Kompilate
     "builds32" fuer die 32-bit-Kompilate

  - MSYS-Mingw (32bit) / Mingw64 (soweit erinnerung)

  *) installiere zuerst die 32bit version das MSYS - MinGW -Bundle nach "C:/MinGW"
  *) installiere MinGW64 nach C:/MinGW64
  *) kopiere mingw32-make in den Ordner "C:/MinGW64/bin" und benenne es in "make" um



--------------------------------------------------------------------------
VORGEHENSWEISE ZUM BAU VON NATIV UG UNTER WINDOWS 7 64bit (für 32bit = x86 und 64bit = x64) 
    &&&
VORGEHENSWEISE ZUM ERSTELLEN VON VRL-UG.jar
stand 2012-06-27  , VRL=0.4.1
--------------------------------------------------------------------------


1. Schritt:    Aktualisiere UG

     - öffne git-bash
     cd /C/Apps/ug/trunk
     git svn rebase

2. Schritt:    Konfiguriere UG         

//  Zusatz: setze manuell zu verwendende compiler
//          problem mit cmake, kann libgmp-10.dll nicht finden (2012-11-06) 
//          alle versuche gescheitert
//
//  CC=/c/MinGW/bin/gcc CXX=/c/MinGW/bin/g++ cmake
//
//  CC=/c/MinGW/bin/gcc CXX=/c/MinGW/bin/g++ cmake ../ug4.0.2 -G"MinGW Makefiles" -DCMAKE_SHARED_LINKER_FLAGS=-Wl,--kill-at -DTARGET=vrl -DDEBUG=OFF -DLAPACK=OFF -DBLAS=OFF -DINTERNAL_BOOST=OFF -DEMBEDDED_PLUGINS=ON -Dd3f=OFF -DEMBED_SVN_REV=OFF -DReceptorKinetic=OFF -DLinearElastoPlasticity=OFF
//
//  in CMD  C:\MinGW\bin\
//  cmake ../ug4.0.2 -G"MinGW Makefiles" -DCMAKE_CXX_COMPILER=C:\MinGW\bin\g++ -DCMAKE_C_COMPILER=C:\MinGW\bin\gcc -DCMAKE_SHARED_LINKER_FLAGS=-Wl,--kill-at -DTARGET=vrl -DDEBUG=OFF -DLAPACK=OFF -DBLAS=OFF -DINTERNAL_BOOST=OFF -DEMBEDDED_PLUGINS=ON -Dd3f=OFF -DEMBED_SVN_REV=OFF -DReceptorKinetic=OFF -DLinearElastoPlasticity=OFF


32bit  a)
     cd ../builds32/         (wechselt in den Ordner mit den cmake-config-dateien)
     cmake ../trunk/       (zeigt die aktuelle konfiguration an)
     cmake ../trunk/ -G"MinGW Makefiles" -DCMAKE_SHARED_LINKER_FLAGS=-Wl,--kill-at -DTARGET=vrl -DDEBUG=OFF -DLAPACK=OFF -DBLAS=OFF -DINTERNAL_BOOST=OFF -DEMBEDDED_PLUGINS=ON -Dd3f=OFF -DEMBED_SVN_REV=OFF -DReceptorKinetic=ON -DLinearElastoPlasticity=OFF

64bit  b)
     cd ../builds64/         (wechselt in den Ordner mit den cmake-config-dateien)
     cmake ../trunk/       (zeigt die aktuelle konfiguration an)   
     cmake ../trunk/ -G"MSYS Makefiles" -DCMAKE_SHARED_LINKER_FLAGS=-Wl,--kill-at -DTARGET=vrl -DDEBUG=OFF -DLAPACK=OFF -DBLAS=OFF -DINTERNAL_BOOST=OFF -DEMBEDDED_PLUGINS=ON -Dd3f=OFF -DEMBED_SVN_REV=OFF -DReceptorKinetic=ON -DLinearElastoPlasticity=OFF

3.a) Schritt: Compiliere UG 32bit

     - Setze die Umgebungsvariable MINGW auf C:\MinGW
     - Ändere temoprär die Umgebungsvariable MSYS so dass sh.exe NICHT mehr im PATH liegt 
     z.B: hänge "-pp" an d.h. kein echter pfad zu sh.exe

     - öffne neue Konsole (cmd)
     cd\
     cd Apps/ug/builds32/  (bzw z.B. cd ../../Apps/ug-svn/releases/build-4-0-2--32)
     mingw32-make

3.b) Schritt: Compiliere UG 64bit

     - Setze die Umgebungsvariable MINGW auf C:\mingw64
     - Ändere die Umgebungsvariable MSYS so dass sh.exe im PATH liegt (z.B: lösche "-pp")
     - öffne neue Konsole (cmd)
     cd\
     cd Apps/ug/builds64/
     make


4.)  Schritt: Native UG zippen

     - erzeuge einen Ordner "windows"
     - erzeuge in "windows" 2 Ordner "x64" und "x86"
     
32bit a)
    - kopiere den Inhalt (libug.dll und Ordner plugins) aus "ug/trunk/bin"  nach "windows/x86"
    - öffne mit dem Program "DependencyWalker" libug.dll aus "windows/x86" 
    - kopiere alle dort angezeigten zusätzlich benötigten dlls nach "windows/x86"
    - zippe den Inhalt von "windows/x86" inklusive plugins ordner zu "natives.zip" in den Ordner "windows/x86"
    - Mache eine kopie vom Ordner "windows" zb. mit namen "windows-libs"
    - lösche aus "windows/x86" alles ausser "natives.zip"

   
64bit b)
    - kopiere den Inhalt (libug.dll und Ordner plugins) aus "ug/trunk/bin"  nach "windows/x64"
    - öffne mit dem Program "DependencyWalker" libug.dll aus "windows/x64" 
    - kopiere alle dort angezeigten zusätzlich benötigten dlls nach "windows/x64"
    - zippe den Inhalt von "windows/x64" inklusive plugins ordner zu "natives.zip" in den Ordner "windows/x64"
    - Mache eine kopie vom Ordner "windows" zb. mit namen "windows-libs"
    - lösche aus "windows/x64" alles ausser "natives.zip"


5.)  Schritt: VRL-UG für windows bauen
    
    - kopiere den Ordner "windows" ins "VRL-UG-JAVA-PROJEKT" ins verzeichnis "VRL-UG/src/eu/mihosoft/vrl/plugin/content/natives"


6.) Schritt: VRL-UG bauen

    - öffne "VRL-UG-JAVA-PROJEKT" mit einer Entwicklungsumgebung (z.B. Netbeans)
    - kompiliere das komplette projekt (z.b. Clean & Build)
    - die fertige "VRL-UG.jar" datei ist unter "VRL-UG/dist" zu finden


-------------------------------------------------------------------------------------
-							  
-  VORGEHENSWEISE ZUM ERSTELLEN EINES WINDOWS-VRL-STUDIO-BUNDLES FÜR 32bit und 64bit  
-  stand 2012-06-27  , VRL=0.4.1
-							  
-------------------------------------------------------------------------------------


0.) Schritt:  VRL-Studio erzeugen

    - öffne "VRL-STUDIO-JAVA-PROJEKT" mit einer Entwicklungsumgebung (z.B. Netbeans)
    - kompiliere das komplette projekt (z.b. Clean & Build)
    - die fertige "VRL-UG.jar" datei für windows ist unter "VRL-Studio/dist-final/windows" zu finden
    - den Inhalt von "VRL-Studio/dist-final/windows" (Ordner VRL-Studio) in einen Ordner kopieren
      z.b. "Documents/stable-versions/EREIGNIS/windows" wobei EREIGNIS durch zb. "2012-06-27" oder
      einen beliebigen anderen markanten Bezeichner zu ersetzen ist

1.) Schritt: Java (JRE) ins Bundle kopieren

    - lade von der Java-Seite die aktuellen JRE Versionen für 32bit (i586) und für 64bit (x64) herunter
    - installiere diese temporär z.b. nach "C:/temp/jre/xYY", wobei YY = 86 oder 64 je nach Bittigkeit
    - kopiere den Ordner "jre" nach "Documents/stable-versions/EREIGNIS/windows/VRL-Studio/.application"

2.) Schritt: Plugins mitliefern

    - erzeuge einen Ordner "plugin-updates" unter "VRL-Studio/.application/resources/studio-resources/property-folder-template"
    - kopiere alle mitzulieferende plugins in den neu erzeugten Ordner (plugin-updates)
    
3.) Schritt: HELP-HTML-SEITEN zum VRL-Studio (nur Information zum prüfen)

    - falls diese mitgeliefert werden sollen muss unter "VRL-Studio/.application/resources/studio-resources/" ein
      Ordner "help" vorhanden sein in dem die HELP-HTML-SEITEN abzulegen sind

4.) Schritt: VRL-Studio zippen
   
    - zippe den Ordner VRL-Studio der unter "Documents/stable-versions/EREIGNIS/windows" liegt
      und benenne die zip-datei "VRL-Studio-windows.zip" um verwechslungen mit anderen studio-bundels für
      linux und mac zu verhindern

5.) Schritt: VRL-Studio-Bundle weitergeben und ausführen

    - "VRL-Studio-windows.zip" auf die Computer an beliebige Stelle kopieren
    - "VRL-Studio-windows.zip" dort entpacken und nicht nur öffnen !!!
    - den entpackten ordner öffnen und run.bat starten (durch doppel klick oder konsolen-aufruf)


-----------------------------------------------------------
-							  -
-   AELTERE bzw WEITERE INFORMATIONEN / HINWEISE / TIPPS  -
-							  -
-----------------------------------------------------------


um auslieferbare versionen des vrl-studio zu erzeugen, gehe man wie folgt vor:

1) checke aus den repositories jeweils die stable tags der plugins, der vrl
   und des vrl-studios und baue die dateien "projekt".jar.
   meist sind die jars unter "projekt-ordner"/dist oder "projekt-ordner"/dist-final
   zu finden.

   BEACHTE:

   VRL-UG:
   vrl-ug hat native abhaengigkeiten. aus diesem grund muss nativ-ug auf jedem unterstuezten
   OS und entsprechender OS-bit-version gebaut werden (mac, linux x64 + x86, windows x64 + x86).

     # unter windows
     #
     # a) wird dem vrl-studio ein jre7-32bit fuer x86 als auch jre7-64bit fuer x64 mitgeliefert.
     #    {
     #     diese ordner sind als VORLAGEN unter
     #     C:\Apps\VRL-Studio\VRL-Studio\resources\application-template\windows\VRL-Studio\.application
     #     und gebaut unter
     #     C:\Apps\VRL-Studio\VRL-Studio\dist-final\windows\VRL-Studio\.application
     #    }
     #    entsprechend muss das start-skript des vrl-studios auf diese java version verweisen.
     #    anstatt "java" (System Java Version) steht dort "jre/xYY/bin/java"
     #
     # b) mit dem programm dependencywalker muss nativ-ug untersucht werden, um die
     #    benoetigten .dlls anschliessend in den ordner
     #   "pfad/zum/repo"\VRL-UG4\VRL-UG\src\eu\mihosoft\vrl\natives\windows\"bitVERSION"
     #    zu kopieren.
     #
     #    BSP I)    32bit:
     #    benoetigte dlls:  libgcc_s_dw2-1.dll libstdc++6.dll
     #    zu finden unter:  C:\MinGW\bin
     #    kopiere nach:     C:\Apps\VRL-UG4\VRL-UG\src\eu\mihosoft\vrl\natives\windows\x86
     #
     #    BSP II)   64bit:
     #    benoetigte dlls:  "keine"
     #    zu finden unter:  ""
     #    kopiere nach:     C:\Apps\VRL-UG4\VRL-UG\src\eu\mihosoft\vrl\natives\windows\x64
     #
     # c) anschliessend libug4.dll und den ordner plugins kopieren
     #    BSP 64bit:
     #          von:   C:\Apps\ug\releases\bin64-backup
     #         nach:   C:\Apps\VRL-UG4\VRL-UG\src\eu\mihosoft\vrl\natives\windows\x64

   VRL-UG-API:
   kann auf einem beliebigem OS mit der stabilen Version von vrl-ug und dem vrl-studio
   erzeugt werden

   VRL-USERDATA:
   das plugin vrl-userdata benoetigt zum erzeugen einer stabilen version die stabilen
   versionen von vrl-ug und vrl-ug-api

2) nach dem erzeugen der jeweiligen "plugin".jars muessen diese in folgende ordner-struktur
   kopiert werden:     "OS"/plugin-updates
   # BSP: linux/plugin-updates

3) kopiere die ordner "OS"/plugin-updates in folgendes verzeichnis:
   "pfad/zum/repo"/VRL-Studio/VRL-Studio/dist-final/"OS"/VRL-Studio/.application/resources/studio-resources/property-folder-template

     # BSP:
     /Users/christianpoliwoda/Apps/VRL-Studio/VRL-Studio/dist-final/linux/VRL-Studio/.application/resources/studio-resources/property-folder-template

     # ACHTUNG: MAC
     # "pfad/zum/repo"/VRL-Studio/VRL-Studio/dist-final/osx/
     # im Ordner osx  rechts klick auf VRL-Studio und im kontext-/popup-menue "Paketinhalt zeigen"
     # auswaehlen. anschliessend weiter navigieren nach:
     # /Contents/Resources/Java/resources/studio-resources/property-folder-template
     #
     # BSP MAC: gesamter pfad
     # /Users/christianpoliwoda/Apps/VRL-Studio/VRL-Studio/dist-final/osx/VRL-Studio.app/Contents/Resources/Java/resources/studio-resources/property-folder-template

4) erzeuge unter "pfad/zum/repo"/VRL-Studio/VRL-Studio/dist-final/"OS"/ jeweils eine zip-datei
   und benenne diese um in:     VRL-Studio-"OS".zip
          # BSP:  /Users/christianpoliwoda/Apps/VRL-Studio/VRL-Studio/dist-final/linux/VRL-Studio-linux.zip

---------------------------------------------------------------------

Ordnerstruktur: ug/builds
                ug/builds32
                ug/releases
		ug/trunk

in builds:

cmake ../trunk/ -G"MinGW Makefiles" -DTARGET=vrl -DLAPACK=OFF -DBLAS=OFF -DINTERNAL_BOOST=OFF -DCMAKE_SHARED_LINKER_FLAGS=-Wl,--kill-at

dieser befehl legt die von mir benötigen compelieroptionen fest.
dabei loescht -DCMAKE_SHARED_LINKER_FLAGS=-Wl,--kill-at die @("at")-zeichen die an die nativen methoden von ug gehaengt werden.

auf dem system muessenfolgende programme installiert und in der PATH-variable eingetragen sein:
     java jdk
     boost
     cmake
     mingw
     mingw64 (http://sourceforge.net/apps/trac/mingw-w64/wiki/Make)

dabei muss java im path-variable von windows vor den system variablen 
stehen. sonst kommt eine meldung JNI nicht gefunden.

um den compeliervorgang zu starten:

mingw32-make

--------------------------------------------------------------------------

unter VRL-UG4/VRL-UG/src/eu/mihosoft/vrl/natives      /windows/x64  und-oder /windows/x68

sollten für weitere native libs hinzugefügt werden.
welche das sind findet man mit dem programm dependencywalker raus , http://www.dependencywalker.com/
wenn man libug4.dll damit öffnet.

z.B. findet man libgcc_s_dw2-1.dll und libstdc++-6.dll unter MinGW/bin

wenn man java jre dem vrl-studio mitgeben möchte kopiert man den jre7 
ordner seiner java7 Installation in folgendes verzeichnis:

\VRL-Studio\VRL-Studio\resources\application-template\windows\VRL-Studio\.application

anschliessend muss man noch die start-skripte (run.bat und run-no3d.bat) abändern unter:

\VRL-Studio\VRL-Studio\resources\application-template\windows\VRL-Studio

von:    start /realtime java   ......(weitere angaben)
zu:      start /realtime jre7/bin/java  ......(weitere angaben)


-------------------------------------------------------------------------


cmake ../trunk -DCMAKE_CXX_FLAGS=-fPIC -DCMAKE_C_FLAGS=-fPIC -DCMAKE_SHARED_LINKER_FLAGS=-Wl,--kill-at

um ein Problem unter windows 32 bit eventuell zu beheben
der beim starten von vrl-studio mit ug4 plugin auftritt
muss vorher native ug (c++) obige parameter mit übergeben werden

-------------------------------------------------------------------------


alternatives makefile unter windows mit internal boost wenn direkt mit 
svn ausgeckeckt

cmake ../ug4.0.0/ -G"MSYS Makefiles" -DLAPACK=OFF -DBLAS=OFF -DTARGET=vrl -DCMAKE_SHARED_LINKER_FLAGS=-Wl,--kill-at



im Ordner ug: (erzeugt einen ordner release)

svn co svn://fuji.gcsc.uni-frankfurt.de/ug4/tags/releases

------------------------------------------------------------------------------

       

*/