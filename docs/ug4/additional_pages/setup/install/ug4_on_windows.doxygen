/** \page pageUG4OnWindows Prerequisites on Windows

[TOC]

<hr>
\section secWindowsCompiler Compiler

The Microsoft Visual C++ 2013 compiler is recommended for compilation of \ug4
on windows which can be downloaded as part of the free
"Express 2013 for Windows Desktop" edition if Visual Studio
(https://www.visualstudio.com/en-us/products/visual-studio-express-vs.aspx).

To allow for parallel compilation in the terminal one can use the tool "jom"
(https://wiki.qt.io/Jom). Extract it and add the path in which the executable
lies to your path environment variable.

<hr>
\section secInstallWindowsCMake Install CMake on Windows

Compilation of \ug4 furthermore requires the installation of \em CMake, which 
can be obtained from here http://www.cmake.org/cmake/resources/software.html
(min Release 2.6).

You should be able to run \em CMake from your \em MSYS shell (simply type 
\c cmake and press enter).
If \c cmake can't be found, then you should add the path to the \em CMake binary 
to your systems \c PATH variable.

<hr>
\section secInstallWindowsSVN Checkout ug4 on Windows

In order to checkout \ug4 from its svn repository you'll either have to follow 
the instructions on how to setup \em Eclipse with svn capabilities
or you'll have to install <em>Tortoise SVN</em> (http://tortoisesvn.net/),
depending on whether you want to develop with \ug4 or just compile it.
<em>Tortoise SVN</em> is an extension to the Windows Explorer and
allows to perform checkouts and commits through the right-click-menu directly
in the explorer.

If you're using <em>Tortoise SVN</em>, then open the explorer and navigate to 
the folder in which you want to install \ug4.
Create a new folder called \c ug4, perform a right click on it and choose 
<em>svn checkout</em> from the menu.
Enter the repository adress (e.g. 
<tt>svn://fuji.gcsc.uni-frankfurt.de/ug4/trunk</tt>), your username and 
password.

<hr>
\section secWindowsBuild	Building

	-	Open 'VS2013 x64 Cross Tools-Eingabeaufforderung'
		(Start -> All Programs -> Visual Studio 2013 -> Visual Studio-Tools)
		if you want to compile a 64bit version of \ug4. If you only want to
		compile for 32bit, use 'VS2013 x86 Native Tools-Eingabeaufforderung'.
	
	-	Navigate to your ug4-source-code root folder

	- 	create a new directory called 'build' ('mkdir build').

	-	Before cmake can be run and before jom can be executed one hast to initialize
		Visual Studios environment variables.

	-	type 'cmake -G"NMake Makefiles JOM" ..\trunk -DSTATIC_BUILD=ON -DDIM="2;3" -DCPU=1'.
		This generates the makefiles required by Jom. You only have to execute cmake if
		you're initializing a build directory for the first time or if you want to
		change build options. See note below if you want to use the Visual Studio IDE directly.

	-	You may enable or disable other plugins using cmake, e.g.: 'cmake ..\trunk -DSmallStrainMechanics=OFF'

	-	to execute a build, type 'jom'

\note	If you want to embed the build-process in your favorite IDE (e.g. Eclipse or Sublime)
		you most likely have to initialize the build environment before executing jom.
		You can do this by calling '"C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\vcvarsall.bat" x86_amd64'
		before calling jom.

\note	If you want to compile directly using the VisualStudio IDE, you should specify another
		builder for cmake. Create a new build directory and call 'cmake -G"Visual Studio 2013" ...'
		(rest as above). This creates a visual-studio project which you can edit and compile
		using the Visual Studio IDE.
*/
