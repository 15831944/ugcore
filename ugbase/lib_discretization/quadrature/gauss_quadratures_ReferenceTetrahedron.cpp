//This file is parsed from UG 3.9.


#include "quadrature.h"

namespace ug{

template <>
GaussQuadrature<ReferenceTetrahedron>::GaussQuadrature(int order)
{
	switch(order)
	{
	case 0:
		m_order = 0;
		m_num_points = 7;

		if(allocate_memory(m_num_points) != true)
		{
			assert(0 && "Error while constructing Quadrature Rule.");
		}

		m_points[0][0] = 0.250000000000000000;
		m_points[0][1] = 0.250000000000000000;
		m_points[0][2] = 0.250000000000000000;
		m_points[1][0] = 0.100000000000000000;
		m_points[1][1] = 0.100000000000000000;
		m_points[1][2] = 0.400000000000000000;
		m_points[2][0] = 0.100000000000000000;
		m_points[2][1] = 0.400000000000000000;
		m_points[2][2] = 0.100000000000000000;
		m_points[3][0] = 0.400000000000000000;
		m_points[3][1] = 0.100000000000000000;
		m_points[3][2] = 0.100000000000000000;
		m_points[4][0] = 0.100000000000000000;
		m_points[4][1] = 0.400000000000000000;
		m_points[4][2] = 0.400000000000000000;
		m_points[5][0] = 0.400000000000000000;
		m_points[5][1] = 0.100000000000000000;
		m_points[5][2] = 0.400000000000000000;
		m_points[6][0] = 0.400000000000000000;
		m_points[6][1] = 0.400000000000000000;
		m_points[6][2] = 0.100000000000000000;

		m_weights[0] = 1./6. *  0.142857142857143000;
		m_weights[1] = 1./6. *  0.142857142857143000;
		m_weights[2] = 1./6. *  0.142857142857143000;
		m_weights[3] = 1./6. *  0.142857142857143000;
		m_weights[4] = 1./6. *  0.142857142857143000;
		m_weights[5] = 1./6. *  0.142857142857143000;
		m_weights[6] = 1./6. *  0.142857142857143000;
		break;

	case 1:
		m_order = 1;
		m_num_points = 1;

		if(allocate_memory(m_num_points) != true)
		{
			assert(0 && "Error while constructing Quadrature Rule.");
		}

		m_points[0][0] = 0.250000000000000000;
		m_points[0][1] = 0.250000000000000000;
		m_points[0][2] = 0.250000000000000000;

		m_weights[0] = 1./6. *  1.000000000000000000;
		break;

	case 2:
		m_order = 2;
		m_num_points = 4;

		if(allocate_memory(m_num_points) != true)
		{
			assert(0 && "Error while constructing Quadrature Rule.");
		}

		m_points[0][0] = 0.585410200000000000;
		m_points[0][1] = 0.138196600000000000;
		m_points[0][2] = 0.138196600000000000;
		m_points[1][0] = 0.138196600000000000;
		m_points[1][1] = 0.585410200000000000;
		m_points[1][2] = 0.138196600000000000;
		m_points[2][0] = 0.138196600000000000;
		m_points[2][1] = 0.138196600000000000;
		m_points[2][2] = 0.585410200000000000;
		m_points[3][0] = 0.138196600000000000;
		m_points[3][1] = 0.138196600000000000;
		m_points[3][2] = 0.138196600000000000;

		m_weights[0] = 1./6. *  0.250000000000000000;
		m_weights[1] = 1./6. *  0.250000000000000000;
		m_weights[2] = 1./6. *  0.250000000000000000;
		m_weights[3] = 1./6. *  0.250000000000000000;
		break;

	case 3:
		m_order = 3;
		m_num_points = 8;

		if(allocate_memory(m_num_points) != true)
		{
			assert(0 && "Error while constructing Quadrature Rule.");
		}

		m_points[0][0] = 0.000000000000000000;
		m_points[0][1] = 0.000000000000000000;
		m_points[0][2] = 0.000000000000000000;
		m_points[1][0] = 1.000000000000000000;
		m_points[1][1] = 0.000000000000000000;
		m_points[1][2] = 0.000000000000000000;
		m_points[2][0] = 0.000000000000000000;
		m_points[2][1] = 1.000000000000000000;
		m_points[2][2] = 0.000000000000000000;
		m_points[3][0] = 0.000000000000000000;
		m_points[3][1] = 0.000000000000000000;
		m_points[3][2] = 1.000000000000000000;
		m_points[4][0] = 0.333333333333000000;
		m_points[4][1] = 0.333333333333000000;
		m_points[4][2] = 0.000000000000000000;
		m_points[5][0] = 0.333333333333000000;
		m_points[5][1] = 0.000000000000000000;
		m_points[5][2] = 0.333333333333000000;
		m_points[6][0] = 0.000000000000000000;
		m_points[6][1] = 0.333333333333000000;
		m_points[6][2] = 0.333333333333000000;
		m_points[7][0] = 0.333333333333000000;
		m_points[7][1] = 0.333333333333000000;
		m_points[7][2] = 0.333333333333000000;

		m_weights[0] = 1./6. *  0.025000000000000000;
		m_weights[1] = 1./6. *  0.025000000000000000;
		m_weights[2] = 1./6. *  0.025000000000000000;
		m_weights[3] = 1./6. *  0.025000000000000000;
		m_weights[4] = 1./6. *  0.225000000000000000;
		m_weights[5] = 1./6. *  0.225000000000000000;
		m_weights[6] = 1./6. *  0.225000000000000000;
		m_weights[7] = 1./6. *  0.225000000000000000;
		break;

	case 5:
		m_order = 5;
		m_num_points = 15;

		if(allocate_memory(m_num_points) != true)
		{
			assert(0 && "Error while constructing Quadrature Rule.");
		}

		m_points[0][0] = 0.250000000000000000;
		m_points[0][1] = 0.250000000000000000;
		m_points[0][2] = 0.250000000000000000;
		m_points[1][0] = 0.091971078000000000;
		m_points[1][1] = 0.091971078000000000;
		m_points[1][2] = 0.091971078000000000;
		m_points[2][0] = 0.724086770000000000;
		m_points[2][1] = 0.091971078000000000;
		m_points[2][2] = 0.091971078000000000;
		m_points[3][0] = 0.091971078000000000;
		m_points[3][1] = 0.724086770000000000;
		m_points[3][2] = 0.091971078000000000;
		m_points[4][0] = 0.091971078000000000;
		m_points[4][1] = 0.091971078000000000;
		m_points[4][2] = 0.724086770000000000;
		m_points[5][0] = 0.319793630000000000;
		m_points[5][1] = 0.319793630000000000;
		m_points[5][2] = 0.319793630000000000;
		m_points[6][0] = 0.040619117000000000;
		m_points[6][1] = 0.319793630000000000;
		m_points[6][2] = 0.319793630000000000;
		m_points[7][0] = 0.319793630000000000;
		m_points[7][1] = 0.040619117000000000;
		m_points[7][2] = 0.319793630000000000;
		m_points[8][0] = 0.319793630000000000;
		m_points[8][1] = 0.319793630000000000;
		m_points[8][2] = 0.040619117000000000;
		m_points[9][0] = 0.443649170000000000;
		m_points[9][1] = 0.056350833000000000;
		m_points[9][2] = 0.056350833000000000;
		m_points[10][0] = 0.056350833000000000;
		m_points[10][1] = 0.443649170000000000;
		m_points[10][2] = 0.056350833000000000;
		m_points[11][0] = 0.056350833000000000;
		m_points[11][1] = 0.056350833000000000;
		m_points[11][2] = 0.443649170000000000;
		m_points[12][0] = 0.443649170000000000;
		m_points[12][1] = 0.443649170000000000;
		m_points[12][2] = 0.056350833000000000;
		m_points[13][0] = 0.443649170000000000;
		m_points[13][1] = 0.056350833000000000;
		m_points[13][2] = 0.443649170000000000;
		m_points[14][0] = 0.056350833000000000;
		m_points[14][1] = 0.443649170000000000;
		m_points[14][2] = 0.443649170000000000;

		m_weights[0] = 1./6. *  0.118518520000000000;
		m_weights[1] = 1./6. *  0.071937084000000000;
		m_weights[2] = 1./6. *  0.071937084000000000;
		m_weights[3] = 1./6. *  0.071937084000000000;
		m_weights[4] = 1./6. *  0.071937084000000000;
		m_weights[5] = 1./6. *  0.069068207000000000;
		m_weights[6] = 1./6. *  0.069068207000000000;
		m_weights[7] = 1./6. *  0.069068207000000000;
		m_weights[8] = 1./6. *  0.069068207000000000;
		m_weights[9] = 1./6. *  0.052910053000000000;
		m_weights[10] = 1./6. *  0.052910053000000000;
		m_weights[11] = 1./6. *  0.052910053000000000;
		m_weights[12] = 1./6. *  0.052910053000000000;
		m_weights[13] = 1./6. *  0.052910053000000000;
		m_weights[14] = 1./6. *  0.052910053000000000;
		break;

	case 6:
		m_order = 6;
		m_num_points = 24;

		if(allocate_memory(m_num_points) != true)
		{
			assert(0 && "Error while constructing Quadrature Rule.");
		}

		m_points[0][0] = 0.214602871259152029;
		m_points[0][1] = 0.214602871259152029;
		m_points[0][2] = 0.214602871259152029;
		m_points[1][0] = 0.356191386222543912;
		m_points[1][1] = 0.214602871259152029;
		m_points[1][2] = 0.214602871259152029;
		m_points[2][0] = 0.214602871259152029;
		m_points[2][1] = 0.356191386222543912;
		m_points[2][2] = 0.214602871259152029;
		m_points[3][0] = 0.214602871259152029;
		m_points[3][1] = 0.214602871259152029;
		m_points[3][2] = 0.356191386222543912;
		m_points[4][0] = 0.040673958534611353;
		m_points[4][1] = 0.040673958534611353;
		m_points[4][2] = 0.040673958534611353;
		m_points[5][0] = 0.877978124396165941;
		m_points[5][1] = 0.040673958534611353;
		m_points[5][2] = 0.040673958534611353;
		m_points[6][0] = 0.040673958534611353;
		m_points[6][1] = 0.877978124396165941;
		m_points[6][2] = 0.040673958534611353;
		m_points[7][0] = 0.040673958534611353;
		m_points[7][1] = 0.040673958534611353;
		m_points[7][2] = 0.877978124396165941;
		m_points[8][0] = 0.322337890142275510;
		m_points[8][1] = 0.322337890142275510;
		m_points[8][2] = 0.322337890142275510;
		m_points[9][0] = 0.032986329573173469;
		m_points[9][1] = 0.322337890142275510;
		m_points[9][2] = 0.322337890142275510;
		m_points[10][0] = 0.322337890142275510;
		m_points[10][1] = 0.032986329573173469;
		m_points[10][2] = 0.322337890142275510;
		m_points[11][0] = 0.322337890142275510;
		m_points[11][1] = 0.322337890142275510;
		m_points[11][2] = 0.032986329573173469;
		m_points[12][0] = 0.063661001875017525;
		m_points[12][1] = 0.063661001875017525;
		m_points[12][2] = 0.269672331458315808;
		m_points[13][0] = 0.063661001875017525;
		m_points[13][1] = 0.269672331458315808;
		m_points[13][2] = 0.063661001875017525;
		m_points[14][0] = 0.269672331458315808;
		m_points[14][1] = 0.063661001875017525;
		m_points[14][2] = 0.063661001875017525;
		m_points[15][0] = 0.063661001875017525;
		m_points[15][1] = 0.063661001875017525;
		m_points[15][2] = 0.603005664791649141;
		m_points[16][0] = 0.063661001875017525;
		m_points[16][1] = 0.603005664791649141;
		m_points[16][2] = 0.063661001875017525;
		m_points[17][0] = 0.603005664791649141;
		m_points[17][1] = 0.063661001875017525;
		m_points[17][2] = 0.063661001875017525;
		m_points[18][0] = 0.063661001875017525;
		m_points[18][1] = 0.269672331458315808;
		m_points[18][2] = 0.603005664791649141;
		m_points[19][0] = 0.063661001875017525;
		m_points[19][1] = 0.603005664791649141;
		m_points[19][2] = 0.269672331458315808;
		m_points[20][0] = 0.269672331458315808;
		m_points[20][1] = 0.063661001875017525;
		m_points[20][2] = 0.603005664791649141;
		m_points[21][0] = 0.603005664791649141;
		m_points[21][1] = 0.063661001875017525;
		m_points[21][2] = 0.269672331458315808;
		m_points[22][0] = 0.269672331458315808;
		m_points[22][1] = 0.603005664791649141;
		m_points[22][2] = 0.063661001875017525;
		m_points[23][0] = 0.603005664791649141;
		m_points[23][1] = 0.269672331458315808;
		m_points[23][2] = 0.063661001875017525;

		m_weights[0] = 1./6. *  0.039922750258167492;
		m_weights[1] = 1./6. *  0.039922750258167492;
		m_weights[2] = 1./6. *  0.039922750258167492;
		m_weights[3] = 1./6. *  0.039922750258167492;
		m_weights[4] = 1./6. *  0.010077211055320643;
		m_weights[5] = 1./6. *  0.010077211055320643;
		m_weights[6] = 1./6. *  0.010077211055320643;
		m_weights[7] = 1./6. *  0.010077211055320643;
		m_weights[8] = 1./6. *  0.055357181543654722;
		m_weights[9] = 1./6. *  0.055357181543654722;
		m_weights[10] = 1./6. *  0.055357181543654722;
		m_weights[11] = 1./6. *  0.055357181543654722;
		m_weights[12] = 1./6. *  0.048214285714285714;
		m_weights[13] = 1./6. *  0.048214285714285714;
		m_weights[14] = 1./6. *  0.048214285714285714;
		m_weights[15] = 1./6. *  0.048214285714285714;
		m_weights[16] = 1./6. *  0.048214285714285714;
		m_weights[17] = 1./6. *  0.048214285714285714;
		m_weights[18] = 1./6. *  0.048214285714285714;
		m_weights[19] = 1./6. *  0.048214285714285714;
		m_weights[20] = 1./6. *  0.048214285714285714;
		m_weights[21] = 1./6. *  0.048214285714285714;
		m_weights[22] = 1./6. *  0.048214285714285714;
		m_weights[23] = 1./6. *  0.048214285714285714;
		break;

	case 7:
		m_order = 7;
		m_num_points = 31;

		if(allocate_memory(m_num_points) != true)
		{
			assert(0 && "Error while constructing Quadrature Rule.");
		}

		m_points[0][0] = 0.500000000000000000;
		m_points[0][1] = 0.500000000000000000;
		m_points[0][2] = 0.000000000000000000;
		m_points[1][0] = 0.500000000000000000;
		m_points[1][1] = 0.000000000000000000;
		m_points[1][2] = 0.500000000000000000;
		m_points[2][0] = 0.000000000000000000;
		m_points[2][1] = 0.500000000000000000;
		m_points[2][2] = 0.500000000000000000;
		m_points[3][0] = 0.000000000000000000;
		m_points[3][1] = 0.000000000000000000;
		m_points[3][2] = 0.500000000000000000;
		m_points[4][0] = 0.000000000000000000;
		m_points[4][1] = 0.500000000000000000;
		m_points[4][2] = 0.000000000000000000;
		m_points[5][0] = 0.500000000000000000;
		m_points[5][1] = 0.000000000000000000;
		m_points[5][2] = 0.000000000000000000;
		m_points[6][0] = 0.250000000000000000;
		m_points[6][1] = 0.250000000000000000;
		m_points[6][2] = 0.250000000000000000;
		m_points[7][0] = 0.078213192330318064;
		m_points[7][1] = 0.078213192330318064;
		m_points[7][2] = 0.078213192330318064;
		m_points[8][0] = 0.765360423009045807;
		m_points[8][1] = 0.078213192330318064;
		m_points[8][2] = 0.078213192330318064;
		m_points[9][0] = 0.078213192330318064;
		m_points[9][1] = 0.765360423009045807;
		m_points[9][2] = 0.078213192330318064;
		m_points[10][0] = 0.078213192330318064;
		m_points[10][1] = 0.078213192330318064;
		m_points[10][2] = 0.765360423009045807;
		m_points[11][0] = 0.121843216663905175;
		m_points[11][1] = 0.121843216663905175;
		m_points[11][2] = 0.121843216663905175;
		m_points[12][0] = 0.634470350008284476;
		m_points[12][1] = 0.121843216663905175;
		m_points[12][2] = 0.121843216663905175;
		m_points[13][0] = 0.121843216663905175;
		m_points[13][1] = 0.634470350008284476;
		m_points[13][2] = 0.121843216663905175;
		m_points[14][0] = 0.121843216663905175;
		m_points[14][1] = 0.121843216663905175;
		m_points[14][2] = 0.634470350008284476;
		m_points[15][0] = 0.332539164446420624;
		m_points[15][1] = 0.332539164446420624;
		m_points[15][2] = 0.332539164446420624;
		m_points[16][0] = 0.002382506660738128;
		m_points[16][1] = 0.332539164446420624;
		m_points[16][2] = 0.332539164446420624;
		m_points[17][0] = 0.332539164446420624;
		m_points[17][1] = 0.002382506660738128;
		m_points[17][2] = 0.332539164446420624;
		m_points[18][0] = 0.332539164446420624;
		m_points[18][1] = 0.332539164446420624;
		m_points[18][2] = 0.002382506660738128;
		m_points[19][0] = 0.100000000000000000;
		m_points[19][1] = 0.100000000000000000;
		m_points[19][2] = 0.200000000000000000;
		m_points[20][0] = 0.100000000000000000;
		m_points[20][1] = 0.200000000000000000;
		m_points[20][2] = 0.100000000000000000;
		m_points[21][0] = 0.200000000000000000;
		m_points[21][1] = 0.100000000000000000;
		m_points[21][2] = 0.100000000000000000;
		m_points[22][0] = 0.100000000000000000;
		m_points[22][1] = 0.100000000000000000;
		m_points[22][2] = 0.600000000000000000;
		m_points[23][0] = 0.100000000000000000;
		m_points[23][1] = 0.600000000000000000;
		m_points[23][2] = 0.100000000000000000;
		m_points[24][0] = 0.600000000000000000;
		m_points[24][1] = 0.100000000000000000;
		m_points[24][2] = 0.100000000000000000;
		m_points[25][0] = 0.100000000000000000;
		m_points[25][1] = 0.200000000000000000;
		m_points[25][2] = 0.600000000000000000;
		m_points[26][0] = 0.100000000000000000;
		m_points[26][1] = 0.600000000000000000;
		m_points[26][2] = 0.200000000000000000;
		m_points[27][0] = 0.600000000000000000;
		m_points[27][1] = 0.100000000000000000;
		m_points[27][2] = 0.200000000000000000;
		m_points[28][0] = 0.200000000000000000;
		m_points[28][1] = 0.100000000000000000;
		m_points[28][2] = 0.600000000000000000;
		m_points[29][0] = 0.200000000000000000;
		m_points[29][1] = 0.600000000000000000;
		m_points[29][2] = 0.100000000000000000;
		m_points[30][0] = 0.600000000000000000;
		m_points[30][1] = 0.200000000000000000;
		m_points[30][2] = 0.100000000000000000;

		m_weights[0] = 1./6. *  0.005820105820105820;
		m_weights[1] = 1./6. *  0.005820105820105820;
		m_weights[2] = 1./6. *  0.005820105820105820;
		m_weights[3] = 1./6. *  0.005820105820105820;
		m_weights[4] = 1./6. *  0.005820105820105820;
		m_weights[5] = 1./6. *  0.005820105820105820;
		m_weights[6] = 1./6. *  0.109585340796652922;
		m_weights[7] = 1./6. *  0.063599649146482121;
		m_weights[8] = 1./6. *  0.063599649146482121;
		m_weights[9] = 1./6. *  0.063599649146482121;
		m_weights[10] = 1./6. *  0.063599649146482121;
		m_weights[11] = 1./6. *  -0.375106440685991110;
		m_weights[12] = 1./6. *  -0.375106440685991110;
		m_weights[13] = 1./6. *  -0.375106440685991110;
		m_weights[14] = 1./6. *  -0.375106440685991110;
		m_weights[15] = 1./6. *  0.029348551578440996;
		m_weights[16] = 1./6. *  0.029348551578440996;
		m_weights[17] = 1./6. *  0.029348551578440996;
		m_weights[18] = 1./6. *  0.029348551578440996;
		m_weights[19] = 1./6. *  0.165343915343915344;
		m_weights[20] = 1./6. *  0.165343915343915344;
		m_weights[21] = 1./6. *  0.165343915343915344;
		m_weights[22] = 1./6. *  0.165343915343915344;
		m_weights[23] = 1./6. *  0.165343915343915344;
		m_weights[24] = 1./6. *  0.165343915343915344;
		m_weights[25] = 1./6. *  0.165343915343915344;
		m_weights[26] = 1./6. *  0.165343915343915344;
		m_weights[27] = 1./6. *  0.165343915343915344;
		m_weights[28] = 1./6. *  0.165343915343915344;
		m_weights[29] = 1./6. *  0.165343915343915344;
		m_weights[30] = 1./6. *  0.165343915343915344;
		break;

	case 8:
		m_order = 8;
		m_num_points = 43;

		if(allocate_memory(m_num_points) != true)
		{
			assert(0 && "Error while constructing Quadrature Rule.");
		}

		m_points[0][0] = 0.250000000000000000;
		m_points[0][1] = 0.250000000000000000;
		m_points[0][2] = 0.250000000000000000;
		m_points[1][0] = 0.206829931610673204;
		m_points[1][1] = 0.206829931610673204;
		m_points[1][2] = 0.206829931610673204;
		m_points[2][0] = 0.379510205167980388;
		m_points[2][1] = 0.206829931610673204;
		m_points[2][2] = 0.206829931610673204;
		m_points[3][0] = 0.206829931610673204;
		m_points[3][1] = 0.379510205167980388;
		m_points[3][2] = 0.206829931610673204;
		m_points[4][0] = 0.206829931610673204;
		m_points[4][1] = 0.206829931610673204;
		m_points[4][2] = 0.379510205167980388;
		m_points[5][0] = 0.082103588310546723;
		m_points[5][1] = 0.082103588310546723;
		m_points[5][2] = 0.082103588310546723;
		m_points[6][0] = 0.753689235068359831;
		m_points[6][1] = 0.082103588310546723;
		m_points[6][2] = 0.082103588310546723;
		m_points[7][0] = 0.082103588310546723;
		m_points[7][1] = 0.753689235068359831;
		m_points[7][2] = 0.082103588310546723;
		m_points[8][0] = 0.082103588310546723;
		m_points[8][1] = 0.082103588310546723;
		m_points[8][2] = 0.753689235068359831;
		m_points[9][0] = 0.005781950505197997;
		m_points[9][1] = 0.005781950505197997;
		m_points[9][2] = 0.005781950505197997;
		m_points[10][0] = 0.982654148484406008;
		m_points[10][1] = 0.005781950505197997;
		m_points[10][2] = 0.005781950505197997;
		m_points[11][0] = 0.005781950505197997;
		m_points[11][1] = 0.982654148484406008;
		m_points[11][2] = 0.005781950505197997;
		m_points[12][0] = 0.005781950505197997;
		m_points[12][1] = 0.005781950505197997;
		m_points[12][2] = 0.982654148484406008;
		m_points[13][0] = 0.050532740018894224;
		m_points[13][1] = 0.050532740018894224;
		m_points[13][2] = 0.449467259981105776;
		m_points[14][0] = 0.050532740018894224;
		m_points[14][1] = 0.449467259981105776;
		m_points[14][2] = 0.050532740018894224;
		m_points[15][0] = 0.449467259981105776;
		m_points[15][1] = 0.050532740018894224;
		m_points[15][2] = 0.050532740018894224;
		m_points[16][0] = 0.050532740018894224;
		m_points[16][1] = 0.449467259981105776;
		m_points[16][2] = 0.449467259981105776;
		m_points[17][0] = 0.449467259981105776;
		m_points[17][1] = 0.050532740018894224;
		m_points[17][2] = 0.449467259981105776;
		m_points[18][0] = 0.449467259981105776;
		m_points[18][1] = 0.449467259981105776;
		m_points[18][2] = 0.050532740018894224;
		m_points[19][0] = 0.229066536116811140;
		m_points[19][1] = 0.229066536116811140;
		m_points[19][2] = 0.035639582788534044;
		m_points[20][0] = 0.229066536116811140;
		m_points[20][1] = 0.035639582788534044;
		m_points[20][2] = 0.229066536116811140;
		m_points[21][0] = 0.035639582788534044;
		m_points[21][1] = 0.229066536116811140;
		m_points[21][2] = 0.229066536116811140;
		m_points[22][0] = 0.229066536116811140;
		m_points[22][1] = 0.229066536116811140;
		m_points[22][2] = 0.506227344977843677;
		m_points[23][0] = 0.229066536116811140;
		m_points[23][1] = 0.506227344977843677;
		m_points[23][2] = 0.229066536116811140;
		m_points[24][0] = 0.506227344977843677;
		m_points[24][1] = 0.229066536116811140;
		m_points[24][2] = 0.229066536116811140;
		m_points[25][0] = 0.229066536116811140;
		m_points[25][1] = 0.035639582788534044;
		m_points[25][2] = 0.506227344977843677;
		m_points[26][0] = 0.229066536116811140;
		m_points[26][1] = 0.506227344977843677;
		m_points[26][2] = 0.035639582788534044;
		m_points[27][0] = 0.506227344977843677;
		m_points[27][1] = 0.229066536116811140;
		m_points[27][2] = 0.035639582788534044;
		m_points[28][0] = 0.035639582788534044;
		m_points[28][1] = 0.229066536116811140;
		m_points[28][2] = 0.506227344977843677;
		m_points[29][0] = 0.035639582788534044;
		m_points[29][1] = 0.506227344977843677;
		m_points[29][2] = 0.229066536116811140;
		m_points[30][0] = 0.506227344977843677;
		m_points[30][1] = 0.035639582788534044;
		m_points[30][2] = 0.229066536116811140;
		m_points[31][0] = 0.036607749553197424;
		m_points[31][1] = 0.036607749553197424;
		m_points[31][2] = 0.190486041934633456;
		m_points[32][0] = 0.036607749553197424;
		m_points[32][1] = 0.190486041934633456;
		m_points[32][2] = 0.036607749553197424;
		m_points[33][0] = 0.190486041934633456;
		m_points[33][1] = 0.036607749553197424;
		m_points[33][2] = 0.036607749553197424;
		m_points[34][0] = 0.036607749553197424;
		m_points[34][1] = 0.036607749553197424;
		m_points[34][2] = 0.736298458958971697;
		m_points[35][0] = 0.036607749553197424;
		m_points[35][1] = 0.736298458958971697;
		m_points[35][2] = 0.036607749553197424;
		m_points[36][0] = 0.736298458958971697;
		m_points[36][1] = 0.036607749553197424;
		m_points[36][2] = 0.036607749553197424;
		m_points[37][0] = 0.036607749553197424;
		m_points[37][1] = 0.190486041934633456;
		m_points[37][2] = 0.736298458958971697;
		m_points[38][0] = 0.036607749553197424;
		m_points[38][1] = 0.736298458958971697;
		m_points[38][2] = 0.190486041934633456;
		m_points[39][0] = 0.736298458958971697;
		m_points[39][1] = 0.036607749553197424;
		m_points[39][2] = 0.190486041934633456;
		m_points[40][0] = 0.190486041934633456;
		m_points[40][1] = 0.036607749553197424;
		m_points[40][2] = 0.736298458958971697;
		m_points[41][0] = 0.190486041934633456;
		m_points[41][1] = 0.736298458958971697;
		m_points[41][2] = 0.036607749553197424;
		m_points[42][0] = 0.736298458958971697;
		m_points[42][1] = 0.190486041934633456;
		m_points[42][2] = 0.036607749553197424;

		m_weights[0] = 1./6. *  -0.123001131951839495;
		m_weights[1] = 1./6. *  0.085501834937201407;
		m_weights[2] = 1./6. *  0.085501834937201407;
		m_weights[3] = 1./6. *  0.085501834937201407;
		m_weights[4] = 1./6. *  0.085501834937201407;
		m_weights[5] = 1./6. *  0.011802199878803406;
		m_weights[6] = 1./6. *  0.011802199878803406;
		m_weights[7] = 1./6. *  0.011802199878803406;
		m_weights[8] = 1./6. *  0.011802199878803406;
		m_weights[9] = 1./6. *  0.001019004654557324;
		m_weights[10] = 1./6. *  0.001019004654557324;
		m_weights[11] = 1./6. *  0.001019004654557324;
		m_weights[12] = 1./6. *  0.001019004654557324;
		m_weights[13] = 1./6. *  0.027478102946803691;
		m_weights[14] = 1./6. *  0.027478102946803691;
		m_weights[15] = 1./6. *  0.027478102946803691;
		m_weights[16] = 1./6. *  0.027478102946803691;
		m_weights[17] = 1./6. *  0.027478102946803691;
		m_weights[18] = 1./6. *  0.027478102946803691;
		m_weights[19] = 1./6. *  0.034226914852091511;
		m_weights[20] = 1./6. *  0.034226914852091511;
		m_weights[21] = 1./6. *  0.034226914852091511;
		m_weights[22] = 1./6. *  0.034226914852091511;
		m_weights[23] = 1./6. *  0.034226914852091511;
		m_weights[24] = 1./6. *  0.034226914852091511;
		m_weights[25] = 1./6. *  0.034226914852091511;
		m_weights[26] = 1./6. *  0.034226914852091511;
		m_weights[27] = 1./6. *  0.034226914852091511;
		m_weights[28] = 1./6. *  0.034226914852091511;
		m_weights[29] = 1./6. *  0.034226914852091511;
		m_weights[30] = 1./6. *  0.034226914852091511;
		m_weights[31] = 1./6. *  0.012843114846972556;
		m_weights[32] = 1./6. *  0.012843114846972556;
		m_weights[33] = 1./6. *  0.012843114846972556;
		m_weights[34] = 1./6. *  0.012843114846972556;
		m_weights[35] = 1./6. *  0.012843114846972556;
		m_weights[36] = 1./6. *  0.012843114846972556;
		m_weights[37] = 1./6. *  0.012843114846972556;
		m_weights[38] = 1./6. *  0.012843114846972556;
		m_weights[39] = 1./6. *  0.012843114846972556;
		m_weights[40] = 1./6. *  0.012843114846972556;
		m_weights[41] = 1./6. *  0.012843114846972556;
		m_weights[42] = 1./6. *  0.012843114846972556;
		break;

	default: assert(0 && "Order not availabile. Can not construct GaussQuadrature.\n");
	}
}

template <>
bool RegisterQuadratureRule(QuadratureRuleProvider<ReferenceTetrahedron>& factory)
{
	static GaussQuadrature<ReferenceTetrahedron> gaussQuadratureReferenceTetrahedron_0(0);
	static GaussQuadrature<ReferenceTetrahedron> gaussQuadratureReferenceTetrahedron_1(1);
	static GaussQuadrature<ReferenceTetrahedron> gaussQuadratureReferenceTetrahedron_2(2);
	static GaussQuadrature<ReferenceTetrahedron> gaussQuadratureReferenceTetrahedron_3(3);
	static GaussQuadrature<ReferenceTetrahedron> gaussQuadratureReferenceTetrahedron_5(5);
	static GaussQuadrature<ReferenceTetrahedron> gaussQuadratureReferenceTetrahedron_6(6);
	static GaussQuadrature<ReferenceTetrahedron> gaussQuadratureReferenceTetrahedron_7(7);
	static GaussQuadrature<ReferenceTetrahedron> gaussQuadratureReferenceTetrahedron_8(8);

	bool success = true;
	success &= factory.register_rule(gaussQuadratureReferenceTetrahedron_0);
	success &= factory.register_rule(gaussQuadratureReferenceTetrahedron_1);
	success &= factory.register_rule(gaussQuadratureReferenceTetrahedron_2);
	success &= factory.register_rule(gaussQuadratureReferenceTetrahedron_3);
	success &= factory.register_rule(gaussQuadratureReferenceTetrahedron_5);
	success &= factory.register_rule(gaussQuadratureReferenceTetrahedron_6);
	success &= factory.register_rule(gaussQuadratureReferenceTetrahedron_7);
	success &= factory.register_rule(gaussQuadratureReferenceTetrahedron_8);
	return success;
}

}; // namespace ug

/*
 // register quadratures at factory
namespace {
using namespace ug;

template <>
std::vector<const QuadratureRule<ReferenceTetrahedron>* > QuadratureRuleProvider<ReferenceTetrahedron>::m_rules =
	std::vector<const QuadratureRule<ReferenceTetrahedron>* >();

};
*/
