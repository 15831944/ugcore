//  This file is parsed from UG 3.9.
//  It provides the Gauss Quadratures for a reference hexahedron.


#include "../quadrature.h"
#include "gauss_quad_hexahedron.h"

namespace ug{

GaussQuadrature<ReferenceHexahedron, 2>::GaussQuadrature()
{
	m_vPoint[0][0] = 0.211324865405187000;
	m_vPoint[0][1] = 0.211324865405187000;
	m_vPoint[0][2] = 0.211324865405187000;

	m_vPoint[1][0] = 0.788675134594813000;
	m_vPoint[1][1] = 0.211324865405187000;
	m_vPoint[1][2] = 0.211324865405187000;

	m_vPoint[2][0] = 0.211324865405187000;
	m_vPoint[2][1] = 0.788675134594813000;
	m_vPoint[2][2] = 0.211324865405187000;

	m_vPoint[3][0] = 0.788675134594813000;
	m_vPoint[3][1] = 0.788675134594813000;
	m_vPoint[3][2] = 0.211324865405187000;

	m_vPoint[4][0] = 0.211324865405187000;
	m_vPoint[4][1] = 0.211324865405187000;
	m_vPoint[4][2] = 0.788675134594813000;

	m_vPoint[5][0] = 0.788675134594813000;
	m_vPoint[5][1] = 0.211324865405187000;
	m_vPoint[5][2] = 0.788675134594813000;

	m_vPoint[6][0] = 0.211324865405187000;
	m_vPoint[6][1] = 0.788675134594813000;
	m_vPoint[6][2] = 0.788675134594813000;

	m_vPoint[7][0] = 0.788675134594813000;
	m_vPoint[7][1] = 0.788675134594813000;
	m_vPoint[7][2] = 0.788675134594813000;

	m_vWeight[0] =  0.125000000000000000;
	m_vWeight[1] =  0.125000000000000000;
	m_vWeight[2] =  0.125000000000000000;
	m_vWeight[3] =  0.125000000000000000;
	m_vWeight[4] =  0.125000000000000000;
	m_vWeight[5] =  0.125000000000000000;
	m_vWeight[6] =  0.125000000000000000;
	m_vWeight[7] =  0.125000000000000000;
}

GaussQuadrature<ReferenceHexahedron, 3>::GaussQuadrature()
{
	m_vPoint[0][0] = 0.000000000000000000;
	m_vPoint[0][1] = 0.500000000000000000;
	m_vPoint[0][2] = 0.500000000000000000;

	m_vPoint[1][0] = 0.500000000000000000;
	m_vPoint[1][1] = 0.000000000000000000;
	m_vPoint[1][2] = 0.500000000000000000;

	m_vPoint[2][0] = 0.500000000000000000;
	m_vPoint[2][1] = 0.500000000000000000;
	m_vPoint[2][2] = 0.000000000000000000;

	m_vPoint[3][0] = 0.500000000000000000;
	m_vPoint[3][1] = 0.500000000000000000;
	m_vPoint[3][2] = 1.000000000000000000;

	m_vPoint[4][0] = 0.500000000000000000;
	m_vPoint[4][1] = 1.000000000000000000;
	m_vPoint[4][2] = 0.500000000000000000;

	m_vPoint[5][0] = 1.000000000000000000;
	m_vPoint[5][1] = 0.500000000000000000;
	m_vPoint[5][2] = 0.500000000000000000;

	m_vWeight[0] =  0.166666666666666667;
	m_vWeight[1] =  0.166666666666666667;
	m_vWeight[2] =  0.166666666666666667;
	m_vWeight[3] =  0.166666666666666667;
	m_vWeight[4] =  0.166666666666666667;
	m_vWeight[5] =  0.166666666666666667;
}

GaussQuadrature<ReferenceHexahedron, 5>::GaussQuadrature()
{
	m_vPoint[0][0] = 0.102088787122889268;
	m_vPoint[0][1] = 0.500000000000000000;
	m_vPoint[0][2] = 0.500000000000000000;

	m_vPoint[1][0] = 0.500000000000000000;
	m_vPoint[1][1] = 0.102088787122889268;
	m_vPoint[1][2] = 0.500000000000000000;

	m_vPoint[2][0] = 0.500000000000000000;
	m_vPoint[2][1] = 0.500000000000000000;
	m_vPoint[2][2] = 0.102088787122889268;

	m_vPoint[3][0] = 0.500000000000000000;
	m_vPoint[3][1] = 0.500000000000000000;
	m_vPoint[3][2] = 0.897911212877110732;

	m_vPoint[4][0] = 0.500000000000000000;
	m_vPoint[4][1] = 0.897911212877110732;
	m_vPoint[4][2] = 0.500000000000000000;

	m_vPoint[5][0] = 0.897911212877110732;
	m_vPoint[5][1] = 0.500000000000000000;
	m_vPoint[5][2] = 0.500000000000000000;

	m_vPoint[6][0] = 0.120606544680335927;
	m_vPoint[6][1] = 0.120606544680335927;
	m_vPoint[6][2] = 0.120606544680335927;

	m_vPoint[7][0] = 0.120606544680335927;
	m_vPoint[7][1] = 0.120606544680335927;
	m_vPoint[7][2] = 0.879393455319664073;

	m_vPoint[8][0] = 0.120606544680335927;
	m_vPoint[8][1] = 0.879393455319664073;
	m_vPoint[8][2] = 0.120606544680335927;

	m_vPoint[9][0] = 0.120606544680335927;
	m_vPoint[9][1] = 0.879393455319664073;
	m_vPoint[9][2] = 0.879393455319664073;

	m_vPoint[10][0] = 0.879393455319664073;
	m_vPoint[10][1] = 0.120606544680335927;
	m_vPoint[10][2] = 0.120606544680335927;

	m_vPoint[11][0] = 0.879393455319664073;
	m_vPoint[11][1] = 0.120606544680335927;
	m_vPoint[11][2] = 0.879393455319664073;

	m_vPoint[12][0] = 0.879393455319664073;
	m_vPoint[12][1] = 0.879393455319664073;
	m_vPoint[12][2] = 0.120606544680335927;

	m_vPoint[13][0] = 0.879393455319664073;
	m_vPoint[13][1] = 0.879393455319664073;
	m_vPoint[13][2] = 0.879393455319664073;

	m_vWeight[0] =  0.110803324099722992;
	m_vWeight[1] =  0.110803324099722992;
	m_vWeight[2] =  0.110803324099722992;
	m_vWeight[3] =  0.110803324099722992;
	m_vWeight[4] =  0.110803324099722992;
	m_vWeight[5] =  0.110803324099722992;
	m_vWeight[6] =  0.041897506925207756;
	m_vWeight[7] =  0.041897506925207756;
	m_vWeight[8] =  0.041897506925207756;
	m_vWeight[9] =  0.041897506925207756;
	m_vWeight[10] =  0.041897506925207756;
	m_vWeight[11] =  0.041897506925207756;
	m_vWeight[12] =  0.041897506925207756;
	m_vWeight[13] =  0.041897506925207756;
}

GaussQuadrature<ReferenceHexahedron, 7>::GaussQuadrature()
{
	m_vPoint[0][0] = 0.500000000000000000;
	m_vPoint[0][1] = 0.500000000000000000;
	m_vPoint[0][2] = 0.500000000000000000;

	m_vPoint[1][0] = 0.207229978115440046;
	m_vPoint[1][1] = 0.500000000000000000;
	m_vPoint[1][2] = 0.500000000000000000;

	m_vPoint[2][0] = 0.500000000000000000;
	m_vPoint[2][1] = 0.207229978115440046;
	m_vPoint[2][2] = 0.500000000000000000;

	m_vPoint[3][0] = 0.500000000000000000;
	m_vPoint[3][1] = 0.500000000000000000;
	m_vPoint[3][2] = 0.207229978115440046;

	m_vPoint[4][0] = 0.500000000000000000;
	m_vPoint[4][1] = 0.500000000000000000;
	m_vPoint[4][2] = 0.792770021884559954;

	m_vPoint[5][0] = 0.500000000000000000;
	m_vPoint[5][1] = 0.792770021884559954;
	m_vPoint[5][2] = 0.500000000000000000;

	m_vPoint[6][0] = 0.792770021884559954;
	m_vPoint[6][1] = 0.500000000000000000;
	m_vPoint[6][2] = 0.500000000000000000;

	m_vPoint[7][0] = 0.031419180715895981;
	m_vPoint[7][1] = 0.152764932004147617;
	m_vPoint[7][2] = 0.292170366197967437;

	m_vPoint[8][0] = 0.031419180715895981;
	m_vPoint[8][1] = 0.292170366197967437;
	m_vPoint[8][2] = 0.847235067995852383;

	m_vPoint[9][0] = 0.031419180715895981;
	m_vPoint[9][1] = 0.707829633802032563;
	m_vPoint[9][2] = 0.152764932004147617;

	m_vPoint[10][0] = 0.031419180715895981;
	m_vPoint[10][1] = 0.847235067995852383;
	m_vPoint[10][2] = 0.707829633802032563;

	m_vPoint[11][0] = 0.152764932004147617;
	m_vPoint[11][1] = 0.031419180715895981;
	m_vPoint[11][2] = 0.707829633802032563;

	m_vPoint[12][0] = 0.152764932004147617;
	m_vPoint[12][1] = 0.292170366197967437;
	m_vPoint[12][2] = 0.031419180715895981;

	m_vPoint[13][0] = 0.152764932004147617;
	m_vPoint[13][1] = 0.707829633802032563;
	m_vPoint[13][2] = 0.968580819284104019;

	m_vPoint[14][0] = 0.152764932004147617;
	m_vPoint[14][1] = 0.968580819284104019;
	m_vPoint[14][2] = 0.292170366197967437;

	m_vPoint[15][0] = 0.292170366197967437;
	m_vPoint[15][1] = 0.031419180715895981;
	m_vPoint[15][2] = 0.152764932004147617;

	m_vPoint[16][0] = 0.292170366197967437;
	m_vPoint[16][1] = 0.152764932004147617;
	m_vPoint[16][2] = 0.968580819284104019;

	m_vPoint[17][0] = 0.292170366197967437;
	m_vPoint[17][1] = 0.847235067995852383;
	m_vPoint[17][2] = 0.031419180715895981;

	m_vPoint[18][0] = 0.292170366197967437;
	m_vPoint[18][1] = 0.968580819284104019;
	m_vPoint[18][2] = 0.847235067995852383;

	m_vPoint[19][0] = 0.707829633802032563;
	m_vPoint[19][1] = 0.031419180715895981;
	m_vPoint[19][2] = 0.847235067995852383;

	m_vPoint[20][0] = 0.707829633802032563;
	m_vPoint[20][1] = 0.152764932004147617;
	m_vPoint[20][2] = 0.031419180715895981;

	m_vPoint[21][0] = 0.707829633802032563;
	m_vPoint[21][1] = 0.847235067995852383;
	m_vPoint[21][2] = 0.968580819284104019;

	m_vPoint[22][0] = 0.707829633802032563;
	m_vPoint[22][1] = 0.968580819284104019;
	m_vPoint[22][2] = 0.152764932004147617;

	m_vPoint[23][0] = 0.847235067995852383;
	m_vPoint[23][1] = 0.031419180715895981;
	m_vPoint[23][2] = 0.292170366197967437;

	m_vPoint[24][0] = 0.847235067995852383;
	m_vPoint[24][1] = 0.292170366197967437;
	m_vPoint[24][2] = 0.968580819284104019;

	m_vPoint[25][0] = 0.847235067995852383;
	m_vPoint[25][1] = 0.707829633802032563;
	m_vPoint[25][2] = 0.031419180715895981;

	m_vPoint[26][0] = 0.847235067995852383;
	m_vPoint[26][1] = 0.968580819284104019;
	m_vPoint[26][2] = 0.707829633802032563;

	m_vPoint[27][0] = 0.968580819284104019;
	m_vPoint[27][1] = 0.152764932004147617;
	m_vPoint[27][2] = 0.707829633802032563;

	m_vPoint[28][0] = 0.968580819284104019;
	m_vPoint[28][1] = 0.292170366197967437;
	m_vPoint[28][2] = 0.152764932004147617;

	m_vPoint[29][0] = 0.968580819284104019;
	m_vPoint[29][1] = 0.707829633802032563;
	m_vPoint[29][2] = 0.847235067995852383;

	m_vPoint[30][0] = 0.968580819284104019;
	m_vPoint[30][1] = 0.847235067995852383;
	m_vPoint[30][2] = 0.292170366197967437;

	m_vWeight[0] =  -0.159420289855072464;
	m_vWeight[1] =  0.108888888888888889;
	m_vWeight[2] =  0.108888888888888889;
	m_vWeight[3] =  0.108888888888888889;
	m_vWeight[4] =  0.108888888888888889;
	m_vWeight[5] =  0.108888888888888889;
	m_vWeight[6] =  0.108888888888888889;
	m_vWeight[7] =  0.021086956521739130;
	m_vWeight[8] =  0.021086956521739130;
	m_vWeight[9] =  0.021086956521739130;
	m_vWeight[10] =  0.021086956521739130;
	m_vWeight[11] =  0.021086956521739130;
	m_vWeight[12] =  0.021086956521739130;
	m_vWeight[13] =  0.021086956521739130;
	m_vWeight[14] =  0.021086956521739130;
	m_vWeight[15] =  0.021086956521739130;
	m_vWeight[16] =  0.021086956521739130;
	m_vWeight[17] =  0.021086956521739130;
	m_vWeight[18] =  0.021086956521739130;
	m_vWeight[19] =  0.021086956521739130;
	m_vWeight[20] =  0.021086956521739130;
	m_vWeight[21] =  0.021086956521739130;
	m_vWeight[22] =  0.021086956521739130;
	m_vWeight[23] =  0.021086956521739130;
	m_vWeight[24] =  0.021086956521739130;
	m_vWeight[25] =  0.021086956521739130;
	m_vWeight[26] =  0.021086956521739130;
	m_vWeight[27] =  0.021086956521739130;
	m_vWeight[28] =  0.021086956521739130;
	m_vWeight[29] =  0.021086956521739130;
	m_vWeight[30] =  0.021086956521739130;
}

GaussQuadrature<ReferenceHexahedron, 8>::GaussQuadrature()
{
	m_vPoint[0][0] = 0.500000000000000000;
	m_vPoint[0][1] = 0.500000000000000000;
	m_vPoint[0][2] = 0.500000000000000000;

	m_vPoint[1][0] = 0.108769601782024205;
	m_vPoint[1][1] = 0.500000000000000000;
	m_vPoint[1][2] = 0.500000000000000000;

	m_vPoint[2][0] = 0.500000000000000000;
	m_vPoint[2][1] = 0.108769601782024205;
	m_vPoint[2][2] = 0.500000000000000000;

	m_vPoint[3][0] = 0.500000000000000000;
	m_vPoint[3][1] = 0.500000000000000000;
	m_vPoint[3][2] = 0.108769601782024205;

	m_vPoint[4][0] = 0.500000000000000000;
	m_vPoint[4][1] = 0.500000000000000000;
	m_vPoint[4][2] = 0.891230398217975795;

	m_vPoint[5][0] = 0.500000000000000000;
	m_vPoint[5][1] = 0.891230398217975795;
	m_vPoint[5][2] = 0.500000000000000000;

	m_vPoint[6][0] = 0.891230398217975795;
	m_vPoint[6][1] = 0.500000000000000000;
	m_vPoint[6][2] = 0.500000000000000000;

	m_vPoint[7][0] = 0.255952665146816760;
	m_vPoint[7][1] = 0.255952665146816760;
	m_vPoint[7][2] = 0.255952665146816760;

	m_vPoint[8][0] = 0.255952665146816760;
	m_vPoint[8][1] = 0.255952665146816760;
	m_vPoint[8][2] = 0.744047334853183240;

	m_vPoint[9][0] = 0.255952665146816760;
	m_vPoint[9][1] = 0.744047334853183240;
	m_vPoint[9][2] = 0.255952665146816760;

	m_vPoint[10][0] = 0.255952665146816760;
	m_vPoint[10][1] = 0.744047334853183240;
	m_vPoint[10][2] = 0.744047334853183240;

	m_vPoint[11][0] = 0.744047334853183240;
	m_vPoint[11][1] = 0.255952665146816760;
	m_vPoint[11][2] = 0.255952665146816760;

	m_vPoint[12][0] = 0.744047334853183240;
	m_vPoint[12][1] = 0.255952665146816760;
	m_vPoint[12][2] = 0.744047334853183240;

	m_vPoint[13][0] = 0.744047334853183240;
	m_vPoint[13][1] = 0.744047334853183240;
	m_vPoint[13][2] = 0.255952665146816760;

	m_vPoint[14][0] = 0.744047334853183240;
	m_vPoint[14][1] = 0.744047334853183240;
	m_vPoint[14][2] = 0.744047334853183240;

	m_vPoint[15][0] = 0.068890536169259406;
	m_vPoint[15][1] = 0.068890536169259406;
	m_vPoint[15][2] = 0.068890536169259406;

	m_vPoint[16][0] = 0.068890536169259406;
	m_vPoint[16][1] = 0.068890536169259406;
	m_vPoint[16][2] = 0.931109463830740594;

	m_vPoint[17][0] = 0.068890536169259406;
	m_vPoint[17][1] = 0.931109463830740594;
	m_vPoint[17][2] = 0.068890536169259406;

	m_vPoint[18][0] = 0.068890536169259406;
	m_vPoint[18][1] = 0.931109463830740594;
	m_vPoint[18][2] = 0.931109463830740594;

	m_vPoint[19][0] = 0.931109463830740594;
	m_vPoint[19][1] = 0.068890536169259406;
	m_vPoint[19][2] = 0.068890536169259406;

	m_vPoint[20][0] = 0.931109463830740594;
	m_vPoint[20][1] = 0.068890536169259406;
	m_vPoint[20][2] = 0.931109463830740594;

	m_vPoint[21][0] = 0.931109463830740594;
	m_vPoint[21][1] = 0.931109463830740594;
	m_vPoint[21][2] = 0.068890536169259406;

	m_vPoint[22][0] = 0.931109463830740594;
	m_vPoint[22][1] = 0.931109463830740594;
	m_vPoint[22][2] = 0.931109463830740594;

	m_vPoint[23][0] = 0.027901710853995902;
	m_vPoint[23][1] = 0.151212583146381502;
	m_vPoint[23][2] = 0.640556954704170928;

	m_vPoint[24][0] = 0.027901710853995902;
	m_vPoint[24][1] = 0.359443045295829072;
	m_vPoint[24][2] = 0.151212583146381502;

	m_vPoint[25][0] = 0.027901710853995902;
	m_vPoint[25][1] = 0.640556954704170928;
	m_vPoint[25][2] = 0.848787416853618498;

	m_vPoint[26][0] = 0.027901710853995902;
	m_vPoint[26][1] = 0.848787416853618498;
	m_vPoint[26][2] = 0.359443045295829072;

	m_vPoint[27][0] = 0.151212583146381502;
	m_vPoint[27][1] = 0.027901710853995902;
	m_vPoint[27][2] = 0.359443045295829072;

	m_vPoint[28][0] = 0.151212583146381502;
	m_vPoint[28][1] = 0.359443045295829072;
	m_vPoint[28][2] = 0.972098289146004098;

	m_vPoint[29][0] = 0.151212583146381502;
	m_vPoint[29][1] = 0.640556954704170928;
	m_vPoint[29][2] = 0.027901710853995902;

	m_vPoint[30][0] = 0.151212583146381502;
	m_vPoint[30][1] = 0.972098289146004098;
	m_vPoint[30][2] = 0.640556954704170928;

	m_vPoint[31][0] = 0.359443045295829072;
	m_vPoint[31][1] = 0.027901710853995902;
	m_vPoint[31][2] = 0.848787416853618498;

	m_vPoint[32][0] = 0.359443045295829072;
	m_vPoint[32][1] = 0.151212583146381502;
	m_vPoint[32][2] = 0.027901710853995902;

	m_vPoint[33][0] = 0.359443045295829072;
	m_vPoint[33][1] = 0.848787416853618498;
	m_vPoint[33][2] = 0.972098289146004098;

	m_vPoint[34][0] = 0.359443045295829072;
	m_vPoint[34][1] = 0.972098289146004098;
	m_vPoint[34][2] = 0.151212583146381502;

	m_vPoint[35][0] = 0.640556954704170928;
	m_vPoint[35][1] = 0.027901710853995902;
	m_vPoint[35][2] = 0.151212583146381502;

	m_vPoint[36][0] = 0.640556954704170928;
	m_vPoint[36][1] = 0.151212583146381502;
	m_vPoint[36][2] = 0.972098289146004098;

	m_vPoint[37][0] = 0.640556954704170928;
	m_vPoint[37][1] = 0.848787416853618498;
	m_vPoint[37][2] = 0.027901710853995902;

	m_vPoint[38][0] = 0.640556954704170928;
	m_vPoint[38][1] = 0.972098289146004098;
	m_vPoint[38][2] = 0.848787416853618498;

	m_vPoint[39][0] = 0.848787416853618498;
	m_vPoint[39][1] = 0.027901710853995902;
	m_vPoint[39][2] = 0.640556954704170928;

	m_vPoint[40][0] = 0.848787416853618498;
	m_vPoint[40][1] = 0.359443045295829072;
	m_vPoint[40][2] = 0.027901710853995902;

	m_vPoint[41][0] = 0.848787416853618498;
	m_vPoint[41][1] = 0.640556954704170928;
	m_vPoint[41][2] = 0.972098289146004098;

	m_vPoint[42][0] = 0.848787416853618498;
	m_vPoint[42][1] = 0.972098289146004098;
	m_vPoint[42][2] = 0.359443045295829072;

	m_vPoint[43][0] = 0.972098289146004098;
	m_vPoint[43][1] = 0.151212583146381502;
	m_vPoint[43][2] = 0.359443045295829072;

	m_vPoint[44][0] = 0.972098289146004098;
	m_vPoint[44][1] = 0.359443045295829072;
	m_vPoint[44][2] = 0.848787416853618498;

	m_vPoint[45][0] = 0.972098289146004098;
	m_vPoint[45][1] = 0.640556954704170928;
	m_vPoint[45][2] = 0.151212583146381502;

	m_vPoint[46][0] = 0.972098289146004098;
	m_vPoint[46][1] = 0.848787416853618498;
	m_vPoint[46][2] = 0.640556954704170928;

	m_vWeight[0] =  0.056487964359399961;
	m_vWeight[1] =  0.037422397169042365;
	m_vWeight[2] =  0.037422397169042365;
	m_vWeight[3] =  0.037422397169042365;
	m_vWeight[4] =  0.037422397169042365;
	m_vWeight[5] =  0.037422397169042365;
	m_vWeight[6] =  0.037422397169042365;
	m_vWeight[7] =  0.037609519921405002;
	m_vWeight[8] =  0.037609519921405002;
	m_vWeight[9] =  0.037609519921405002;
	m_vWeight[10] =  0.037609519921405002;
	m_vWeight[11] =  0.037609519921405002;
	m_vWeight[12] =  0.037609519921405002;
	m_vWeight[13] =  0.037609519921405002;
	m_vWeight[14] =  0.037609519921405002;
	m_vWeight[15] =  0.006185540698462977;
	m_vWeight[16] =  0.006185540698462977;
	m_vWeight[17] =  0.006185540698462977;
	m_vWeight[18] =  0.006185540698462977;
	m_vWeight[19] =  0.006185540698462977;
	m_vWeight[20] =  0.006185540698462977;
	m_vWeight[21] =  0.006185540698462977;
	m_vWeight[22] =  0.006185540698462977;
	m_vWeight[23] =  0.015359048652808417;
	m_vWeight[24] =  0.015359048652808417;
	m_vWeight[25] =  0.015359048652808417;
	m_vWeight[26] =  0.015359048652808417;
	m_vWeight[27] =  0.015359048652808417;
	m_vWeight[28] =  0.015359048652808417;
	m_vWeight[29] =  0.015359048652808417;
	m_vWeight[30] =  0.015359048652808417;
	m_vWeight[31] =  0.015359048652808417;
	m_vWeight[32] =  0.015359048652808417;
	m_vWeight[33] =  0.015359048652808417;
	m_vWeight[34] =  0.015359048652808417;
	m_vWeight[35] =  0.015359048652808417;
	m_vWeight[36] =  0.015359048652808417;
	m_vWeight[37] =  0.015359048652808417;
	m_vWeight[38] =  0.015359048652808417;
	m_vWeight[39] =  0.015359048652808417;
	m_vWeight[40] =  0.015359048652808417;
	m_vWeight[41] =  0.015359048652808417;
	m_vWeight[42] =  0.015359048652808417;
	m_vWeight[43] =  0.015359048652808417;
	m_vWeight[44] =  0.015359048652808417;
	m_vWeight[45] =  0.015359048652808417;
	m_vWeight[46] =  0.015359048652808417;
}

GaussQuadrature<ReferenceHexahedron, 9>::GaussQuadrature()
{
	m_vPoint[0][0] = 0.193159265204145503;
	m_vPoint[0][1] = 0.500000000000000000;
	m_vPoint[0][2] = 0.500000000000000000;

	m_vPoint[1][0] = 0.500000000000000000;
	m_vPoint[1][1] = 0.193159265204145503;
	m_vPoint[1][2] = 0.500000000000000000;

	m_vPoint[2][0] = 0.500000000000000000;
	m_vPoint[2][1] = 0.500000000000000000;
	m_vPoint[2][2] = 0.193159265204145503;

	m_vPoint[3][0] = 0.500000000000000000;
	m_vPoint[3][1] = 0.500000000000000000;
	m_vPoint[3][2] = 0.806840734795854497;

	m_vPoint[4][0] = 0.500000000000000000;
	m_vPoint[4][1] = 0.806840734795854497;
	m_vPoint[4][2] = 0.500000000000000000;

	m_vPoint[5][0] = 0.806840734795854497;
	m_vPoint[5][1] = 0.500000000000000000;
	m_vPoint[5][2] = 0.500000000000000000;

	m_vPoint[6][0] = 0.061156438371160857;
	m_vPoint[6][1] = 0.061156438371160857;
	m_vPoint[6][2] = 0.500000000000000000;

	m_vPoint[7][0] = 0.061156438371160857;
	m_vPoint[7][1] = 0.500000000000000000;
	m_vPoint[7][2] = 0.061156438371160857;

	m_vPoint[8][0] = 0.061156438371160857;
	m_vPoint[8][1] = 0.500000000000000000;
	m_vPoint[8][2] = 0.938843561628839143;

	m_vPoint[9][0] = 0.061156438371160857;
	m_vPoint[9][1] = 0.938843561628839143;
	m_vPoint[9][2] = 0.500000000000000000;

	m_vPoint[10][0] = 0.500000000000000000;
	m_vPoint[10][1] = 0.061156438371160857;
	m_vPoint[10][2] = 0.061156438371160857;

	m_vPoint[11][0] = 0.500000000000000000;
	m_vPoint[11][1] = 0.061156438371160857;
	m_vPoint[11][2] = 0.938843561628839143;

	m_vPoint[12][0] = 0.500000000000000000;
	m_vPoint[12][1] = 0.938843561628839143;
	m_vPoint[12][2] = 0.061156438371160857;

	m_vPoint[13][0] = 0.500000000000000000;
	m_vPoint[13][1] = 0.938843561628839143;
	m_vPoint[13][2] = 0.938843561628839143;

	m_vPoint[14][0] = 0.938843561628839143;
	m_vPoint[14][1] = 0.061156438371160857;
	m_vPoint[14][2] = 0.500000000000000000;

	m_vPoint[15][0] = 0.938843561628839143;
	m_vPoint[15][1] = 0.500000000000000000;
	m_vPoint[15][2] = 0.061156438371160857;

	m_vPoint[16][0] = 0.938843561628839143;
	m_vPoint[16][1] = 0.500000000000000000;
	m_vPoint[16][2] = 0.938843561628839143;

	m_vPoint[17][0] = 0.938843561628839143;
	m_vPoint[17][1] = 0.938843561628839143;
	m_vPoint[17][2] = 0.500000000000000000;

	m_vPoint[18][0] = 0.217944596489984973;
	m_vPoint[18][1] = 0.217944596489984973;
	m_vPoint[18][2] = 0.217944596489984973;

	m_vPoint[19][0] = 0.217944596489984973;
	m_vPoint[19][1] = 0.217944596489984973;
	m_vPoint[19][2] = 0.782055403510015027;

	m_vPoint[20][0] = 0.217944596489984973;
	m_vPoint[20][1] = 0.782055403510015027;
	m_vPoint[20][2] = 0.217944596489984973;

	m_vPoint[21][0] = 0.217944596489984973;
	m_vPoint[21][1] = 0.782055403510015027;
	m_vPoint[21][2] = 0.782055403510015027;

	m_vPoint[22][0] = 0.782055403510015027;
	m_vPoint[22][1] = 0.217944596489984973;
	m_vPoint[22][2] = 0.217944596489984973;

	m_vPoint[23][0] = 0.782055403510015027;
	m_vPoint[23][1] = 0.217944596489984973;
	m_vPoint[23][2] = 0.782055403510015027;

	m_vPoint[24][0] = 0.782055403510015027;
	m_vPoint[24][1] = 0.782055403510015027;
	m_vPoint[24][2] = 0.217944596489984973;

	m_vPoint[25][0] = 0.782055403510015027;
	m_vPoint[25][1] = 0.782055403510015027;
	m_vPoint[25][2] = 0.782055403510015027;

	m_vPoint[26][0] = 0.064950107669012041;
	m_vPoint[26][1] = 0.064950107669012041;
	m_vPoint[26][2] = 0.064950107669012041;

	m_vPoint[27][0] = 0.064950107669012041;
	m_vPoint[27][1] = 0.064950107669012041;
	m_vPoint[27][2] = 0.935049892330987959;

	m_vPoint[28][0] = 0.064950107669012041;
	m_vPoint[28][1] = 0.935049892330987959;
	m_vPoint[28][2] = 0.064950107669012041;

	m_vPoint[29][0] = 0.064950107669012041;
	m_vPoint[29][1] = 0.935049892330987959;
	m_vPoint[29][2] = 0.935049892330987959;

	m_vPoint[30][0] = 0.935049892330987959;
	m_vPoint[30][1] = 0.064950107669012041;
	m_vPoint[30][2] = 0.064950107669012041;

	m_vPoint[31][0] = 0.935049892330987959;
	m_vPoint[31][1] = 0.064950107669012041;
	m_vPoint[31][2] = 0.935049892330987959;

	m_vPoint[32][0] = 0.935049892330987959;
	m_vPoint[32][1] = 0.935049892330987959;
	m_vPoint[32][2] = 0.064950107669012041;

	m_vPoint[33][0] = 0.935049892330987959;
	m_vPoint[33][1] = 0.935049892330987959;
	m_vPoint[33][2] = 0.935049892330987959;

	m_vPoint[34][0] = 0.030734789067664127;
	m_vPoint[34][1] = 0.283866048684568918;
	m_vPoint[34][2] = 0.283866048684568918;

	m_vPoint[35][0] = 0.030734789067664127;
	m_vPoint[35][1] = 0.283866048684568918;
	m_vPoint[35][2] = 0.716133951315431082;

	m_vPoint[36][0] = 0.030734789067664127;
	m_vPoint[36][1] = 0.716133951315431082;
	m_vPoint[36][2] = 0.283866048684568918;

	m_vPoint[37][0] = 0.030734789067664127;
	m_vPoint[37][1] = 0.716133951315431082;
	m_vPoint[37][2] = 0.716133951315431082;

	m_vPoint[38][0] = 0.283866048684568918;
	m_vPoint[38][1] = 0.030734789067664127;
	m_vPoint[38][2] = 0.283866048684568918;

	m_vPoint[39][0] = 0.283866048684568918;
	m_vPoint[39][1] = 0.030734789067664127;
	m_vPoint[39][2] = 0.716133951315431082;

	m_vPoint[40][0] = 0.283866048684568918;
	m_vPoint[40][1] = 0.283866048684568918;
	m_vPoint[40][2] = 0.030734789067664127;

	m_vPoint[41][0] = 0.283866048684568918;
	m_vPoint[41][1] = 0.283866048684568918;
	m_vPoint[41][2] = 0.969265210932335873;

	m_vPoint[42][0] = 0.283866048684568918;
	m_vPoint[42][1] = 0.716133951315431082;
	m_vPoint[42][2] = 0.030734789067664127;

	m_vPoint[43][0] = 0.283866048684568918;
	m_vPoint[43][1] = 0.716133951315431082;
	m_vPoint[43][2] = 0.969265210932335873;

	m_vPoint[44][0] = 0.283866048684568918;
	m_vPoint[44][1] = 0.969265210932335873;
	m_vPoint[44][2] = 0.283866048684568918;

	m_vPoint[45][0] = 0.283866048684568918;
	m_vPoint[45][1] = 0.969265210932335873;
	m_vPoint[45][2] = 0.716133951315431082;

	m_vPoint[46][0] = 0.716133951315431082;
	m_vPoint[46][1] = 0.030734789067664127;
	m_vPoint[46][2] = 0.283866048684568918;

	m_vPoint[47][0] = 0.716133951315431082;
	m_vPoint[47][1] = 0.030734789067664127;
	m_vPoint[47][2] = 0.716133951315431082;

	m_vPoint[48][0] = 0.716133951315431082;
	m_vPoint[48][1] = 0.283866048684568918;
	m_vPoint[48][2] = 0.030734789067664127;

	m_vPoint[49][0] = 0.716133951315431082;
	m_vPoint[49][1] = 0.283866048684568918;
	m_vPoint[49][2] = 0.969265210932335873;

	m_vPoint[50][0] = 0.716133951315431082;
	m_vPoint[50][1] = 0.716133951315431082;
	m_vPoint[50][2] = 0.030734789067664127;

	m_vPoint[51][0] = 0.716133951315431082;
	m_vPoint[51][1] = 0.716133951315431082;
	m_vPoint[51][2] = 0.969265210932335873;

	m_vPoint[52][0] = 0.716133951315431082;
	m_vPoint[52][1] = 0.969265210932335873;
	m_vPoint[52][2] = 0.283866048684568918;

	m_vPoint[53][0] = 0.716133951315431082;
	m_vPoint[53][1] = 0.969265210932335873;
	m_vPoint[53][2] = 0.716133951315431082;

	m_vPoint[54][0] = 0.969265210932335873;
	m_vPoint[54][1] = 0.283866048684568918;
	m_vPoint[54][2] = 0.283866048684568918;

	m_vPoint[55][0] = 0.969265210932335873;
	m_vPoint[55][1] = 0.283866048684568918;
	m_vPoint[55][2] = 0.716133951315431082;

	m_vPoint[56][0] = 0.969265210932335873;
	m_vPoint[56][1] = 0.716133951315431082;
	m_vPoint[56][2] = 0.283866048684568918;

	m_vPoint[57][0] = 0.969265210932335873;
	m_vPoint[57][1] = 0.716133951315431082;
	m_vPoint[57][2] = 0.716133951315431082;

	m_vWeight[0] =  0.054159374468706818;
	m_vWeight[1] =  0.054159374468706818;
	m_vWeight[2] =  0.054159374468706818;
	m_vWeight[3] =  0.054159374468706818;
	m_vWeight[4] =  0.054159374468706818;
	m_vWeight[5] =  0.054159374468706818;
	m_vWeight[6] =  0.011473725767022205;
	m_vWeight[7] =  0.011473725767022205;
	m_vWeight[8] =  0.011473725767022205;
	m_vWeight[9] =  0.011473725767022205;
	m_vWeight[10] =  0.011473725767022205;
	m_vWeight[11] =  0.011473725767022205;
	m_vWeight[12] =  0.011473725767022205;
	m_vWeight[13] =  0.011473725767022205;
	m_vWeight[14] =  0.011473725767022205;
	m_vWeight[15] =  0.011473725767022205;
	m_vWeight[16] =  0.011473725767022205;
	m_vWeight[17] =  0.011473725767022205;
	m_vWeight[18] =  0.024857479768002938;
	m_vWeight[19] =  0.024857479768002938;
	m_vWeight[20] =  0.024857479768002938;
	m_vWeight[21] =  0.024857479768002938;
	m_vWeight[22] =  0.024857479768002938;
	m_vWeight[23] =  0.024857479768002938;
	m_vWeight[24] =  0.024857479768002938;
	m_vWeight[25] =  0.024857479768002938;
	m_vWeight[26] =  0.006268599412418629;
	m_vWeight[27] =  0.006268599412418629;
	m_vWeight[28] =  0.006268599412418629;
	m_vWeight[29] =  0.006268599412418629;
	m_vWeight[30] =  0.006268599412418629;
	m_vWeight[31] =  0.006268599412418629;
	m_vWeight[32] =  0.006268599412418629;
	m_vWeight[33] =  0.006268599412418629;
	m_vWeight[34] =  0.012014600439171671;
	m_vWeight[35] =  0.012014600439171671;
	m_vWeight[36] =  0.012014600439171671;
	m_vWeight[37] =  0.012014600439171671;
	m_vWeight[38] =  0.012014600439171671;
	m_vWeight[39] =  0.012014600439171671;
	m_vWeight[40] =  0.012014600439171671;
	m_vWeight[41] =  0.012014600439171671;
	m_vWeight[42] =  0.012014600439171671;
	m_vWeight[43] =  0.012014600439171671;
	m_vWeight[44] =  0.012014600439171671;
	m_vWeight[45] =  0.012014600439171671;
	m_vWeight[46] =  0.012014600439171671;
	m_vWeight[47] =  0.012014600439171671;
	m_vWeight[48] =  0.012014600439171671;
	m_vWeight[49] =  0.012014600439171671;
	m_vWeight[50] =  0.012014600439171671;
	m_vWeight[51] =  0.012014600439171671;
	m_vWeight[52] =  0.012014600439171671;
	m_vWeight[53] =  0.012014600439171671;
	m_vWeight[54] =  0.012014600439171671;
	m_vWeight[55] =  0.012014600439171671;
	m_vWeight[56] =  0.012014600439171671;
	m_vWeight[57] =  0.012014600439171671;
}

GaussQuadrature<ReferenceHexahedron, 11>::GaussQuadrature()
{
	m_vPoint[0][0] = 0.093692832950186752;
	m_vPoint[0][1] = 0.500000000000000000;
	m_vPoint[0][2] = 0.500000000000000000;

	m_vPoint[1][0] = 0.500000000000000000;
	m_vPoint[1][1] = 0.093692832950186752;
	m_vPoint[1][2] = 0.500000000000000000;

	m_vPoint[2][0] = 0.500000000000000000;
	m_vPoint[2][1] = 0.500000000000000000;
	m_vPoint[2][2] = 0.093692832950186752;

	m_vPoint[3][0] = 0.500000000000000000;
	m_vPoint[3][1] = 0.500000000000000000;
	m_vPoint[3][2] = 0.906307167049813248;

	m_vPoint[4][0] = 0.500000000000000000;
	m_vPoint[4][1] = 0.906307167049813248;
	m_vPoint[4][2] = 0.500000000000000000;

	m_vPoint[5][0] = 0.906307167049813248;
	m_vPoint[5][1] = 0.500000000000000000;
	m_vPoint[5][2] = 0.500000000000000000;

	m_vPoint[6][0] = 0.132665856501495991;
	m_vPoint[6][1] = 0.132665856501495991;
	m_vPoint[6][2] = 0.500000000000000000;

	m_vPoint[7][0] = 0.132665856501495991;
	m_vPoint[7][1] = 0.500000000000000000;
	m_vPoint[7][2] = 0.132665856501495991;

	m_vPoint[8][0] = 0.132665856501495991;
	m_vPoint[8][1] = 0.500000000000000000;
	m_vPoint[8][2] = 0.867334143498504009;

	m_vPoint[9][0] = 0.132665856501495991;
	m_vPoint[9][1] = 0.867334143498504009;
	m_vPoint[9][2] = 0.500000000000000000;

	m_vPoint[10][0] = 0.500000000000000000;
	m_vPoint[10][1] = 0.132665856501495991;
	m_vPoint[10][2] = 0.132665856501495991;

	m_vPoint[11][0] = 0.500000000000000000;
	m_vPoint[11][1] = 0.132665856501495991;
	m_vPoint[11][2] = 0.867334143498504009;

	m_vPoint[12][0] = 0.500000000000000000;
	m_vPoint[12][1] = 0.867334143498504009;
	m_vPoint[12][2] = 0.132665856501495991;

	m_vPoint[13][0] = 0.500000000000000000;
	m_vPoint[13][1] = 0.867334143498504009;
	m_vPoint[13][2] = 0.867334143498504009;

	m_vPoint[14][0] = 0.867334143498504009;
	m_vPoint[14][1] = 0.132665856501495991;
	m_vPoint[14][2] = 0.500000000000000000;

	m_vPoint[15][0] = 0.867334143498504009;
	m_vPoint[15][1] = 0.500000000000000000;
	m_vPoint[15][2] = 0.132665856501495991;

	m_vPoint[16][0] = 0.867334143498504009;
	m_vPoint[16][1] = 0.500000000000000000;
	m_vPoint[16][2] = 0.867334143498504009;

	m_vPoint[17][0] = 0.867334143498504009;
	m_vPoint[17][1] = 0.867334143498504009;
	m_vPoint[17][2] = 0.500000000000000000;

	m_vPoint[18][0] = 0.343303297741972639;
	m_vPoint[18][1] = 0.343303297741972639;
	m_vPoint[18][2] = 0.343303297741972639;

	m_vPoint[19][0] = 0.343303297741972639;
	m_vPoint[19][1] = 0.343303297741972639;
	m_vPoint[19][2] = 0.656696702258027361;

	m_vPoint[20][0] = 0.343303297741972639;
	m_vPoint[20][1] = 0.656696702258027361;
	m_vPoint[20][2] = 0.343303297741972639;

	m_vPoint[21][0] = 0.343303297741972639;
	m_vPoint[21][1] = 0.656696702258027361;
	m_vPoint[21][2] = 0.656696702258027361;

	m_vPoint[22][0] = 0.656696702258027361;
	m_vPoint[22][1] = 0.343303297741972639;
	m_vPoint[22][2] = 0.343303297741972639;

	m_vPoint[23][0] = 0.656696702258027361;
	m_vPoint[23][1] = 0.343303297741972639;
	m_vPoint[23][2] = 0.656696702258027361;

	m_vPoint[24][0] = 0.656696702258027361;
	m_vPoint[24][1] = 0.656696702258027361;
	m_vPoint[24][2] = 0.343303297741972639;

	m_vPoint[25][0] = 0.656696702258027361;
	m_vPoint[25][1] = 0.656696702258027361;
	m_vPoint[25][2] = 0.656696702258027361;

	m_vPoint[26][0] = 0.199162367900868649;
	m_vPoint[26][1] = 0.199162367900868649;
	m_vPoint[26][2] = 0.199162367900868649;

	m_vPoint[27][0] = 0.199162367900868649;
	m_vPoint[27][1] = 0.199162367900868649;
	m_vPoint[27][2] = 0.800837632099131351;

	m_vPoint[28][0] = 0.199162367900868649;
	m_vPoint[28][1] = 0.800837632099131351;
	m_vPoint[28][2] = 0.199162367900868649;

	m_vPoint[29][0] = 0.199162367900868649;
	m_vPoint[29][1] = 0.800837632099131351;
	m_vPoint[29][2] = 0.800837632099131351;

	m_vPoint[30][0] = 0.800837632099131351;
	m_vPoint[30][1] = 0.199162367900868649;
	m_vPoint[30][2] = 0.199162367900868649;

	m_vPoint[31][0] = 0.800837632099131351;
	m_vPoint[31][1] = 0.199162367900868649;
	m_vPoint[31][2] = 0.800837632099131351;

	m_vPoint[32][0] = 0.800837632099131351;
	m_vPoint[32][1] = 0.800837632099131351;
	m_vPoint[32][2] = 0.199162367900868649;

	m_vPoint[33][0] = 0.800837632099131351;
	m_vPoint[33][1] = 0.800837632099131351;
	m_vPoint[33][2] = 0.800837632099131351;

	m_vPoint[34][0] = 0.072272119491120008;
	m_vPoint[34][1] = 0.072272119491120008;
	m_vPoint[34][2] = 0.072272119491120008;

	m_vPoint[35][0] = 0.072272119491120008;
	m_vPoint[35][1] = 0.072272119491120008;
	m_vPoint[35][2] = 0.927727880508879992;

	m_vPoint[36][0] = 0.072272119491120008;
	m_vPoint[36][1] = 0.927727880508879992;
	m_vPoint[36][2] = 0.072272119491120008;

	m_vPoint[37][0] = 0.072272119491120008;
	m_vPoint[37][1] = 0.927727880508879992;
	m_vPoint[37][2] = 0.927727880508879992;

	m_vPoint[38][0] = 0.927727880508879992;
	m_vPoint[38][1] = 0.072272119491120008;
	m_vPoint[38][2] = 0.072272119491120008;

	m_vPoint[39][0] = 0.927727880508879992;
	m_vPoint[39][1] = 0.072272119491120008;
	m_vPoint[39][2] = 0.927727880508879992;

	m_vPoint[40][0] = 0.927727880508879992;
	m_vPoint[40][1] = 0.927727880508879992;
	m_vPoint[40][2] = 0.072272119491120008;

	m_vPoint[41][0] = 0.927727880508879992;
	m_vPoint[41][1] = 0.927727880508879992;
	m_vPoint[41][2] = 0.927727880508879992;

	m_vPoint[42][0] = 0.029377571394698368;
	m_vPoint[42][1] = 0.029377571394698368;
	m_vPoint[42][2] = 0.323048592701684933;

	m_vPoint[43][0] = 0.029377571394698368;
	m_vPoint[43][1] = 0.029377571394698368;
	m_vPoint[43][2] = 0.676951407298315067;

	m_vPoint[44][0] = 0.029377571394698368;
	m_vPoint[44][1] = 0.323048592701684933;
	m_vPoint[44][2] = 0.029377571394698368;

	m_vPoint[45][0] = 0.029377571394698368;
	m_vPoint[45][1] = 0.323048592701684933;
	m_vPoint[45][2] = 0.970622428605301632;

	m_vPoint[46][0] = 0.029377571394698368;
	m_vPoint[46][1] = 0.676951407298315067;
	m_vPoint[46][2] = 0.029377571394698368;

	m_vPoint[47][0] = 0.029377571394698368;
	m_vPoint[47][1] = 0.676951407298315067;
	m_vPoint[47][2] = 0.970622428605301632;

	m_vPoint[48][0] = 0.029377571394698368;
	m_vPoint[48][1] = 0.970622428605301632;
	m_vPoint[48][2] = 0.323048592701684933;

	m_vPoint[49][0] = 0.029377571394698368;
	m_vPoint[49][1] = 0.970622428605301632;
	m_vPoint[49][2] = 0.676951407298315067;

	m_vPoint[50][0] = 0.323048592701684933;
	m_vPoint[50][1] = 0.029377571394698368;
	m_vPoint[50][2] = 0.029377571394698368;

	m_vPoint[51][0] = 0.323048592701684933;
	m_vPoint[51][1] = 0.029377571394698368;
	m_vPoint[51][2] = 0.970622428605301632;

	m_vPoint[52][0] = 0.323048592701684933;
	m_vPoint[52][1] = 0.970622428605301632;
	m_vPoint[52][2] = 0.029377571394698368;

	m_vPoint[53][0] = 0.323048592701684933;
	m_vPoint[53][1] = 0.970622428605301632;
	m_vPoint[53][2] = 0.970622428605301632;

	m_vPoint[54][0] = 0.676951407298315067;
	m_vPoint[54][1] = 0.029377571394698368;
	m_vPoint[54][2] = 0.029377571394698368;

	m_vPoint[55][0] = 0.676951407298315067;
	m_vPoint[55][1] = 0.029377571394698368;
	m_vPoint[55][2] = 0.970622428605301632;

	m_vPoint[56][0] = 0.676951407298315067;
	m_vPoint[56][1] = 0.970622428605301632;
	m_vPoint[56][2] = 0.029377571394698368;

	m_vPoint[57][0] = 0.676951407298315067;
	m_vPoint[57][1] = 0.970622428605301632;
	m_vPoint[57][2] = 0.970622428605301632;

	m_vPoint[58][0] = 0.970622428605301632;
	m_vPoint[58][1] = 0.029377571394698368;
	m_vPoint[58][2] = 0.323048592701684933;

	m_vPoint[59][0] = 0.970622428605301632;
	m_vPoint[59][1] = 0.029377571394698368;
	m_vPoint[59][2] = 0.676951407298315067;

	m_vPoint[60][0] = 0.970622428605301632;
	m_vPoint[60][1] = 0.323048592701684933;
	m_vPoint[60][2] = 0.029377571394698368;

	m_vPoint[61][0] = 0.970622428605301632;
	m_vPoint[61][1] = 0.323048592701684933;
	m_vPoint[61][2] = 0.970622428605301632;

	m_vPoint[62][0] = 0.970622428605301632;
	m_vPoint[62][1] = 0.676951407298315067;
	m_vPoint[62][2] = 0.029377571394698368;

	m_vPoint[63][0] = 0.970622428605301632;
	m_vPoint[63][1] = 0.676951407298315067;
	m_vPoint[63][2] = 0.970622428605301632;

	m_vPoint[64][0] = 0.970622428605301632;
	m_vPoint[64][1] = 0.970622428605301632;
	m_vPoint[64][2] = 0.323048592701684933;

	m_vPoint[65][0] = 0.970622428605301632;
	m_vPoint[65][1] = 0.970622428605301632;
	m_vPoint[65][2] = 0.676951407298315067;

	m_vPoint[66][0] = 0.017450167243644869;
	m_vPoint[66][1] = 0.274600032442745285;
	m_vPoint[66][2] = 0.274600032442745285;

	m_vPoint[67][0] = 0.017450167243644869;
	m_vPoint[67][1] = 0.274600032442745285;
	m_vPoint[67][2] = 0.725399967557254715;

	m_vPoint[68][0] = 0.017450167243644869;
	m_vPoint[68][1] = 0.725399967557254715;
	m_vPoint[68][2] = 0.274600032442745285;

	m_vPoint[69][0] = 0.017450167243644869;
	m_vPoint[69][1] = 0.725399967557254715;
	m_vPoint[69][2] = 0.725399967557254715;

	m_vPoint[70][0] = 0.274600032442745285;
	m_vPoint[70][1] = 0.017450167243644869;
	m_vPoint[70][2] = 0.274600032442745285;

	m_vPoint[71][0] = 0.274600032442745285;
	m_vPoint[71][1] = 0.017450167243644869;
	m_vPoint[71][2] = 0.725399967557254715;

	m_vPoint[72][0] = 0.274600032442745285;
	m_vPoint[72][1] = 0.274600032442745285;
	m_vPoint[72][2] = 0.017450167243644869;

	m_vPoint[73][0] = 0.274600032442745285;
	m_vPoint[73][1] = 0.274600032442745285;
	m_vPoint[73][2] = 0.982549832756355131;

	m_vPoint[74][0] = 0.274600032442745285;
	m_vPoint[74][1] = 0.725399967557254715;
	m_vPoint[74][2] = 0.017450167243644869;

	m_vPoint[75][0] = 0.274600032442745285;
	m_vPoint[75][1] = 0.725399967557254715;
	m_vPoint[75][2] = 0.982549832756355131;

	m_vPoint[76][0] = 0.274600032442745285;
	m_vPoint[76][1] = 0.982549832756355131;
	m_vPoint[76][2] = 0.274600032442745285;

	m_vPoint[77][0] = 0.274600032442745285;
	m_vPoint[77][1] = 0.982549832756355131;
	m_vPoint[77][2] = 0.725399967557254715;

	m_vPoint[78][0] = 0.725399967557254715;
	m_vPoint[78][1] = 0.017450167243644869;
	m_vPoint[78][2] = 0.274600032442745285;

	m_vPoint[79][0] = 0.725399967557254715;
	m_vPoint[79][1] = 0.017450167243644869;
	m_vPoint[79][2] = 0.725399967557254715;

	m_vPoint[80][0] = 0.725399967557254715;
	m_vPoint[80][1] = 0.274600032442745285;
	m_vPoint[80][2] = 0.017450167243644869;

	m_vPoint[81][0] = 0.725399967557254715;
	m_vPoint[81][1] = 0.274600032442745285;
	m_vPoint[81][2] = 0.982549832756355131;

	m_vPoint[82][0] = 0.725399967557254715;
	m_vPoint[82][1] = 0.725399967557254715;
	m_vPoint[82][2] = 0.017450167243644869;

	m_vPoint[83][0] = 0.725399967557254715;
	m_vPoint[83][1] = 0.725399967557254715;
	m_vPoint[83][2] = 0.982549832756355131;

	m_vPoint[84][0] = 0.725399967557254715;
	m_vPoint[84][1] = 0.982549832756355131;
	m_vPoint[84][2] = 0.274600032442745285;

	m_vPoint[85][0] = 0.725399967557254715;
	m_vPoint[85][1] = 0.982549832756355131;
	m_vPoint[85][2] = 0.725399967557254715;

	m_vPoint[86][0] = 0.982549832756355131;
	m_vPoint[86][1] = 0.274600032442745285;
	m_vPoint[86][2] = 0.274600032442745285;

	m_vPoint[87][0] = 0.982549832756355131;
	m_vPoint[87][1] = 0.274600032442745285;
	m_vPoint[87][2] = 0.725399967557254715;

	m_vPoint[88][0] = 0.982549832756355131;
	m_vPoint[88][1] = 0.725399967557254715;
	m_vPoint[88][2] = 0.274600032442745285;

	m_vPoint[89][0] = 0.982549832756355131;
	m_vPoint[89][1] = 0.725399967557254715;
	m_vPoint[89][2] = 0.725399967557254715;

	m_vWeight[0] =  0.025309634201600024;
	m_vWeight[1] =  0.025309634201600024;
	m_vWeight[2] =  0.025309634201600024;
	m_vWeight[3] =  0.025309634201600024;
	m_vWeight[4] =  0.025309634201600024;
	m_vWeight[5] =  0.025309634201600024;
	m_vWeight[6] =  0.018149918232514462;
	m_vWeight[7] =  0.018149918232514462;
	m_vWeight[8] =  0.018149918232514462;
	m_vWeight[9] =  0.018149918232514462;
	m_vWeight[10] =  0.018149918232514462;
	m_vWeight[11] =  0.018149918232514462;
	m_vWeight[12] =  0.018149918232514462;
	m_vWeight[13] =  0.018149918232514462;
	m_vWeight[14] =  0.018149918232514462;
	m_vWeight[15] =  0.018149918232514462;
	m_vWeight[16] =  0.018149918232514462;
	m_vWeight[17] =  0.018149918232514462;
	m_vWeight[18] =  0.026999005656871141;
	m_vWeight[19] =  0.026999005656871141;
	m_vWeight[20] =  0.026999005656871141;
	m_vWeight[21] =  0.026999005656871141;
	m_vWeight[22] =  0.026999005656871141;
	m_vWeight[23] =  0.026999005656871141;
	m_vWeight[24] =  0.026999005656871141;
	m_vWeight[25] =  0.026999005656871141;
	m_vWeight[26] =  0.014692293494557035;
	m_vWeight[27] =  0.014692293494557035;
	m_vWeight[28] =  0.014692293494557035;
	m_vWeight[29] =  0.014692293494557035;
	m_vWeight[30] =  0.014692293494557035;
	m_vWeight[31] =  0.014692293494557035;
	m_vWeight[32] =  0.014692293494557035;
	m_vWeight[33] =  0.014692293494557035;
	m_vWeight[34] =  0.005580489009853655;
	m_vWeight[35] =  0.005580489009853655;
	m_vWeight[36] =  0.005580489009853655;
	m_vWeight[37] =  0.005580489009853655;
	m_vWeight[38] =  0.005580489009853655;
	m_vWeight[39] =  0.005580489009853655;
	m_vWeight[40] =  0.005580489009853655;
	m_vWeight[41] =  0.005580489009853655;
	m_vWeight[42] =  0.002826787017352736;
	m_vWeight[43] =  0.002826787017352736;
	m_vWeight[44] =  0.002826787017352736;
	m_vWeight[45] =  0.002826787017352736;
	m_vWeight[46] =  0.002826787017352736;
	m_vWeight[47] =  0.002826787017352736;
	m_vWeight[48] =  0.002826787017352736;
	m_vWeight[49] =  0.002826787017352736;
	m_vWeight[50] =  0.002826787017352736;
	m_vWeight[51] =  0.002826787017352736;
	m_vWeight[52] =  0.002826787017352736;
	m_vWeight[53] =  0.002826787017352736;
	m_vWeight[54] =  0.002826787017352736;
	m_vWeight[55] =  0.002826787017352736;
	m_vWeight[56] =  0.002826787017352736;
	m_vWeight[57] =  0.002826787017352736;
	m_vWeight[58] =  0.002826787017352736;
	m_vWeight[59] =  0.002826787017352736;
	m_vWeight[60] =  0.002826787017352736;
	m_vWeight[61] =  0.002826787017352736;
	m_vWeight[62] =  0.002826787017352736;
	m_vWeight[63] =  0.002826787017352736;
	m_vWeight[64] =  0.002826787017352736;
	m_vWeight[65] =  0.002826787017352736;
	m_vWeight[66] =  0.007680249262229417;
	m_vWeight[67] =  0.007680249262229417;
	m_vWeight[68] =  0.007680249262229417;
	m_vWeight[69] =  0.007680249262229417;
	m_vWeight[70] =  0.007680249262229417;
	m_vWeight[71] =  0.007680249262229417;
	m_vWeight[72] =  0.007680249262229417;
	m_vWeight[73] =  0.007680249262229417;
	m_vWeight[74] =  0.007680249262229417;
	m_vWeight[75] =  0.007680249262229417;
	m_vWeight[76] =  0.007680249262229417;
	m_vWeight[77] =  0.007680249262229417;
	m_vWeight[78] =  0.007680249262229417;
	m_vWeight[79] =  0.007680249262229417;
	m_vWeight[80] =  0.007680249262229417;
	m_vWeight[81] =  0.007680249262229417;
	m_vWeight[82] =  0.007680249262229417;
	m_vWeight[83] =  0.007680249262229417;
	m_vWeight[84] =  0.007680249262229417;
	m_vWeight[85] =  0.007680249262229417;
	m_vWeight[86] =  0.007680249262229417;
	m_vWeight[87] =  0.007680249262229417;
	m_vWeight[88] =  0.007680249262229417;
	m_vWeight[89] =  0.007680249262229417;
}




template <>
FlexGaussQuadrature<ReferenceHexahedron>::FlexGaussQuadrature(int order)
{
	switch(order)
	{
	case 2:
		const static GaussQuadrature<ReferenceHexahedron, 2>& q2 
			= QuadRuleProvider::get<GaussQuadrature<ReferenceHexahedron, 2> >();

		m_order = q2.order();
		m_numPoints = q2.size();
		m_pvPoint = q2.points();
		m_pvWeight = q2.weights();
		break;

	case 3:
		const static GaussQuadrature<ReferenceHexahedron, 3>& q3 
			= QuadRuleProvider::get<GaussQuadrature<ReferenceHexahedron, 3> >();

		m_order = q3.order();
		m_numPoints = q3.size();
		m_pvPoint = q3.points();
		m_pvWeight = q3.weights();
		break;

	case 5:
		const static GaussQuadrature<ReferenceHexahedron, 5>& q5 
			= QuadRuleProvider::get<GaussQuadrature<ReferenceHexahedron, 5> >();

		m_order = q5.order();
		m_numPoints = q5.size();
		m_pvPoint = q5.points();
		m_pvWeight = q5.weights();
		break;

	case 7:
		const static GaussQuadrature<ReferenceHexahedron, 7>& q7 
			= QuadRuleProvider::get<GaussQuadrature<ReferenceHexahedron, 7> >();

		m_order = q7.order();
		m_numPoints = q7.size();
		m_pvPoint = q7.points();
		m_pvWeight = q7.weights();
		break;

	case 8:
		const static GaussQuadrature<ReferenceHexahedron, 8>& q8 
			= QuadRuleProvider::get<GaussQuadrature<ReferenceHexahedron, 8> >();

		m_order = q8.order();
		m_numPoints = q8.size();
		m_pvPoint = q8.points();
		m_pvWeight = q8.weights();
		break;

	case 9:
		const static GaussQuadrature<ReferenceHexahedron, 9>& q9 
			= QuadRuleProvider::get<GaussQuadrature<ReferenceHexahedron, 9> >();

		m_order = q9.order();
		m_numPoints = q9.size();
		m_pvPoint = q9.points();
		m_pvWeight = q9.weights();
		break;

	case 11:
		const static GaussQuadrature<ReferenceHexahedron, 11>& q11 
			= QuadRuleProvider::get<GaussQuadrature<ReferenceHexahedron, 11> >();

		m_order = q11.order();
		m_numPoints = q11.size();
		m_pvPoint = q11.points();
		m_pvWeight = q11.weights();
		break;

	default: UG_ASSERT(0, "Order not availabile. Can not construct GaussQuadrature.\n");
	}
}



// register rules
template <>
bool RegisterQuadratureRule(QuadratureRuleProvider<ReferenceHexahedron>& factory)
{
	static FlexGaussQuadrature<ReferenceHexahedron> gaussQuadratureReferenceHexahedron_2(2);
	static FlexGaussQuadrature<ReferenceHexahedron> gaussQuadratureReferenceHexahedron_3(3);
	static FlexGaussQuadrature<ReferenceHexahedron> gaussQuadratureReferenceHexahedron_5(5);
	static FlexGaussQuadrature<ReferenceHexahedron> gaussQuadratureReferenceHexahedron_7(7);
	static FlexGaussQuadrature<ReferenceHexahedron> gaussQuadratureReferenceHexahedron_8(8);
	static FlexGaussQuadrature<ReferenceHexahedron> gaussQuadratureReferenceHexahedron_9(9);
	static FlexGaussQuadrature<ReferenceHexahedron> gaussQuadratureReferenceHexahedron_11(11);

	bool success = true;
	success &= factory.register_rule(gaussQuadratureReferenceHexahedron_2);
	success &= factory.register_rule(gaussQuadratureReferenceHexahedron_3);
	success &= factory.register_rule(gaussQuadratureReferenceHexahedron_5);
	success &= factory.register_rule(gaussQuadratureReferenceHexahedron_7);
	success &= factory.register_rule(gaussQuadratureReferenceHexahedron_8);
	success &= factory.register_rule(gaussQuadratureReferenceHexahedron_9);
	success &= factory.register_rule(gaussQuadratureReferenceHexahedron_11);

	return success;
};

}; // namespace ug

