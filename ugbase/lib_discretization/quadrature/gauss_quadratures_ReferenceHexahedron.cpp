//This file is parsed from UG 3.9.


#include "quadrature.h"

namespace ug{

template <>
GaussQuadrature<ReferenceHexahedron>::GaussQuadrature(int order)
{
	switch(order)
	{
	case 2:
		m_order = 2;
		m_num_points = 8;

		if(allocate_memory(m_num_points) != true)
		{
			assert(0 && "Error while constructing Quadrature Rule.");
		}

		m_points[0][0] = 0.211324865405187000;
		m_points[0][1] = 0.211324865405187000;
		m_points[0][2] = 0.211324865405187000;
		m_points[1][0] = 0.788675134594813000;
		m_points[1][1] = 0.211324865405187000;
		m_points[1][2] = 0.211324865405187000;
		m_points[2][0] = 0.211324865405187000;
		m_points[2][1] = 0.788675134594813000;
		m_points[2][2] = 0.211324865405187000;
		m_points[3][0] = 0.788675134594813000;
		m_points[3][1] = 0.788675134594813000;
		m_points[3][2] = 0.211324865405187000;
		m_points[4][0] = 0.211324865405187000;
		m_points[4][1] = 0.211324865405187000;
		m_points[4][2] = 0.788675134594813000;
		m_points[5][0] = 0.788675134594813000;
		m_points[5][1] = 0.211324865405187000;
		m_points[5][2] = 0.788675134594813000;
		m_points[6][0] = 0.211324865405187000;
		m_points[6][1] = 0.788675134594813000;
		m_points[6][2] = 0.788675134594813000;
		m_points[7][0] = 0.788675134594813000;
		m_points[7][1] = 0.788675134594813000;
		m_points[7][2] = 0.788675134594813000;

		m_weights[0] =  0.125000000000000000;
		m_weights[1] =  0.125000000000000000;
		m_weights[2] =  0.125000000000000000;
		m_weights[3] =  0.125000000000000000;
		m_weights[4] =  0.125000000000000000;
		m_weights[5] =  0.125000000000000000;
		m_weights[6] =  0.125000000000000000;
		m_weights[7] =  0.125000000000000000;
		break;

	case 3:
		m_order = 3;
		m_num_points = 6;

		if(allocate_memory(m_num_points) != true)
		{
			assert(0 && "Error while constructing Quadrature Rule.");
		}

		m_points[0][0] = 0.000000000000000000;
		m_points[0][1] = 0.500000000000000000;
		m_points[0][2] = 0.500000000000000000;
		m_points[1][0] = 0.500000000000000000;
		m_points[1][1] = 0.000000000000000000;
		m_points[1][2] = 0.500000000000000000;
		m_points[2][0] = 0.500000000000000000;
		m_points[2][1] = 0.500000000000000000;
		m_points[2][2] = 0.000000000000000000;
		m_points[3][0] = 0.500000000000000000;
		m_points[3][1] = 0.500000000000000000;
		m_points[3][2] = 1.000000000000000000;
		m_points[4][0] = 0.500000000000000000;
		m_points[4][1] = 1.000000000000000000;
		m_points[4][2] = 0.500000000000000000;
		m_points[5][0] = 1.000000000000000000;
		m_points[5][1] = 0.500000000000000000;
		m_points[5][2] = 0.500000000000000000;

		m_weights[0] =  0.166666666666666667;
		m_weights[1] =  0.166666666666666667;
		m_weights[2] =  0.166666666666666667;
		m_weights[3] =  0.166666666666666667;
		m_weights[4] =  0.166666666666666667;
		m_weights[5] =  0.166666666666666667;
		break;

	case 5:
		m_order = 5;
		m_num_points = 14;

		if(allocate_memory(m_num_points) != true)
		{
			assert(0 && "Error while constructing Quadrature Rule.");
		}

		m_points[0][0] = 0.102088787122889268;
		m_points[0][1] = 0.500000000000000000;
		m_points[0][2] = 0.500000000000000000;
		m_points[1][0] = 0.500000000000000000;
		m_points[1][1] = 0.102088787122889268;
		m_points[1][2] = 0.500000000000000000;
		m_points[2][0] = 0.500000000000000000;
		m_points[2][1] = 0.500000000000000000;
		m_points[2][2] = 0.102088787122889268;
		m_points[3][0] = 0.500000000000000000;
		m_points[3][1] = 0.500000000000000000;
		m_points[3][2] = 0.897911212877110732;
		m_points[4][0] = 0.500000000000000000;
		m_points[4][1] = 0.897911212877110732;
		m_points[4][2] = 0.500000000000000000;
		m_points[5][0] = 0.897911212877110732;
		m_points[5][1] = 0.500000000000000000;
		m_points[5][2] = 0.500000000000000000;
		m_points[6][0] = 0.120606544680335927;
		m_points[6][1] = 0.120606544680335927;
		m_points[6][2] = 0.120606544680335927;
		m_points[7][0] = 0.120606544680335927;
		m_points[7][1] = 0.120606544680335927;
		m_points[7][2] = 0.879393455319664073;
		m_points[8][0] = 0.120606544680335927;
		m_points[8][1] = 0.879393455319664073;
		m_points[8][2] = 0.120606544680335927;
		m_points[9][0] = 0.120606544680335927;
		m_points[9][1] = 0.879393455319664073;
		m_points[9][2] = 0.879393455319664073;
		m_points[10][0] = 0.879393455319664073;
		m_points[10][1] = 0.120606544680335927;
		m_points[10][2] = 0.120606544680335927;
		m_points[11][0] = 0.879393455319664073;
		m_points[11][1] = 0.120606544680335927;
		m_points[11][2] = 0.879393455319664073;
		m_points[12][0] = 0.879393455319664073;
		m_points[12][1] = 0.879393455319664073;
		m_points[12][2] = 0.120606544680335927;
		m_points[13][0] = 0.879393455319664073;
		m_points[13][1] = 0.879393455319664073;
		m_points[13][2] = 0.879393455319664073;

		m_weights[0] =  0.110803324099722992;
		m_weights[1] =  0.110803324099722992;
		m_weights[2] =  0.110803324099722992;
		m_weights[3] =  0.110803324099722992;
		m_weights[4] =  0.110803324099722992;
		m_weights[5] =  0.110803324099722992;
		m_weights[6] =  0.041897506925207756;
		m_weights[7] =  0.041897506925207756;
		m_weights[8] =  0.041897506925207756;
		m_weights[9] =  0.041897506925207756;
		m_weights[10] =  0.041897506925207756;
		m_weights[11] =  0.041897506925207756;
		m_weights[12] =  0.041897506925207756;
		m_weights[13] =  0.041897506925207756;
		break;

	case 7:
		m_order = 7;
		m_num_points = 31;

		if(allocate_memory(m_num_points) != true)
		{
			assert(0 && "Error while constructing Quadrature Rule.");
		}

		m_points[0][0] = 0.500000000000000000;
		m_points[0][1] = 0.500000000000000000;
		m_points[0][2] = 0.500000000000000000;
		m_points[1][0] = 0.207229978115440046;
		m_points[1][1] = 0.500000000000000000;
		m_points[1][2] = 0.500000000000000000;
		m_points[2][0] = 0.500000000000000000;
		m_points[2][1] = 0.207229978115440046;
		m_points[2][2] = 0.500000000000000000;
		m_points[3][0] = 0.500000000000000000;
		m_points[3][1] = 0.500000000000000000;
		m_points[3][2] = 0.207229978115440046;
		m_points[4][0] = 0.500000000000000000;
		m_points[4][1] = 0.500000000000000000;
		m_points[4][2] = 0.792770021884559954;
		m_points[5][0] = 0.500000000000000000;
		m_points[5][1] = 0.792770021884559954;
		m_points[5][2] = 0.500000000000000000;
		m_points[6][0] = 0.792770021884559954;
		m_points[6][1] = 0.500000000000000000;
		m_points[6][2] = 0.500000000000000000;
		m_points[7][0] = 0.031419180715895981;
		m_points[7][1] = 0.152764932004147617;
		m_points[7][2] = 0.292170366197967437;
		m_points[8][0] = 0.031419180715895981;
		m_points[8][1] = 0.292170366197967437;
		m_points[8][2] = 0.847235067995852383;
		m_points[9][0] = 0.031419180715895981;
		m_points[9][1] = 0.707829633802032563;
		m_points[9][2] = 0.152764932004147617;
		m_points[10][0] = 0.031419180715895981;
		m_points[10][1] = 0.847235067995852383;
		m_points[10][2] = 0.707829633802032563;
		m_points[11][0] = 0.152764932004147617;
		m_points[11][1] = 0.031419180715895981;
		m_points[11][2] = 0.707829633802032563;
		m_points[12][0] = 0.152764932004147617;
		m_points[12][1] = 0.292170366197967437;
		m_points[12][2] = 0.031419180715895981;
		m_points[13][0] = 0.152764932004147617;
		m_points[13][1] = 0.707829633802032563;
		m_points[13][2] = 0.968580819284104019;
		m_points[14][0] = 0.152764932004147617;
		m_points[14][1] = 0.968580819284104019;
		m_points[14][2] = 0.292170366197967437;
		m_points[15][0] = 0.292170366197967437;
		m_points[15][1] = 0.031419180715895981;
		m_points[15][2] = 0.152764932004147617;
		m_points[16][0] = 0.292170366197967437;
		m_points[16][1] = 0.152764932004147617;
		m_points[16][2] = 0.968580819284104019;
		m_points[17][0] = 0.292170366197967437;
		m_points[17][1] = 0.847235067995852383;
		m_points[17][2] = 0.031419180715895981;
		m_points[18][0] = 0.292170366197967437;
		m_points[18][1] = 0.968580819284104019;
		m_points[18][2] = 0.847235067995852383;
		m_points[19][0] = 0.707829633802032563;
		m_points[19][1] = 0.031419180715895981;
		m_points[19][2] = 0.847235067995852383;
		m_points[20][0] = 0.707829633802032563;
		m_points[20][1] = 0.152764932004147617;
		m_points[20][2] = 0.031419180715895981;
		m_points[21][0] = 0.707829633802032563;
		m_points[21][1] = 0.847235067995852383;
		m_points[21][2] = 0.968580819284104019;
		m_points[22][0] = 0.707829633802032563;
		m_points[22][1] = 0.968580819284104019;
		m_points[22][2] = 0.152764932004147617;
		m_points[23][0] = 0.847235067995852383;
		m_points[23][1] = 0.031419180715895981;
		m_points[23][2] = 0.292170366197967437;
		m_points[24][0] = 0.847235067995852383;
		m_points[24][1] = 0.292170366197967437;
		m_points[24][2] = 0.968580819284104019;
		m_points[25][0] = 0.847235067995852383;
		m_points[25][1] = 0.707829633802032563;
		m_points[25][2] = 0.031419180715895981;
		m_points[26][0] = 0.847235067995852383;
		m_points[26][1] = 0.968580819284104019;
		m_points[26][2] = 0.707829633802032563;
		m_points[27][0] = 0.968580819284104019;
		m_points[27][1] = 0.152764932004147617;
		m_points[27][2] = 0.707829633802032563;
		m_points[28][0] = 0.968580819284104019;
		m_points[28][1] = 0.292170366197967437;
		m_points[28][2] = 0.152764932004147617;
		m_points[29][0] = 0.968580819284104019;
		m_points[29][1] = 0.707829633802032563;
		m_points[29][2] = 0.847235067995852383;
		m_points[30][0] = 0.968580819284104019;
		m_points[30][1] = 0.847235067995852383;
		m_points[30][2] = 0.292170366197967437;

		m_weights[0] =  -0.159420289855072464;
		m_weights[1] =  0.108888888888888889;
		m_weights[2] =  0.108888888888888889;
		m_weights[3] =  0.108888888888888889;
		m_weights[4] =  0.108888888888888889;
		m_weights[5] =  0.108888888888888889;
		m_weights[6] =  0.108888888888888889;
		m_weights[7] =  0.021086956521739130;
		m_weights[8] =  0.021086956521739130;
		m_weights[9] =  0.021086956521739130;
		m_weights[10] =  0.021086956521739130;
		m_weights[11] =  0.021086956521739130;
		m_weights[12] =  0.021086956521739130;
		m_weights[13] =  0.021086956521739130;
		m_weights[14] =  0.021086956521739130;
		m_weights[15] =  0.021086956521739130;
		m_weights[16] =  0.021086956521739130;
		m_weights[17] =  0.021086956521739130;
		m_weights[18] =  0.021086956521739130;
		m_weights[19] =  0.021086956521739130;
		m_weights[20] =  0.021086956521739130;
		m_weights[21] =  0.021086956521739130;
		m_weights[22] =  0.021086956521739130;
		m_weights[23] =  0.021086956521739130;
		m_weights[24] =  0.021086956521739130;
		m_weights[25] =  0.021086956521739130;
		m_weights[26] =  0.021086956521739130;
		m_weights[27] =  0.021086956521739130;
		m_weights[28] =  0.021086956521739130;
		m_weights[29] =  0.021086956521739130;
		m_weights[30] =  0.021086956521739130;
		break;

	case 8:
		m_order = 8;
		m_num_points = 47;

		if(allocate_memory(m_num_points) != true)
		{
			assert(0 && "Error while constructing Quadrature Rule.");
		}

		m_points[0][0] = 0.500000000000000000;
		m_points[0][1] = 0.500000000000000000;
		m_points[0][2] = 0.500000000000000000;
		m_points[1][0] = 0.108769601782024205;
		m_points[1][1] = 0.500000000000000000;
		m_points[1][2] = 0.500000000000000000;
		m_points[2][0] = 0.500000000000000000;
		m_points[2][1] = 0.108769601782024205;
		m_points[2][2] = 0.500000000000000000;
		m_points[3][0] = 0.500000000000000000;
		m_points[3][1] = 0.500000000000000000;
		m_points[3][2] = 0.108769601782024205;
		m_points[4][0] = 0.500000000000000000;
		m_points[4][1] = 0.500000000000000000;
		m_points[4][2] = 0.891230398217975795;
		m_points[5][0] = 0.500000000000000000;
		m_points[5][1] = 0.891230398217975795;
		m_points[5][2] = 0.500000000000000000;
		m_points[6][0] = 0.891230398217975795;
		m_points[6][1] = 0.500000000000000000;
		m_points[6][2] = 0.500000000000000000;
		m_points[7][0] = 0.255952665146816760;
		m_points[7][1] = 0.255952665146816760;
		m_points[7][2] = 0.255952665146816760;
		m_points[8][0] = 0.255952665146816760;
		m_points[8][1] = 0.255952665146816760;
		m_points[8][2] = 0.744047334853183240;
		m_points[9][0] = 0.255952665146816760;
		m_points[9][1] = 0.744047334853183240;
		m_points[9][2] = 0.255952665146816760;
		m_points[10][0] = 0.255952665146816760;
		m_points[10][1] = 0.744047334853183240;
		m_points[10][2] = 0.744047334853183240;
		m_points[11][0] = 0.744047334853183240;
		m_points[11][1] = 0.255952665146816760;
		m_points[11][2] = 0.255952665146816760;
		m_points[12][0] = 0.744047334853183240;
		m_points[12][1] = 0.255952665146816760;
		m_points[12][2] = 0.744047334853183240;
		m_points[13][0] = 0.744047334853183240;
		m_points[13][1] = 0.744047334853183240;
		m_points[13][2] = 0.255952665146816760;
		m_points[14][0] = 0.744047334853183240;
		m_points[14][1] = 0.744047334853183240;
		m_points[14][2] = 0.744047334853183240;
		m_points[15][0] = 0.068890536169259406;
		m_points[15][1] = 0.068890536169259406;
		m_points[15][2] = 0.068890536169259406;
		m_points[16][0] = 0.068890536169259406;
		m_points[16][1] = 0.068890536169259406;
		m_points[16][2] = 0.931109463830740594;
		m_points[17][0] = 0.068890536169259406;
		m_points[17][1] = 0.931109463830740594;
		m_points[17][2] = 0.068890536169259406;
		m_points[18][0] = 0.068890536169259406;
		m_points[18][1] = 0.931109463830740594;
		m_points[18][2] = 0.931109463830740594;
		m_points[19][0] = 0.931109463830740594;
		m_points[19][1] = 0.068890536169259406;
		m_points[19][2] = 0.068890536169259406;
		m_points[20][0] = 0.931109463830740594;
		m_points[20][1] = 0.068890536169259406;
		m_points[20][2] = 0.931109463830740594;
		m_points[21][0] = 0.931109463830740594;
		m_points[21][1] = 0.931109463830740594;
		m_points[21][2] = 0.068890536169259406;
		m_points[22][0] = 0.931109463830740594;
		m_points[22][1] = 0.931109463830740594;
		m_points[22][2] = 0.931109463830740594;
		m_points[23][0] = 0.027901710853995902;
		m_points[23][1] = 0.151212583146381502;
		m_points[23][2] = 0.640556954704170928;
		m_points[24][0] = 0.027901710853995902;
		m_points[24][1] = 0.359443045295829072;
		m_points[24][2] = 0.151212583146381502;
		m_points[25][0] = 0.027901710853995902;
		m_points[25][1] = 0.640556954704170928;
		m_points[25][2] = 0.848787416853618498;
		m_points[26][0] = 0.027901710853995902;
		m_points[26][1] = 0.848787416853618498;
		m_points[26][2] = 0.359443045295829072;
		m_points[27][0] = 0.151212583146381502;
		m_points[27][1] = 0.027901710853995902;
		m_points[27][2] = 0.359443045295829072;
		m_points[28][0] = 0.151212583146381502;
		m_points[28][1] = 0.359443045295829072;
		m_points[28][2] = 0.972098289146004098;
		m_points[29][0] = 0.151212583146381502;
		m_points[29][1] = 0.640556954704170928;
		m_points[29][2] = 0.027901710853995902;
		m_points[30][0] = 0.151212583146381502;
		m_points[30][1] = 0.972098289146004098;
		m_points[30][2] = 0.640556954704170928;
		m_points[31][0] = 0.359443045295829072;
		m_points[31][1] = 0.027901710853995902;
		m_points[31][2] = 0.848787416853618498;
		m_points[32][0] = 0.359443045295829072;
		m_points[32][1] = 0.151212583146381502;
		m_points[32][2] = 0.027901710853995902;
		m_points[33][0] = 0.359443045295829072;
		m_points[33][1] = 0.848787416853618498;
		m_points[33][2] = 0.972098289146004098;
		m_points[34][0] = 0.359443045295829072;
		m_points[34][1] = 0.972098289146004098;
		m_points[34][2] = 0.151212583146381502;
		m_points[35][0] = 0.640556954704170928;
		m_points[35][1] = 0.027901710853995902;
		m_points[35][2] = 0.151212583146381502;
		m_points[36][0] = 0.640556954704170928;
		m_points[36][1] = 0.151212583146381502;
		m_points[36][2] = 0.972098289146004098;
		m_points[37][0] = 0.640556954704170928;
		m_points[37][1] = 0.848787416853618498;
		m_points[37][2] = 0.027901710853995902;
		m_points[38][0] = 0.640556954704170928;
		m_points[38][1] = 0.972098289146004098;
		m_points[38][2] = 0.848787416853618498;
		m_points[39][0] = 0.848787416853618498;
		m_points[39][1] = 0.027901710853995902;
		m_points[39][2] = 0.640556954704170928;
		m_points[40][0] = 0.848787416853618498;
		m_points[40][1] = 0.359443045295829072;
		m_points[40][2] = 0.027901710853995902;
		m_points[41][0] = 0.848787416853618498;
		m_points[41][1] = 0.640556954704170928;
		m_points[41][2] = 0.972098289146004098;
		m_points[42][0] = 0.848787416853618498;
		m_points[42][1] = 0.972098289146004098;
		m_points[42][2] = 0.359443045295829072;
		m_points[43][0] = 0.972098289146004098;
		m_points[43][1] = 0.151212583146381502;
		m_points[43][2] = 0.359443045295829072;
		m_points[44][0] = 0.972098289146004098;
		m_points[44][1] = 0.359443045295829072;
		m_points[44][2] = 0.848787416853618498;
		m_points[45][0] = 0.972098289146004098;
		m_points[45][1] = 0.640556954704170928;
		m_points[45][2] = 0.151212583146381502;
		m_points[46][0] = 0.972098289146004098;
		m_points[46][1] = 0.848787416853618498;
		m_points[46][2] = 0.640556954704170928;

		m_weights[0] =  0.056487964359399961;
		m_weights[1] =  0.037422397169042365;
		m_weights[2] =  0.037422397169042365;
		m_weights[3] =  0.037422397169042365;
		m_weights[4] =  0.037422397169042365;
		m_weights[5] =  0.037422397169042365;
		m_weights[6] =  0.037422397169042365;
		m_weights[7] =  0.037609519921405002;
		m_weights[8] =  0.037609519921405002;
		m_weights[9] =  0.037609519921405002;
		m_weights[10] =  0.037609519921405002;
		m_weights[11] =  0.037609519921405002;
		m_weights[12] =  0.037609519921405002;
		m_weights[13] =  0.037609519921405002;
		m_weights[14] =  0.037609519921405002;
		m_weights[15] =  0.006185540698462977;
		m_weights[16] =  0.006185540698462977;
		m_weights[17] =  0.006185540698462977;
		m_weights[18] =  0.006185540698462977;
		m_weights[19] =  0.006185540698462977;
		m_weights[20] =  0.006185540698462977;
		m_weights[21] =  0.006185540698462977;
		m_weights[22] =  0.006185540698462977;
		m_weights[23] =  0.015359048652808417;
		m_weights[24] =  0.015359048652808417;
		m_weights[25] =  0.015359048652808417;
		m_weights[26] =  0.015359048652808417;
		m_weights[27] =  0.015359048652808417;
		m_weights[28] =  0.015359048652808417;
		m_weights[29] =  0.015359048652808417;
		m_weights[30] =  0.015359048652808417;
		m_weights[31] =  0.015359048652808417;
		m_weights[32] =  0.015359048652808417;
		m_weights[33] =  0.015359048652808417;
		m_weights[34] =  0.015359048652808417;
		m_weights[35] =  0.015359048652808417;
		m_weights[36] =  0.015359048652808417;
		m_weights[37] =  0.015359048652808417;
		m_weights[38] =  0.015359048652808417;
		m_weights[39] =  0.015359048652808417;
		m_weights[40] =  0.015359048652808417;
		m_weights[41] =  0.015359048652808417;
		m_weights[42] =  0.015359048652808417;
		m_weights[43] =  0.015359048652808417;
		m_weights[44] =  0.015359048652808417;
		m_weights[45] =  0.015359048652808417;
		m_weights[46] =  0.015359048652808417;
		break;

	case 9:
		m_order = 9;
		m_num_points = 58;

		if(allocate_memory(m_num_points) != true)
		{
			assert(0 && "Error while constructing Quadrature Rule.");
		}

		m_points[0][0] = 0.193159265204145503;
		m_points[0][1] = 0.500000000000000000;
		m_points[0][2] = 0.500000000000000000;
		m_points[1][0] = 0.500000000000000000;
		m_points[1][1] = 0.193159265204145503;
		m_points[1][2] = 0.500000000000000000;
		m_points[2][0] = 0.500000000000000000;
		m_points[2][1] = 0.500000000000000000;
		m_points[2][2] = 0.193159265204145503;
		m_points[3][0] = 0.500000000000000000;
		m_points[3][1] = 0.500000000000000000;
		m_points[3][2] = 0.806840734795854497;
		m_points[4][0] = 0.500000000000000000;
		m_points[4][1] = 0.806840734795854497;
		m_points[4][2] = 0.500000000000000000;
		m_points[5][0] = 0.806840734795854497;
		m_points[5][1] = 0.500000000000000000;
		m_points[5][2] = 0.500000000000000000;
		m_points[6][0] = 0.061156438371160857;
		m_points[6][1] = 0.061156438371160857;
		m_points[6][2] = 0.500000000000000000;
		m_points[7][0] = 0.061156438371160857;
		m_points[7][1] = 0.500000000000000000;
		m_points[7][2] = 0.061156438371160857;
		m_points[8][0] = 0.061156438371160857;
		m_points[8][1] = 0.500000000000000000;
		m_points[8][2] = 0.938843561628839143;
		m_points[9][0] = 0.061156438371160857;
		m_points[9][1] = 0.938843561628839143;
		m_points[9][2] = 0.500000000000000000;
		m_points[10][0] = 0.500000000000000000;
		m_points[10][1] = 0.061156438371160857;
		m_points[10][2] = 0.061156438371160857;
		m_points[11][0] = 0.500000000000000000;
		m_points[11][1] = 0.061156438371160857;
		m_points[11][2] = 0.938843561628839143;
		m_points[12][0] = 0.500000000000000000;
		m_points[12][1] = 0.938843561628839143;
		m_points[12][2] = 0.061156438371160857;
		m_points[13][0] = 0.500000000000000000;
		m_points[13][1] = 0.938843561628839143;
		m_points[13][2] = 0.938843561628839143;
		m_points[14][0] = 0.938843561628839143;
		m_points[14][1] = 0.061156438371160857;
		m_points[14][2] = 0.500000000000000000;
		m_points[15][0] = 0.938843561628839143;
		m_points[15][1] = 0.500000000000000000;
		m_points[15][2] = 0.061156438371160857;
		m_points[16][0] = 0.938843561628839143;
		m_points[16][1] = 0.500000000000000000;
		m_points[16][2] = 0.938843561628839143;
		m_points[17][0] = 0.938843561628839143;
		m_points[17][1] = 0.938843561628839143;
		m_points[17][2] = 0.500000000000000000;
		m_points[18][0] = 0.217944596489984973;
		m_points[18][1] = 0.217944596489984973;
		m_points[18][2] = 0.217944596489984973;
		m_points[19][0] = 0.217944596489984973;
		m_points[19][1] = 0.217944596489984973;
		m_points[19][2] = 0.782055403510015027;
		m_points[20][0] = 0.217944596489984973;
		m_points[20][1] = 0.782055403510015027;
		m_points[20][2] = 0.217944596489984973;
		m_points[21][0] = 0.217944596489984973;
		m_points[21][1] = 0.782055403510015027;
		m_points[21][2] = 0.782055403510015027;
		m_points[22][0] = 0.782055403510015027;
		m_points[22][1] = 0.217944596489984973;
		m_points[22][2] = 0.217944596489984973;
		m_points[23][0] = 0.782055403510015027;
		m_points[23][1] = 0.217944596489984973;
		m_points[23][2] = 0.782055403510015027;
		m_points[24][0] = 0.782055403510015027;
		m_points[24][1] = 0.782055403510015027;
		m_points[24][2] = 0.217944596489984973;
		m_points[25][0] = 0.782055403510015027;
		m_points[25][1] = 0.782055403510015027;
		m_points[25][2] = 0.782055403510015027;
		m_points[26][0] = 0.064950107669012041;
		m_points[26][1] = 0.064950107669012041;
		m_points[26][2] = 0.064950107669012041;
		m_points[27][0] = 0.064950107669012041;
		m_points[27][1] = 0.064950107669012041;
		m_points[27][2] = 0.935049892330987959;
		m_points[28][0] = 0.064950107669012041;
		m_points[28][1] = 0.935049892330987959;
		m_points[28][2] = 0.064950107669012041;
		m_points[29][0] = 0.064950107669012041;
		m_points[29][1] = 0.935049892330987959;
		m_points[29][2] = 0.935049892330987959;
		m_points[30][0] = 0.935049892330987959;
		m_points[30][1] = 0.064950107669012041;
		m_points[30][2] = 0.064950107669012041;
		m_points[31][0] = 0.935049892330987959;
		m_points[31][1] = 0.064950107669012041;
		m_points[31][2] = 0.935049892330987959;
		m_points[32][0] = 0.935049892330987959;
		m_points[32][1] = 0.935049892330987959;
		m_points[32][2] = 0.064950107669012041;
		m_points[33][0] = 0.935049892330987959;
		m_points[33][1] = 0.935049892330987959;
		m_points[33][2] = 0.935049892330987959;
		m_points[34][0] = 0.030734789067664127;
		m_points[34][1] = 0.283866048684568918;
		m_points[34][2] = 0.283866048684568918;
		m_points[35][0] = 0.030734789067664127;
		m_points[35][1] = 0.283866048684568918;
		m_points[35][2] = 0.716133951315431082;
		m_points[36][0] = 0.030734789067664127;
		m_points[36][1] = 0.716133951315431082;
		m_points[36][2] = 0.283866048684568918;
		m_points[37][0] = 0.030734789067664127;
		m_points[37][1] = 0.716133951315431082;
		m_points[37][2] = 0.716133951315431082;
		m_points[38][0] = 0.283866048684568918;
		m_points[38][1] = 0.030734789067664127;
		m_points[38][2] = 0.283866048684568918;
		m_points[39][0] = 0.283866048684568918;
		m_points[39][1] = 0.030734789067664127;
		m_points[39][2] = 0.716133951315431082;
		m_points[40][0] = 0.283866048684568918;
		m_points[40][1] = 0.283866048684568918;
		m_points[40][2] = 0.030734789067664127;
		m_points[41][0] = 0.283866048684568918;
		m_points[41][1] = 0.283866048684568918;
		m_points[41][2] = 0.969265210932335873;
		m_points[42][0] = 0.283866048684568918;
		m_points[42][1] = 0.716133951315431082;
		m_points[42][2] = 0.030734789067664127;
		m_points[43][0] = 0.283866048684568918;
		m_points[43][1] = 0.716133951315431082;
		m_points[43][2] = 0.969265210932335873;
		m_points[44][0] = 0.283866048684568918;
		m_points[44][1] = 0.969265210932335873;
		m_points[44][2] = 0.283866048684568918;
		m_points[45][0] = 0.283866048684568918;
		m_points[45][1] = 0.969265210932335873;
		m_points[45][2] = 0.716133951315431082;
		m_points[46][0] = 0.716133951315431082;
		m_points[46][1] = 0.030734789067664127;
		m_points[46][2] = 0.283866048684568918;
		m_points[47][0] = 0.716133951315431082;
		m_points[47][1] = 0.030734789067664127;
		m_points[47][2] = 0.716133951315431082;
		m_points[48][0] = 0.716133951315431082;
		m_points[48][1] = 0.283866048684568918;
		m_points[48][2] = 0.030734789067664127;
		m_points[49][0] = 0.716133951315431082;
		m_points[49][1] = 0.283866048684568918;
		m_points[49][2] = 0.969265210932335873;
		m_points[50][0] = 0.716133951315431082;
		m_points[50][1] = 0.716133951315431082;
		m_points[50][2] = 0.030734789067664127;
		m_points[51][0] = 0.716133951315431082;
		m_points[51][1] = 0.716133951315431082;
		m_points[51][2] = 0.969265210932335873;
		m_points[52][0] = 0.716133951315431082;
		m_points[52][1] = 0.969265210932335873;
		m_points[52][2] = 0.283866048684568918;
		m_points[53][0] = 0.716133951315431082;
		m_points[53][1] = 0.969265210932335873;
		m_points[53][2] = 0.716133951315431082;
		m_points[54][0] = 0.969265210932335873;
		m_points[54][1] = 0.283866048684568918;
		m_points[54][2] = 0.283866048684568918;
		m_points[55][0] = 0.969265210932335873;
		m_points[55][1] = 0.283866048684568918;
		m_points[55][2] = 0.716133951315431082;
		m_points[56][0] = 0.969265210932335873;
		m_points[56][1] = 0.716133951315431082;
		m_points[56][2] = 0.283866048684568918;
		m_points[57][0] = 0.969265210932335873;
		m_points[57][1] = 0.716133951315431082;
		m_points[57][2] = 0.716133951315431082;

		m_weights[0] =  0.054159374468706818;
		m_weights[1] =  0.054159374468706818;
		m_weights[2] =  0.054159374468706818;
		m_weights[3] =  0.054159374468706818;
		m_weights[4] =  0.054159374468706818;
		m_weights[5] =  0.054159374468706818;
		m_weights[6] =  0.011473725767022205;
		m_weights[7] =  0.011473725767022205;
		m_weights[8] =  0.011473725767022205;
		m_weights[9] =  0.011473725767022205;
		m_weights[10] =  0.011473725767022205;
		m_weights[11] =  0.011473725767022205;
		m_weights[12] =  0.011473725767022205;
		m_weights[13] =  0.011473725767022205;
		m_weights[14] =  0.011473725767022205;
		m_weights[15] =  0.011473725767022205;
		m_weights[16] =  0.011473725767022205;
		m_weights[17] =  0.011473725767022205;
		m_weights[18] =  0.024857479768002938;
		m_weights[19] =  0.024857479768002938;
		m_weights[20] =  0.024857479768002938;
		m_weights[21] =  0.024857479768002938;
		m_weights[22] =  0.024857479768002938;
		m_weights[23] =  0.024857479768002938;
		m_weights[24] =  0.024857479768002938;
		m_weights[25] =  0.024857479768002938;
		m_weights[26] =  0.006268599412418629;
		m_weights[27] =  0.006268599412418629;
		m_weights[28] =  0.006268599412418629;
		m_weights[29] =  0.006268599412418629;
		m_weights[30] =  0.006268599412418629;
		m_weights[31] =  0.006268599412418629;
		m_weights[32] =  0.006268599412418629;
		m_weights[33] =  0.006268599412418629;
		m_weights[34] =  0.012014600439171671;
		m_weights[35] =  0.012014600439171671;
		m_weights[36] =  0.012014600439171671;
		m_weights[37] =  0.012014600439171671;
		m_weights[38] =  0.012014600439171671;
		m_weights[39] =  0.012014600439171671;
		m_weights[40] =  0.012014600439171671;
		m_weights[41] =  0.012014600439171671;
		m_weights[42] =  0.012014600439171671;
		m_weights[43] =  0.012014600439171671;
		m_weights[44] =  0.012014600439171671;
		m_weights[45] =  0.012014600439171671;
		m_weights[46] =  0.012014600439171671;
		m_weights[47] =  0.012014600439171671;
		m_weights[48] =  0.012014600439171671;
		m_weights[49] =  0.012014600439171671;
		m_weights[50] =  0.012014600439171671;
		m_weights[51] =  0.012014600439171671;
		m_weights[52] =  0.012014600439171671;
		m_weights[53] =  0.012014600439171671;
		m_weights[54] =  0.012014600439171671;
		m_weights[55] =  0.012014600439171671;
		m_weights[56] =  0.012014600439171671;
		m_weights[57] =  0.012014600439171671;
		break;

	case 11:
		m_order = 11;
		m_num_points = 90;

		if(allocate_memory(m_num_points) != true)
		{
			assert(0 && "Error while constructing Quadrature Rule.");
		}

		m_points[0][0] = 0.093692832950186752;
		m_points[0][1] = 0.500000000000000000;
		m_points[0][2] = 0.500000000000000000;
		m_points[1][0] = 0.500000000000000000;
		m_points[1][1] = 0.093692832950186752;
		m_points[1][2] = 0.500000000000000000;
		m_points[2][0] = 0.500000000000000000;
		m_points[2][1] = 0.500000000000000000;
		m_points[2][2] = 0.093692832950186752;
		m_points[3][0] = 0.500000000000000000;
		m_points[3][1] = 0.500000000000000000;
		m_points[3][2] = 0.906307167049813248;
		m_points[4][0] = 0.500000000000000000;
		m_points[4][1] = 0.906307167049813248;
		m_points[4][2] = 0.500000000000000000;
		m_points[5][0] = 0.906307167049813248;
		m_points[5][1] = 0.500000000000000000;
		m_points[5][2] = 0.500000000000000000;
		m_points[6][0] = 0.132665856501495991;
		m_points[6][1] = 0.132665856501495991;
		m_points[6][2] = 0.500000000000000000;
		m_points[7][0] = 0.132665856501495991;
		m_points[7][1] = 0.500000000000000000;
		m_points[7][2] = 0.132665856501495991;
		m_points[8][0] = 0.132665856501495991;
		m_points[8][1] = 0.500000000000000000;
		m_points[8][2] = 0.867334143498504009;
		m_points[9][0] = 0.132665856501495991;
		m_points[9][1] = 0.867334143498504009;
		m_points[9][2] = 0.500000000000000000;
		m_points[10][0] = 0.500000000000000000;
		m_points[10][1] = 0.132665856501495991;
		m_points[10][2] = 0.132665856501495991;
		m_points[11][0] = 0.500000000000000000;
		m_points[11][1] = 0.132665856501495991;
		m_points[11][2] = 0.867334143498504009;
		m_points[12][0] = 0.500000000000000000;
		m_points[12][1] = 0.867334143498504009;
		m_points[12][2] = 0.132665856501495991;
		m_points[13][0] = 0.500000000000000000;
		m_points[13][1] = 0.867334143498504009;
		m_points[13][2] = 0.867334143498504009;
		m_points[14][0] = 0.867334143498504009;
		m_points[14][1] = 0.132665856501495991;
		m_points[14][2] = 0.500000000000000000;
		m_points[15][0] = 0.867334143498504009;
		m_points[15][1] = 0.500000000000000000;
		m_points[15][2] = 0.132665856501495991;
		m_points[16][0] = 0.867334143498504009;
		m_points[16][1] = 0.500000000000000000;
		m_points[16][2] = 0.867334143498504009;
		m_points[17][0] = 0.867334143498504009;
		m_points[17][1] = 0.867334143498504009;
		m_points[17][2] = 0.500000000000000000;
		m_points[18][0] = 0.343303297741972639;
		m_points[18][1] = 0.343303297741972639;
		m_points[18][2] = 0.343303297741972639;
		m_points[19][0] = 0.343303297741972639;
		m_points[19][1] = 0.343303297741972639;
		m_points[19][2] = 0.656696702258027361;
		m_points[20][0] = 0.343303297741972639;
		m_points[20][1] = 0.656696702258027361;
		m_points[20][2] = 0.343303297741972639;
		m_points[21][0] = 0.343303297741972639;
		m_points[21][1] = 0.656696702258027361;
		m_points[21][2] = 0.656696702258027361;
		m_points[22][0] = 0.656696702258027361;
		m_points[22][1] = 0.343303297741972639;
		m_points[22][2] = 0.343303297741972639;
		m_points[23][0] = 0.656696702258027361;
		m_points[23][1] = 0.343303297741972639;
		m_points[23][2] = 0.656696702258027361;
		m_points[24][0] = 0.656696702258027361;
		m_points[24][1] = 0.656696702258027361;
		m_points[24][2] = 0.343303297741972639;
		m_points[25][0] = 0.656696702258027361;
		m_points[25][1] = 0.656696702258027361;
		m_points[25][2] = 0.656696702258027361;
		m_points[26][0] = 0.199162367900868649;
		m_points[26][1] = 0.199162367900868649;
		m_points[26][2] = 0.199162367900868649;
		m_points[27][0] = 0.199162367900868649;
		m_points[27][1] = 0.199162367900868649;
		m_points[27][2] = 0.800837632099131351;
		m_points[28][0] = 0.199162367900868649;
		m_points[28][1] = 0.800837632099131351;
		m_points[28][2] = 0.199162367900868649;
		m_points[29][0] = 0.199162367900868649;
		m_points[29][1] = 0.800837632099131351;
		m_points[29][2] = 0.800837632099131351;
		m_points[30][0] = 0.800837632099131351;
		m_points[30][1] = 0.199162367900868649;
		m_points[30][2] = 0.199162367900868649;
		m_points[31][0] = 0.800837632099131351;
		m_points[31][1] = 0.199162367900868649;
		m_points[31][2] = 0.800837632099131351;
		m_points[32][0] = 0.800837632099131351;
		m_points[32][1] = 0.800837632099131351;
		m_points[32][2] = 0.199162367900868649;
		m_points[33][0] = 0.800837632099131351;
		m_points[33][1] = 0.800837632099131351;
		m_points[33][2] = 0.800837632099131351;
		m_points[34][0] = 0.072272119491120008;
		m_points[34][1] = 0.072272119491120008;
		m_points[34][2] = 0.072272119491120008;
		m_points[35][0] = 0.072272119491120008;
		m_points[35][1] = 0.072272119491120008;
		m_points[35][2] = 0.927727880508879992;
		m_points[36][0] = 0.072272119491120008;
		m_points[36][1] = 0.927727880508879992;
		m_points[36][2] = 0.072272119491120008;
		m_points[37][0] = 0.072272119491120008;
		m_points[37][1] = 0.927727880508879992;
		m_points[37][2] = 0.927727880508879992;
		m_points[38][0] = 0.927727880508879992;
		m_points[38][1] = 0.072272119491120008;
		m_points[38][2] = 0.072272119491120008;
		m_points[39][0] = 0.927727880508879992;
		m_points[39][1] = 0.072272119491120008;
		m_points[39][2] = 0.927727880508879992;
		m_points[40][0] = 0.927727880508879992;
		m_points[40][1] = 0.927727880508879992;
		m_points[40][2] = 0.072272119491120008;
		m_points[41][0] = 0.927727880508879992;
		m_points[41][1] = 0.927727880508879992;
		m_points[41][2] = 0.927727880508879992;
		m_points[42][0] = 0.029377571394698368;
		m_points[42][1] = 0.029377571394698368;
		m_points[42][2] = 0.323048592701684933;
		m_points[43][0] = 0.029377571394698368;
		m_points[43][1] = 0.029377571394698368;
		m_points[43][2] = 0.676951407298315067;
		m_points[44][0] = 0.029377571394698368;
		m_points[44][1] = 0.323048592701684933;
		m_points[44][2] = 0.029377571394698368;
		m_points[45][0] = 0.029377571394698368;
		m_points[45][1] = 0.323048592701684933;
		m_points[45][2] = 0.970622428605301632;
		m_points[46][0] = 0.029377571394698368;
		m_points[46][1] = 0.676951407298315067;
		m_points[46][2] = 0.029377571394698368;
		m_points[47][0] = 0.029377571394698368;
		m_points[47][1] = 0.676951407298315067;
		m_points[47][2] = 0.970622428605301632;
		m_points[48][0] = 0.029377571394698368;
		m_points[48][1] = 0.970622428605301632;
		m_points[48][2] = 0.323048592701684933;
		m_points[49][0] = 0.029377571394698368;
		m_points[49][1] = 0.970622428605301632;
		m_points[49][2] = 0.676951407298315067;
		m_points[50][0] = 0.323048592701684933;
		m_points[50][1] = 0.029377571394698368;
		m_points[50][2] = 0.029377571394698368;
		m_points[51][0] = 0.323048592701684933;
		m_points[51][1] = 0.029377571394698368;
		m_points[51][2] = 0.970622428605301632;
		m_points[52][0] = 0.323048592701684933;
		m_points[52][1] = 0.970622428605301632;
		m_points[52][2] = 0.029377571394698368;
		m_points[53][0] = 0.323048592701684933;
		m_points[53][1] = 0.970622428605301632;
		m_points[53][2] = 0.970622428605301632;
		m_points[54][0] = 0.676951407298315067;
		m_points[54][1] = 0.029377571394698368;
		m_points[54][2] = 0.029377571394698368;
		m_points[55][0] = 0.676951407298315067;
		m_points[55][1] = 0.029377571394698368;
		m_points[55][2] = 0.970622428605301632;
		m_points[56][0] = 0.676951407298315067;
		m_points[56][1] = 0.970622428605301632;
		m_points[56][2] = 0.029377571394698368;
		m_points[57][0] = 0.676951407298315067;
		m_points[57][1] = 0.970622428605301632;
		m_points[57][2] = 0.970622428605301632;
		m_points[58][0] = 0.970622428605301632;
		m_points[58][1] = 0.029377571394698368;
		m_points[58][2] = 0.323048592701684933;
		m_points[59][0] = 0.970622428605301632;
		m_points[59][1] = 0.029377571394698368;
		m_points[59][2] = 0.676951407298315067;
		m_points[60][0] = 0.970622428605301632;
		m_points[60][1] = 0.323048592701684933;
		m_points[60][2] = 0.029377571394698368;
		m_points[61][0] = 0.970622428605301632;
		m_points[61][1] = 0.323048592701684933;
		m_points[61][2] = 0.970622428605301632;
		m_points[62][0] = 0.970622428605301632;
		m_points[62][1] = 0.676951407298315067;
		m_points[62][2] = 0.029377571394698368;
		m_points[63][0] = 0.970622428605301632;
		m_points[63][1] = 0.676951407298315067;
		m_points[63][2] = 0.970622428605301632;
		m_points[64][0] = 0.970622428605301632;
		m_points[64][1] = 0.970622428605301632;
		m_points[64][2] = 0.323048592701684933;
		m_points[65][0] = 0.970622428605301632;
		m_points[65][1] = 0.970622428605301632;
		m_points[65][2] = 0.676951407298315067;
		m_points[66][0] = 0.017450167243644869;
		m_points[66][1] = 0.274600032442745285;
		m_points[66][2] = 0.274600032442745285;
		m_points[67][0] = 0.017450167243644869;
		m_points[67][1] = 0.274600032442745285;
		m_points[67][2] = 0.725399967557254715;
		m_points[68][0] = 0.017450167243644869;
		m_points[68][1] = 0.725399967557254715;
		m_points[68][2] = 0.274600032442745285;
		m_points[69][0] = 0.017450167243644869;
		m_points[69][1] = 0.725399967557254715;
		m_points[69][2] = 0.725399967557254715;
		m_points[70][0] = 0.274600032442745285;
		m_points[70][1] = 0.017450167243644869;
		m_points[70][2] = 0.274600032442745285;
		m_points[71][0] = 0.274600032442745285;
		m_points[71][1] = 0.017450167243644869;
		m_points[71][2] = 0.725399967557254715;
		m_points[72][0] = 0.274600032442745285;
		m_points[72][1] = 0.274600032442745285;
		m_points[72][2] = 0.017450167243644869;
		m_points[73][0] = 0.274600032442745285;
		m_points[73][1] = 0.274600032442745285;
		m_points[73][2] = 0.982549832756355131;
		m_points[74][0] = 0.274600032442745285;
		m_points[74][1] = 0.725399967557254715;
		m_points[74][2] = 0.017450167243644869;
		m_points[75][0] = 0.274600032442745285;
		m_points[75][1] = 0.725399967557254715;
		m_points[75][2] = 0.982549832756355131;
		m_points[76][0] = 0.274600032442745285;
		m_points[76][1] = 0.982549832756355131;
		m_points[76][2] = 0.274600032442745285;
		m_points[77][0] = 0.274600032442745285;
		m_points[77][1] = 0.982549832756355131;
		m_points[77][2] = 0.725399967557254715;
		m_points[78][0] = 0.725399967557254715;
		m_points[78][1] = 0.017450167243644869;
		m_points[78][2] = 0.274600032442745285;
		m_points[79][0] = 0.725399967557254715;
		m_points[79][1] = 0.017450167243644869;
		m_points[79][2] = 0.725399967557254715;
		m_points[80][0] = 0.725399967557254715;
		m_points[80][1] = 0.274600032442745285;
		m_points[80][2] = 0.017450167243644869;
		m_points[81][0] = 0.725399967557254715;
		m_points[81][1] = 0.274600032442745285;
		m_points[81][2] = 0.982549832756355131;
		m_points[82][0] = 0.725399967557254715;
		m_points[82][1] = 0.725399967557254715;
		m_points[82][2] = 0.017450167243644869;
		m_points[83][0] = 0.725399967557254715;
		m_points[83][1] = 0.725399967557254715;
		m_points[83][2] = 0.982549832756355131;
		m_points[84][0] = 0.725399967557254715;
		m_points[84][1] = 0.982549832756355131;
		m_points[84][2] = 0.274600032442745285;
		m_points[85][0] = 0.725399967557254715;
		m_points[85][1] = 0.982549832756355131;
		m_points[85][2] = 0.725399967557254715;
		m_points[86][0] = 0.982549832756355131;
		m_points[86][1] = 0.274600032442745285;
		m_points[86][2] = 0.274600032442745285;
		m_points[87][0] = 0.982549832756355131;
		m_points[87][1] = 0.274600032442745285;
		m_points[87][2] = 0.725399967557254715;
		m_points[88][0] = 0.982549832756355131;
		m_points[88][1] = 0.725399967557254715;
		m_points[88][2] = 0.274600032442745285;
		m_points[89][0] = 0.982549832756355131;
		m_points[89][1] = 0.725399967557254715;
		m_points[89][2] = 0.725399967557254715;

		m_weights[0] =  0.025309634201600024;
		m_weights[1] =  0.025309634201600024;
		m_weights[2] =  0.025309634201600024;
		m_weights[3] =  0.025309634201600024;
		m_weights[4] =  0.025309634201600024;
		m_weights[5] =  0.025309634201600024;
		m_weights[6] =  0.018149918232514462;
		m_weights[7] =  0.018149918232514462;
		m_weights[8] =  0.018149918232514462;
		m_weights[9] =  0.018149918232514462;
		m_weights[10] =  0.018149918232514462;
		m_weights[11] =  0.018149918232514462;
		m_weights[12] =  0.018149918232514462;
		m_weights[13] =  0.018149918232514462;
		m_weights[14] =  0.018149918232514462;
		m_weights[15] =  0.018149918232514462;
		m_weights[16] =  0.018149918232514462;
		m_weights[17] =  0.018149918232514462;
		m_weights[18] =  0.026999005656871141;
		m_weights[19] =  0.026999005656871141;
		m_weights[20] =  0.026999005656871141;
		m_weights[21] =  0.026999005656871141;
		m_weights[22] =  0.026999005656871141;
		m_weights[23] =  0.026999005656871141;
		m_weights[24] =  0.026999005656871141;
		m_weights[25] =  0.026999005656871141;
		m_weights[26] =  0.014692293494557035;
		m_weights[27] =  0.014692293494557035;
		m_weights[28] =  0.014692293494557035;
		m_weights[29] =  0.014692293494557035;
		m_weights[30] =  0.014692293494557035;
		m_weights[31] =  0.014692293494557035;
		m_weights[32] =  0.014692293494557035;
		m_weights[33] =  0.014692293494557035;
		m_weights[34] =  0.005580489009853655;
		m_weights[35] =  0.005580489009853655;
		m_weights[36] =  0.005580489009853655;
		m_weights[37] =  0.005580489009853655;
		m_weights[38] =  0.005580489009853655;
		m_weights[39] =  0.005580489009853655;
		m_weights[40] =  0.005580489009853655;
		m_weights[41] =  0.005580489009853655;
		m_weights[42] =  0.002826787017352736;
		m_weights[43] =  0.002826787017352736;
		m_weights[44] =  0.002826787017352736;
		m_weights[45] =  0.002826787017352736;
		m_weights[46] =  0.002826787017352736;
		m_weights[47] =  0.002826787017352736;
		m_weights[48] =  0.002826787017352736;
		m_weights[49] =  0.002826787017352736;
		m_weights[50] =  0.002826787017352736;
		m_weights[51] =  0.002826787017352736;
		m_weights[52] =  0.002826787017352736;
		m_weights[53] =  0.002826787017352736;
		m_weights[54] =  0.002826787017352736;
		m_weights[55] =  0.002826787017352736;
		m_weights[56] =  0.002826787017352736;
		m_weights[57] =  0.002826787017352736;
		m_weights[58] =  0.002826787017352736;
		m_weights[59] =  0.002826787017352736;
		m_weights[60] =  0.002826787017352736;
		m_weights[61] =  0.002826787017352736;
		m_weights[62] =  0.002826787017352736;
		m_weights[63] =  0.002826787017352736;
		m_weights[64] =  0.002826787017352736;
		m_weights[65] =  0.002826787017352736;
		m_weights[66] =  0.007680249262229417;
		m_weights[67] =  0.007680249262229417;
		m_weights[68] =  0.007680249262229417;
		m_weights[69] =  0.007680249262229417;
		m_weights[70] =  0.007680249262229417;
		m_weights[71] =  0.007680249262229417;
		m_weights[72] =  0.007680249262229417;
		m_weights[73] =  0.007680249262229417;
		m_weights[74] =  0.007680249262229417;
		m_weights[75] =  0.007680249262229417;
		m_weights[76] =  0.007680249262229417;
		m_weights[77] =  0.007680249262229417;
		m_weights[78] =  0.007680249262229417;
		m_weights[79] =  0.007680249262229417;
		m_weights[80] =  0.007680249262229417;
		m_weights[81] =  0.007680249262229417;
		m_weights[82] =  0.007680249262229417;
		m_weights[83] =  0.007680249262229417;
		m_weights[84] =  0.007680249262229417;
		m_weights[85] =  0.007680249262229417;
		m_weights[86] =  0.007680249262229417;
		m_weights[87] =  0.007680249262229417;
		m_weights[88] =  0.007680249262229417;
		m_weights[89] =  0.007680249262229417;
		break;

	default: assert(0 && "Order not availabile. Can not construct GaussQuadrature.\n");
	}
}

template <>
bool RegisterQuadratureRule(QuadratureRuleProvider<ReferenceHexahedron>& factory)
{
	static GaussQuadrature<ReferenceHexahedron> gaussQuadratureReferenceHexahedron_2(2);
	static GaussQuadrature<ReferenceHexahedron> gaussQuadratureReferenceHexahedron_3(3);
	static GaussQuadrature<ReferenceHexahedron> gaussQuadratureReferenceHexahedron_5(5);
	static GaussQuadrature<ReferenceHexahedron> gaussQuadratureReferenceHexahedron_7(7);
	static GaussQuadrature<ReferenceHexahedron> gaussQuadratureReferenceHexahedron_8(8);
	static GaussQuadrature<ReferenceHexahedron> gaussQuadratureReferenceHexahedron_9(9);
	static GaussQuadrature<ReferenceHexahedron> gaussQuadratureReferenceHexahedron_11(11);

	bool success = true;
	success &= factory.register_rule(gaussQuadratureReferenceHexahedron_2);
	success &= factory.register_rule(gaussQuadratureReferenceHexahedron_3);
	success &= factory.register_rule(gaussQuadratureReferenceHexahedron_5);
	success &= factory.register_rule(gaussQuadratureReferenceHexahedron_7);
	success &= factory.register_rule(gaussQuadratureReferenceHexahedron_8);
	success &= factory.register_rule(gaussQuadratureReferenceHexahedron_9);
	success &= factory.register_rule(gaussQuadratureReferenceHexahedron_11);
	return success;
}


}; // namespace ug

/*
 // register quadratures at factory
namespace {
using namespace ug;

template <>
std::vector<const QuadratureRule<ReferenceHexahedron>* > QuadratureRuleProvider<ReferenceHexahedron>::m_rules =
	std::vector<const QuadratureRule<ReferenceHexahedron>* >();

};
*/
