//  This file is parsed from UG 3.9.
//  It provides the Gauss Quadratures for a reference prism.


#include "../quadrature.h"
#include "gauss_quad_prism.h"
#include "common/util/provider.h"

namespace ug{

template <>
number GaussQuadBase<GaussQuadrature<ReferencePrism, 0>, 3, 0, 6>::m_vWeight[6] =
{
0.5 * 0.16666666666666666000000000000000,
0.5 * 0.16666666666666666000000000000000,
0.5 * 0.16666666666666666000000000000000,
0.5 * 0.16666666666666666000000000000000,
0.5 * 0.16666666666666666000000000000000,
0.5 * 0.16666666666666666000000000000000
};

template <>
MathVector<3> GaussQuadBase<GaussQuadrature<ReferencePrism, 0>, 3, 0, 6>::m_vPoint[6] =
{
MathVector<3>(0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000),
MathVector<3>(1.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000),
MathVector<3>(0.00000000000000000000000000000000, 1.00000000000000000000000000000000, 0.00000000000000000000000000000000),
MathVector<3>(0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 1.00000000000000000000000000000000),
MathVector<3>(1.00000000000000000000000000000000, 0.00000000000000000000000000000000, 1.00000000000000000000000000000000),
MathVector<3>(0.00000000000000000000000000000000, 1.00000000000000000000000000000000, 1.00000000000000000000000000000000)
};

template <>
number GaussQuadBase<GaussQuadrature<ReferencePrism, 2>, 3, 2, 6>::m_vWeight[6] =
{
0.5 * 0.16666666666666666000000000000000,
0.5 * 0.16666666666666666000000000000000,
0.5 * 0.16666666666666666000000000000000,
0.5 * 0.16666666666666666000000000000000,
0.5 * 0.16666666666666666000000000000000,
0.5 * 0.16666666666666666000000000000000
};

template <>
MathVector<3> GaussQuadBase<GaussQuadrature<ReferencePrism, 2>, 3, 2, 6>::m_vPoint[6] =
{
MathVector<3>(0.66666666666666666000000000000000, 0.16666666666666666000000000000000, 0.21132486540518700000000000000000),
MathVector<3>(0.16666666666666666000000000000000, 0.66666666666666666000000000000000, 0.21132486540518700000000000000000),
MathVector<3>(0.16666666666666666000000000000000, 0.16666666666666666000000000000000, 0.21132486540518700000000000000000),
MathVector<3>(0.66666666666666666000000000000000, 0.16666666666666666000000000000000, 0.78867513459481300000000000000000),
MathVector<3>(0.16666666666666666000000000000000, 0.66666666666666666000000000000000, 0.78867513459481300000000000000000),
MathVector<3>(0.16666666666666666000000000000000, 0.16666666666666666000000000000000, 0.78867513459481300000000000000000)
};




template <>
FlexGaussQuadrature<ReferencePrism>::FlexGaussQuadrature(int order)
{
	switch(order)
	{
	case 0:
		const static GaussQuadrature<ReferencePrism, 0>& q0 
			= Provider<GaussQuadrature<ReferencePrism, 0> >::get();

		m_order = q0.order();
		m_numPoints = q0.size();
		m_pvPoint = q0.points();
		m_pvWeight = q0.weights();
		break;

	case 1:
	case 2:
		const static GaussQuadrature<ReferencePrism, 2>& q2 
			= Provider<GaussQuadrature<ReferencePrism, 2> >::get();

		m_order = q2.order();
		m_numPoints = q2.size();
		m_pvPoint = q2.points();
		m_pvWeight = q2.weights();
		break;

	default: UG_THROW("Order "<<order<<" not available for GaussQuadrature of prism.");
	}
}
}; // namespace ug

