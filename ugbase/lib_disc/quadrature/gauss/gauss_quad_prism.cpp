//  This file is parsed from UG 3.9.
//  It provides the Gauss Quadratures for a reference prism.


#include "../quadrature.h"
#include "gauss_quad_prism.h"

namespace ug{

template <>
number GaussQuadBase<GaussQuadrature<ReferencePrism, 0>, 3, 0, 6>::m_vWeight[6] =
{
0.5 * 0.16666666666666666000000000000000,
0.5 * 0.16666666666666666000000000000000,
0.5 * 0.16666666666666666000000000000000,
0.5 * 0.16666666666666666000000000000000,
0.5 * 0.16666666666666666000000000000000,
0.5 * 0.16666666666666666000000000000000
};

template <>
MathVector<3> GaussQuadBase<GaussQuadrature<ReferencePrism, 0>, 3, 0, 6>::m_vPoint[6] =
{
MathVector<3>(0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000),
MathVector<3>(1.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000),
MathVector<3>(0.00000000000000000000000000000000, 1.00000000000000000000000000000000, 0.00000000000000000000000000000000),
MathVector<3>(0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 1.00000000000000000000000000000000),
MathVector<3>(1.00000000000000000000000000000000, 0.00000000000000000000000000000000, 1.00000000000000000000000000000000),
MathVector<3>(0.00000000000000000000000000000000, 1.00000000000000000000000000000000, 1.00000000000000000000000000000000)
};

template <>
number GaussQuadBase<GaussQuadrature<ReferencePrism, 2>, 3, 2, 6>::m_vWeight[6] =
{
0.5 * 0.16666666666666666000000000000000,
0.5 * 0.16666666666666666000000000000000,
0.5 * 0.16666666666666666000000000000000,
0.5 * 0.16666666666666666000000000000000,
0.5 * 0.16666666666666666000000000000000,
0.5 * 0.16666666666666666000000000000000
};

template <>
MathVector<3> GaussQuadBase<GaussQuadrature<ReferencePrism, 2>, 3, 2, 6>::m_vPoint[6] =
{
MathVector<3>(0.66666666666666666000000000000000, 0.16666666666666666000000000000000, 0.21132486540518700000000000000000),
MathVector<3>(0.16666666666666666000000000000000, 0.66666666666666666000000000000000, 0.21132486540518700000000000000000),
MathVector<3>(0.16666666666666666000000000000000, 0.16666666666666666000000000000000, 0.21132486540518700000000000000000),
MathVector<3>(0.66666666666666666000000000000000, 0.16666666666666666000000000000000, 0.78867513459481300000000000000000),
MathVector<3>(0.16666666666666666000000000000000, 0.66666666666666666000000000000000, 0.78867513459481300000000000000000),
MathVector<3>(0.16666666666666666000000000000000, 0.16666666666666666000000000000000, 0.78867513459481300000000000000000)
};




template <>
FlexGaussQuadrature<ReferencePrism>::FlexGaussQuadrature(int order)
{
	switch(order)
	{
	case 0:
		m_order = GaussQuadrature<ReferencePrism, 0>::order();
		m_numPoints = GaussQuadrature<ReferencePrism, 0>::size();
		m_pvPoint = GaussQuadrature<ReferencePrism, 0>::points();
		m_pvWeight = GaussQuadrature<ReferencePrism, 0>::weights();
		break;

	case 1:
	case 2:
		m_order = GaussQuadrature<ReferencePrism, 2>::order();
		m_numPoints = GaussQuadrature<ReferencePrism, 2>::size();
		m_pvPoint = GaussQuadrature<ReferencePrism, 2>::points();
		m_pvWeight = GaussQuadrature<ReferencePrism, 2>::weights();
		break;

	default: UG_THROW("Order "<<order<<" not available for GaussQuadrature of prism.");
	}
}
}; // namespace ug

