#!/bin/bash
######################################################################
# ugcomplete
#-------------------------------------------------------------------
# author: Stefan Grein, Martin Rupp
######################################################################


######################################################################
# ugshell_complete is able to complete ugshell:
# 1. -outproc -ex -noquit -noterm -logtofile
# 2. files
# 3. after -ex , completion is only to .lua files, and completion of files in the ug4/apps part, 
#    so for example ugshell -ex conv<tab>
# 4. when -ex <luascript> is found in the command line, a sed script is search for util.GetParam("-numRefs") 
#    and the like, so you get a list of accepted command line parameters.
# 
# to use the completion, set UG4_ROOT and source ug4/shell/scripts/ugcomplete or ugbash
ugshell_complete() {
  	local word="${COMP_WORDS[COMP_CWORD]}"
  	local i=0
	local filename  
	local b

	while read line; do
		COMPREPLY[i++]=$line
	done < <(compgen -W "-outproc -ex -noquit -noterm -logtofile" -- $word)

  if [ ${COMP_WORDS[COMP_CWORD-1]} = "-ex" ]; then 
  	while read line; do
  		[[ -d $line ]] && COMPREPLY[i++]=`echo $line/ | sed -n "s?$UG4_ROOT/apps/??p"`;
		[[ "${line##*.}" = "lua" ]] && COMPREPLY[i++]=`echo $line | sed -n "s?$UG4_ROOT/apps/??p"`
  	done < <(compgen -f -- "$UG4_ROOT/apps/$word")
  elif [ ${COMP_WORDS[COMP_CWORD-1]} = "-grid" ]; then 
  	while read line; do
  		[[ -d $line ]] && COMPREPLY[i++]=`echo $line | sed -n "s?$UG4_ROOT/data/grids/??p"`;
		[[ "${line##*.}" = "ugx" ]] && COMPREPLY[i++]=`echo $line | sed -n "s?$UG4_ROOT/data/grids/??p"`
  	done < <(compgen -f -- "$UG4_ROOT/data/grids/$word")  	
  else
	while read line; do 
	COMPREPLY[i++]=$line
	done < <(compgen -f -- "$word")  

  	for (( c=0; c<COMP_CWORD; c++ ))
  	do
  		if [ "${COMP_WORDS[$c]}" = "-ex" ]; then
	  		if [ -e ${COMP_WORDS[c+1]} ]; then
	  			filename=${COMP_WORDS[c+1]}
	  		elif [ -e $UG4_ROOT/apps/${COMP_WORDS[c+1]} ]; then
	  			filename=$UG4_ROOT/apps/${COMP_WORDS[c+1]}
	  		else
	  			continue
	  		fi
	  		echo $word | grep '^-[a-zA-Z0-9_]*$' > /dev/null
	  		if [[ $? == 0 ]]; then
	  			while read line; do
	  				echo $line | grep '^-[a-zA-Z0-9_]*$' > /dev/null
	  				if [[ $? == 0 ]]; then
		  				b="0"	  			
	  					for (( j=0; j<i; j++ ))
	  					do
		  					if [ ${COMPREPLY[j]} = $line ]; then
	  							b="1"
	  						fi
	  					done
		  				if [ $b = "0" ]; then
	  			 			COMPREPLY[i++]="$line";
	  					fi
	  				fi		  				  			
	 			done < <(cat $filename | sed -n 's/.*util.[A-Za-z]*[ \t]*([ \t]*"\('$word'[^"]*\)".*/\1/p')
	 		fi
	 		break
	  	fi
		done
	fi
}

######################################################################
# ugshell_complete_gdb 
#-----------------------
# bash completion when using gdb --args ugshell
#
ugshell_complete_gdb()
{
	for (( c=0; c<COMP_CWORD; c++ ))
  	do
  		if [ "${COMP_WORDS[$c]}" = "--args" ] && [ "${COMP_WORDS[$c+1]}" = "ugshell" ]; then
  			ugshell_complete
  		fi
  	done
}

######################################################################
# ugshell_complete_ugsubmit 
#---------------------------
# bash completion when using ugsubmit <params> --- ugshell 
#
ugshell_complete_ugsubmit()
{
	for (( c=0; c<COMP_CWORD; c++ ))
  	do
  		if [ "${COMP_WORDS[$c]}" = "---" ] && [ -e ${COMP_WORDS[$c+1]} ] && [ `basename ${COMP_WORDS[$c+1]}` = "ugshell" ]; then
  			ugshell_complete
  		fi
  	done
}

######################################################################
# ugshell_complete_external 
#---------------------------
# bash completion when using mpirun -np 4 ugshell 
#
ugshell_complete_external()
{
	for (( c=0; c<=COMP_CWORD; c++ ))
  	do
  		if [ -e ${COMP_WORDS[$c]} ] && [ `basename ${COMP_WORDS[$c]}` = "ugshell" ]; then
  			ugshell_complete
  		fi
  	done
}

# ugshell completion
complete -o plusdirs -F ugshell_complete -o nospace ugshell

# gdb completion
complete -W "--args" -F ugshell_complete_gdb -o nospace gdb

# mpirun completion
complete -W "-np" -F ugshell_complete_external -o nospace mpirun

# ugsubmit completion
complete -W "-test -nppn -cluster -name -walltime -email -mail-start -mail-end -mail-error -mail-all -verbose -tail -i -dir -queue" \
 -F ugshell_complete_ugsubmit -o nospace ugsubmit


######################################################################
# cmake completion

CMAKE_COMPLETITIONS="-DCMAKE_TOOLCHAIN_FILE= -DCMAKE_C_COMPILER= -DCMAKE_CXX_COMPILER="
complete -W "$CMAKE_COMPLETITIONS" -o default -o nospace cmake

######################################################################
# ugcmake completion
# ugcmake is just an alias for cmake

alias ugcmake=cmake

UGCMAKE_INTERNAL="-DBUILTIN_BLAS= -DBUILTIN_LAPACK= -DDEBUG_FORMAT="

# create this list with
# cat $UG4_ROOT/debug/CMakeCache.txt | sed -n 's/^\([^/#][^:]*\):[^I].*/-D\1= \\/p'
complete -W "\
-DBLAS= \
-DBLAS_INCLUDE_PATH= \
-DBLAS_LIBRARIES= \
-DBUILTIN_BLAS= \
-DBUILTIN_LAPACK= \
-DBUILTIN_MPI= \
-DBiogas= \
-DCMAKE_USE_RELATIVE_PATHS= \
-DCMAKE_VERBOSE_MAKEFILE= \
-DCOMPILE_INFO= \
-DCPU= \
-DCXX11= \
-DDEBUG= \
-DDEBUG_FORMAT= \
-DDEBUG_LOGS= \
-DDIM= \
-DEMBEDDED_PLUGINS= \
-DElementQualityStatistics= \
-DGridHierarchySmoothing= \
-DHLIBPRO= \
-DHYPRE= \
-DINTERNAL_BOOST= \
-DLAPACK= \
-DLAPACK_INCLUDE_PATH= \
-DLAPACK_LIBRARIES= \
-DLevelSet= \
-DLinearElastoPlasticity= \
-DLinearElastoPlasticity_LIB_DEPENDS= \
-DMETIS= \
-DMembranePotentialMapping= \
-DNavierStokes= \
-DNeuronPlugin= \
-DNonlinearElastoPlasticity= \
-DOPENMP= \
-DPARALLEL= \
-DPARMETIS= \
-DPCL_DEBUG_BARRIER= \
-DPOSIX= \
-DPRECISION= \
-DPROFILE= \
-DPROFILER= \
-DPROFILE_BRIDGE= \
-DPROFILE_PCL= \
-DPlasmaMembrane= \
-DReceptorKinetic= \
-DSHELLTYPE= \
-DSTATIC= \
-DSample= \
-DStructuredGrid= \
-DTARGET= \
-DTETGEN= \
-DTKDGenerator= \
-DTemplate= \
-DVoltageDependentChannelsPlugin= \
-DVoltageGatedChannels= \
-Damg= \
-DcalciumDynamics= \
-Dd3f= \
-Dfile_cmd= \
-Dug4_LIB_DEPENDS= \
$CMAKE_COMPLETITIONS $UGCMAKE_INTERNAL"  -o default -o nospace ugcmake



