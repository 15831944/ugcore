#!/bin/bash
######################################################################
# ugcomplete 1.0
#-------------------------------------------------------------------
# author: Stefan Grein, Martin Rupp
######################################################################


######################################################################
# ugshell_complete is able to complete ugshell:
# 1. -outproc -ex -noquit -noterm -logtofile
# 2. files
# 3. after -ex , completion is only to .lua files, and completion of files in the ug4/apps part, 
#    so for example ugshell -ex conv<tab>
# 4. when -ex <luascript> is found in the command line, a sed script is search for util.GetParam("-numRefs") 
#    and the like, so you get a list of accepted command line parameters.
# 
# to use the completion, set UG4_ROOT and source ug4/shell/scripts/ugcomplete or ugbash
ugshell_complete() {
  	local word="${COMP_WORDS[COMP_CWORD]}"
  	local i=0
	local filename  
	local b

  if [ ${COMP_WORDS[COMP_CWORD-1]} = "-ex" ]; then 
  	while read line; do
  		[[ -d $line ]] && COMPREPLY[i++]=`echo $line | sed -n "s?$UG4_ROOT/apps/??p"`;
		[[ "${line##*.}" = "lua" ]] && COMPREPLY[i++]=`echo $line | sed -n "s?$UG4_ROOT/apps/??p"`
  	done < <(compgen -f -- "$UG4_ROOT/apps/$word")
  	while read line; do
		[[ -d $line ]] && COMPREPLY[i++]=$line
		[[ "${line##*.}" = "lua" ]] && COMPREPLY[i++]=$line
  	done < <(compgen -f -- "$word")
  else
	while read line; do 
	COMPREPLY[i++]=$line
	done < <(compgen -f -- "$word")  

  	for (( c=0; c<COMP_CWORD; c++ ))
  	do
  		if [ "${COMP_WORDS[$c]}" = "-ex" ]; then
	  		
	  		if [ -e ${COMP_WORDS[c+1]} ]; then
	  			filename=${COMP_WORDS[c+1]}
	  		elif [ -e $UG4_ROOT/apps/${COMP_WORDS[c+1]} ]; then
	  			filename=$UG4_ROOT/apps/${COMP_WORDS[c+1]}
	  		else
	  			continue
	  		fi
	  		while read line; do
	  			b="0"	  			
	  			for (( j=0; j<i; j++ ))
	  			do
	  				if [ ${COMPREPLY[j]} = $line ]; then
	  					b="1"
	  				fi
	  			done
	  			
	  			if [ $b = "0" ]; then
	  			 COMPREPLY[i++]="$line";
	  			fi	  				  			
	 		done < <(cat $filename | sed -n 's/.*util.\([A-Za-z]*\)("\('$word'[^"]*\)".*/\2/p')
	  	fi
		done
	fi
}

complete -W "-outproc -ex -noquit -noterm -logtofile" \
	-o plusdirs -F ugshell_complete -o nospace ugshell

######################################################################

CMAKE_COMPLETITIONS="-DCMAKE_TOOLCHAIN_FILE= -DCMAKE_C_COMPILER= -DCMAKE_CXX_COMPILER="
complete -W "$CMAKE_COMPLETITIONS" -o default -o nospace cmake

######################################################################
alias ugcmake=cmake

UGCMAKE_INTERNAL="-DBUILTIN_BLAS= -DBUILTIN_LAPACK= -DDEBUG_FORMAT="

# create this list with
# cat $UG4_ROOT/debug/CMakeCache.txt | sed -n 's/^\([^/#][^:]*\):[^I].*/-D\1= \\/p'
complete -W "\
-DBLAS= \
-DBUILTIN_BLAS= \
-DBUILTIN_LAPACK= \
-DBUILTIN_MPI= \
-DBiogas= \
-DCPU= \
-DCXX11= \
-DDEBUG= \
-DDEBUG_FORMAT= \
-DDEBUG_LOGS= \
-DDIM= \
-DEMBED_SVN_REV= \
-DElementQualityStatistics= \
-DHLIBPRO= \
-DHYPRE= \
-DINTERNAL_BOOST= \
-DLAPACK= \
-DLevelSet= \
-DLevelSetPlugin= \
-DLinearElastoPlasticity= \
-DLinearElastoPlasticity_LIB_DEPENDS= \
-DMETIS= \
-DMembranePotentialMappingPlugin= \
-DNavierStokes= \
-DNavierStokesPlugin= \
-DNeuronPlugin= \
-DNonlinearElastoPlasticity= \
-DOPENMP= \
-DPARALLEL= \
-DPARMETIS= \
-DPCL_DEBUG_BARRIER= \
-DPRECISION= \
-DPROFILER= \
-DPROFILE_BRIDGE= \
-DPROFILE_PCL= \
-DReceptorKinetic= \
-DSHELLTYPE= \
-DSTATIC= \
-DSample= \
-DSamplePlugin= \
-DSamplePlugin_LIB_DEPENDS= \
-DTARGET= \
-DTETGEN= \
-DTKDGenerator= \
-DTemplate= \
-DVoltageDependentChannelsPlugin= \
-Dd3f= \
-Dfile_cmd= \
-DlibReadline= \
-Dplasma_membrane= \
$CMAKE_COMPLETITIONS $UGCMAKE_INTERNAL"  -o default -o nospace ugcmake



