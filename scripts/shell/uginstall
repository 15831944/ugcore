#!/bin/bash
######################################################################
# uginstall 0.1
#-------------------------------------------------------------------
# created by Martin Rupp 31.05.2012
# mail: martin.rupp@gcsc.uni-frankfurt.de
######################################################################

#which wget &> /dev/null
#if [ $? == 0 ]; then
	#mywget=wget
#else
	#mywget="curl -O"
#fi

scriptname=$0;		  # name of script
scriptpath=`dirname $scriptname`
source $scriptpath/uginstall_config

cd 
if [ ! -e local ]; then mkdir local; fi
cd local
LOCAL_DIR=`pwd`

my_download () 
{
	local extractedDir=$1
	local renameDir=$2
	local location=$3
	local filename=$4
	
	echo "extractedDir = $extractedDir, renameDir = $renameDir, location = $location, filename =$filename" 
 	
	if [ -e $renameDir ]; then
		echo "$name already downloaded and extracted" 
	else
		if [ -e $filename ]; then
			echo "$filename already downloaded"
		else 
			echo "Downloading $filename..."

			if [ -e $filename.part ]; then rm $filename.part; fi

			which wget &> /dev/null
			if [ $? == 0 ]; then
				wget $location -O $filename.part
			else
				curl $location -o $filename.part
			fi
			if [ ! $? == 0 ]; then 
				echo "Error downloading from $location."; 
				rm $filename.part
				exit;
			fi
			mv $filename.part $filename
			echo "done."
		fi
		echo "Extracting $filename..."
		case $filename in
		*.tar.bz2)	tar xjf $filename ;;
		*.tar.gz)	tar xzf $filename ;;
		*.tar.xz)	tar Jxf $filename ;;
		*.bz2)		bunzip2 $filename ;;
		*.rar)		unrar x $filename ;;
		*.gz)		gunzip $filename ;;
		*.tar)		tar xf $filename ;;
		*.tbz2)		tar xjf $filename ;;
		*.tgz)		tar xzf $filename ;;
		*.zip)		unzip $filename ;;
		*.Z)		uncompress $filename ;;
		*.7z)		7z x $filename ;;
		*)		echo "don't know how to open '$filename'..." ;;
		esac
		mv $extractedDir $renameDir
	fi
 }

# installing with build not in source dir
# downloads file from $location, saves is as $subdir/$version/$filename
# extracts it to $subdir/$version/src
# and runs there to rest of the commands 
# (mostly ../src/configure --prefix=$HOME/local/$subdir/$version ; make ; make install )
my_install_external_build()
{
	local subdir=$1
	local version=$2
	local location=$3
	local filename=$4
	local extractedDir=$5
	echo "installing $subdir"
	shift 5
	# $6+ are commands executed in $subdir/$version/build  
	echo "subdir = $subdir, version = $version, location = $location, filename =$filename, extractedDir = $extractedDir, command = $*"
	
	if [ -e $subdir/$version/installed ]; then
		echo "$subdir $version already installed."
	else
		if [ ! -e $subdir ]; then mkdir $subdir; fi
		cd $subdir
		# in local/subdir
		if [ ! -e $version ]; then mkdir $version; fi
		cd $version
		# in local/subdir/version
				
		#echo "i would download $subdir from $location to $filename with command $command now"
	
		my_download $extractedDir "src" $location $filename		
		if [ ! $? == 0 ]; then echo "Error subdir "src" does not exist in `pwd`?"; exit; fi
		if [ ! -e build ]; then mkdir build; fi		
		cd build
		# in local/subdir/version/build		
		
		
		while (( "$#" )); do
			echo $1
			$1
			if [ ! $? == 0 ]; then echo "Error $1 in `pwd`"; exit; fi					
			shift
		done
		
		echo "$subdir version $version installed!"
		# in local/subdir/version/build
		cd ..
		# in local/subdir/version
		touch installed				
		cd ..
		# in local/subdir
		if [ -e used ]; then rm used; fi
		ln -s $version used
		
		cd $LOCAL_DIR
		
		source $scriptpath/uginstall_config
	fi
}

# installing with build = source dir
# downloads file from $location, saves is as $subdir/$filename
# extracts it to $subdir/$version
# and runs there to rest of the commands 
# (mostly ../src/configure --prefix=$HOME/local/$subdir/$version ; make ; make install )
my_install()
{
	local subdir=$1
	local version=$2
	local location=$3
	local filename=$4
	local extractedDir=$5
	echo "installing $subdir"
	shift 5
	#echo "subdir = $subdir, version = $version, location = $location, filename =$filename, extractedDir = $extractedDir, command = $*"
	
	if [ -e $subdir/$version/installed ]; then
		echo "$subdir $version already installed."
	else
		if [ ! -e $subdir ]; then mkdir $subdir; fi
		cd $subdir
				
		#echo "i would download $subdir from $location to $filename with command $command now"
		my_download $extractedDir $version $location $filename
	
		cd $version
		
		while (( "$#" )); do
			$1
			if [ ! $? == 0 ]; then echo "Error $1 in `pwd`"; exit; fi					
			shift
		done
		
		echo "$subdir version $version installed!"
		# in local/subdir/version
		touch installed				
		cd ..
		# in local/subdir
		if [ -e used ]; then rm used; fi
		ln -s $version used
		
		cd $LOCAL_DIR
		
		source $scriptpath/uginstall_config
	fi
}


install_gmp()
{	
	my_install_external_build \
	gmp 4.3.2 \
	"http://gcc.petsads.us/infrastructure/gmp-4.3.2.tar.bz2" \
	gmp-4.3.2.tar.bz2 gmp-4.3.2 \
	"../src/configure --prefix=$HOME/local/gmp/4.3.2/" make "make install"
}

install_mpfr()
{
	my_install_external_build \
	mpfr 2.4.2 \
	"http://gcc.petsads.us/infrastructure/mpfr-2.4.2.tar.bz2" \
	mpfr-2.4.2.tar.bz2 mpfr-2.4.2 \
	"../src/configure --prefix=$HOME/local/mpfr/2.4.2" make "make install"
}

install_mpc()
{
	install_mpfr
	install_gmp
	
	my_install_external_build \
	mpc 0.8.1 \
	"http://gcc.petsads.us/infrastructure/mpc-0.8.1.tar.gz" \
	mpc-0.8.1.tar.gz mpc-0.8.1 \
	"../src/configure --prefix=$HOME/local/mpc/0.8.1" make "make install"
}

install_doxygen()
{
	my_install \
	doxygen 1.8.1 \
	"http://ftp.stack.nl/pub/users/dimitri/doxygen-1.8.1.src.tar.gz" \
	doxygen-1.8.1.src.tar.gz doxygen-1.8.1 \
	"./configure --prefix $HOME/local/doxygen/1.8.1" make 
}

install_gcc()
{
	install_gmp
	install_mpfr
	install_mpc
	
	CFLAGS="-O3"
	CPPFLAGS="-O3"
	CXXFLAGS="-O3" # -DCHAR_BIT=8
	export CFLAGS
	export CXXFLAGS
	export CPPFLAGS
	
	
	my_install_external_build \
	gcc 4.4.7 \
	"http://gcc.petsads.us/releases/gcc-4.4.7/gcc-4.4.7.tar.gz" \
	gcc-4.4.7.tar.gz gcc-4.4.7 \
	 "../src/configure --prefix=$HOME/local/gcc/4.4.7" make "make install"
}

install_cmake()
{
	my_install_external_build \
	cmake 2.8.6 \
	"http://www.cmake.org/files/v2.8/cmake-2.8.6.tar.gz" \
	cmake-2.8.6.tar.gz cmake-2.8.6 \
	"../src/bootstrap --prefix=$HOME/local/cmake/2.8.6" make "make install"
}

install_openmpi()
{	
	my_install_external_build \
	openmpi 1.6 \
	"http://www.open-mpi.org/software/ompi/v1.6/downloads/openmpi-1.6.tar.gz" \
	openmpi-1.6.tar.gz openmpi-1.6 \
	"../src/configure --prefix=$HOME/local/openmpi/1.6" make "make install"
}

install_gnuplot()
{
	my_install_external_build \
	"gnuplot" "4.6.0"\
	"http://sourceforge.net/projects/gnuplot/files/gnuplot/4.6.0/gnuplot-4.6.0.tar.gz/download?sources=files"\
 	gnuplot-4.6.tar.gz gnuplot-4.6.0 \
 	"../src/configure --prefix=$HOME/local/gnuplot/4.6.0" make "make install"
}

install_GotoBLAS2()
{
	## needs to be compiled with a new version of gfortran. use install_gcc.
	
	my_install \
	GotoBLAS2 "1.13"\
	"http://www.tacc.utexas.edu/documents/13601/b58aeb8c-9d8d-4ec2-b5f1-5a5843b4d47b"\
	GotoBLAS2-1.13.tar.gz GotoBLAS2\
	"./quickbuild.64bit" \	
	"mkdir lib" \
	"cp libgoto2.a lib/" \
	"mkdir include" \
	"cp cblas.h include/"
}

install_ParaView()
{
	my_install \
	ParaView "3.14"\
	"http://www.paraview.org/files/v3.14/ParaView-3.14.1-Linux-32bit.tar.gz"\
	ParaView-3.14.1-Linux-32bit.tar.gz ParaView-3.14.1-Linux-32bit
}



install_clang()
{
	svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm
	cd llvm/tools
	svn co http://llvm.org/svn/llvm-project/cfe/trunk clang
	cd ../projects
	svn co http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt
	cd ..
	mkdir build
	cd build
	../configure --prefix=$HOME/local/llvm --enable-optimized
	make
}

install_all()
{
	install_gcc
	install_cmake
	install_doxygen
	install_gnuplot
	install_GotoBLAS2
	install_openmpi
	install_ParaView
	install_clang
}

print_usage()
{
	echo " $0 0.1"
	echo ""
    	echo " usage:  " $0 " <program>"
	echo "  <program> can be:"
	echo "	all"
	echo "	clang       (=clang+llvm from svn)"
	echo "	cmake       2.8.6                 " `[[ -e cmake/used/installed ]] && echo "(installed)"`
	echo "	doxygen     1.8.1                 " `[[ -e doxygen/used/installed ]] && echo "(installed)"`
	echo "	gcc         4.4                   " `[[ -e gcc/used/installed ]] && echo "(installed)"`
	echo "	gmp         4.3.2                 " `[[ -e gmp/used/installed ]] && echo "(installed)"`
	echo "	gnuplot     4.6.0                 " `[[ -e gnuplot/used/installed ]] && echo "(installed)"`
	echo "	GotoBLAS2   1.13                  " `[[ -e GotoBLAS2/used/installed ]] && echo "(installed)"`
	echo "	mpfr        2.4.2                 "	`[[ -e mpfr/used/installed ]] && echo "(installed)"`
	echo "	mpc         0.8.1                 " `[[ -e mpc/used/installed ]] && echo "(installed)"`
	echo "	OpenMPI     1.6                   " `[[ -e openmpi/used/installed ]] && echo "(installed)"`
	echo "	ParaView    3.14.1-Linux-32bit    " `[[ -e ParaView/used/installed ]] && echo "(installed)"`	
}


case $1 in
	clang) install_clang ;;
	cmake) install_cmake ;;
	doxygen) install_doxygen ;;
	gcc) install_gcc ;;	
	gnuplot) install_gnuplot ;;
	gmp) install_gmp ;;
	GotoBLAS2) install_GotoBLAS2 ;;
	mpc) install_mpc ;;
	mpfr) install_mpfr ;;
	OpenMPI) install_openmpi ;;
	ParaView) install_ParaView ;;
	all) install_all ;;
	*) print_usage ;;
esac
