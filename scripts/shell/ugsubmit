#!/bin/bash
######################################################################
# ugsubmit 0.1
#-------------------------------------------------------------------
# created by Martin Rupp 05.03.2012
# mail: martin.rupp@gcsc.uni-frankfurt.de
# authors: Martin Rupp, Andreas Vogel, Arne Naegel.
#
# ugsubmit is a job submitting script to unify the job schedulers
# on different clusters. Supported Clusters are:
# - cekon , G-CSC Frankfurt (SLURM, salloc)
# - Jugene, Forschungszentrum JÃ¼lich (ll_submit)
# - Hermit, HLRS Stuttgart (qsub, aprun)
# - NecNehalem, HLRS Stuttgart (qsub, mpirun)
# 
# feel free to add more!
#
# usage: see function usage(). quick manual:
# use environment variables e.g. 
# export UGSUBMIT_TYPE=cekon 
# export UGSUBMIT_EMAIL=martin.rupp@gcsc.uni-frankfurt.de
# to start a script running 64 processes:
# ugsubmit 64 --- ugshell -ex laplace.lua -numPreRefs 5 -numRefs 9
# output is then written to ./job.64.(current date)/job.out
# the current job dir is linked to by lastRun
######################################################################

# todo: error on file not found etc.


######################################################################
# set default values
test=false;
nppn=1;
walltime="00:10:00";  # walltime
jobname="job";
scriptname=$0;		  # name of script
execpath=`pwd`;       # execution path of script
execdate=`date`;      # date of execution
verbose=false;

mailStart=false
mailEnd=false
mailError=false
mail=false

tail=false
interactive=false

# Jugene Options
JugeneMode="VN"
JugeneMapfile="TXYZ"
JugeneVerbose=2

# Hermit Options
HermitWorkspace=false

# general PBS Options
pbsMailtype=""

######################################################################
# todo: vielleicht scripts fuer die scheduler auslagern
# todo: different default nppn for clusters
# todo: option -nodir
# todo: interactive mode

echo "ugsubmit 0.1. (c) Goethe-Center for Scientific Computing 2012"

######################################################################
function usage 
{
	echo ""
    echo " usage:  "$scriptname" <npe> [optional Parameters] --- <binary> <arg1> <arg2> ..."
	echo " "
	echo "        <npe>                  : number of processes"
	echo "        <binary>               : the binary"
	echo "        <args>                 : arguments for execution of binary"
	echo ""
	echo " optional Parameters are:"
	echo "        -test                  : do not actually execute, only write scripts (also sets -verbose)"
	echo "        -nppn <nppn>           : number of processes per node (optional, default "$nppn")"
	echo "        -cluster <type>        : cluster to use. see below (or use env. variable UGSUBMIT_TYPE)"
	echo "        -name <jobname>        : a jobname to be used (optional, default \""$jobname"\")"
	echo "        -walltime <hh:mm:ss>   : max walltime for job to run (optional; default is "$walltime")"
	echo "        -email <emailadress>   : emailadress. you can also use the environment variable UGSUBMIT_EMAIL."
	echo "        -mail-start            : mail when job starts"
	echo "        -mail-end              : mail when job ends"
	echo "        -mail-error            : mail on error"
	echo "        -mail-all              : "
	echo "        -verbose               : enable verbose mode"
	echo "        -tail                  : display the output (as tail -f. job runs even if you hit Ctrl-C)"
	echo "        -i                     : interactive (not fully supported)"
	echo " "
	echo " Supported Cluster Types: NecNehalem, Hermit, Jugene, mpi, cekon."
	echo " "
	echo " Jugene Parameters"
	echo "        -Jugene-mode            : VN, DUAL or SMP. Default "$JugeneMode
	echo "        -Jugene-mapfile         : Mapfile. Default "$JugeneMapfile
	echo "        -Jugene-verbose         : Verbose Level. Default "$JugeneVerbose
	echo ""
	echo " Hermit Parameters"
	echo "        -Hermit-workspace       : Use the Hermit Workspace mechanism for I/O."
	echo "                                  https://wickie.hlrs.de/platforms/index.php/Workspace_mechanism"
	echo ""
	echo " descr: The script creates a new folder relative to the current path with the name"
	echo "        '<jobname>.<npe>' (where <npe> is the number of processes. In this new directory"
	echo "        a file names 'info.txt' is created, to identify the job. Then, depending"
	echo "        on the selected cluster type, a shell script is created and submitted to the"
	echo "        job scheduling system. ugsubmit also sets a symbolic link lastRun to the newly"
    echo "        created directory. the file 'jobid' contains the job id."
	echo "        A list of submitted jobs is created in the file 'ugjobs'."
	echo " "
	echo " exported environment variables:"
	echo "        UGS_JOBNAME              : job name"
    echo "        UGS_OUTDIR               : output directory"
    echo "        UGS_NP                   : see <npe>"
    echo "        UGS_NPPN                 : see -nppn"
	echo "        UGS_MYDIR                : the directory ugsubmit is started from"

if [ -z "$UGSUBMIT_TYPE" ]; then
   	echo "UGSUBMIT_TYPE is not set!"
else
	echo "UGSUBMIT_TYPE  = "$UGSUBMIT_TYPE 
fi
if [ -z "$UGSUBMIT_EMAIL" ]; then
	echo "UGSUBMIT_EMAIL is not set!"
else
   	echo "UGSUBMIT_EMAIL = "$UGSUBMIT_EMAIL
fi

    exit 0;
}

######################################################################
# read args

# check that at least 3 args given, else print usage
if [ $# -lt 3 ]; then
   usage
fi

npe=$1;            # number of nodes
shift

while [ true ]
do
	#echo $1
	#echo $2
	if [ $# -eq 0 ]; then
		echo "missing -ex <binary>!"
        exit
	fi
	if [ $1 == "-nppn" ]; then
		nppn=$2		   
		shift 2
	elif [ $1 == "-walltime" ]; then
		walltime=$2
		shift 2
	elif [ $1 == "-name" ]; then
		jobname=$2
		shift 2
	elif [ $1 == "-so" ]; then
		scheduleroptions=$2
		shift 2
	elif [ $1 == "-test" ]; then
		test=true
		verbose=true
		shift 1
	elif [ $1 == "-email" ]; then
		UGSUBMIT_EMAIL=$2
		shift 2
	elif [ $1 == "-cluster" ]; then
		UGSUBMIT_TYPE=$2
		shift 2
	elif [ $1 == "-Jugene-mode" ]; then
		JugeneMode=$2
		shift 2
	elif [ $1 == "-Jugene-mapfile" ]; then
		JugeneMapfile=$2
		shift 2
	elif [ $1 == "-Jugene-verbose" ]; then
		JugeneVerbose=$2
		shift 2
	elif [ $1 == "-mail-error" ]; then
		mailError=true
		mail=true
		pbsMailtype=${pbsMailtype}a
		shift 1
	elif [ $1 == "-mail-end" ]; then
		mailEnd=true
		mail=true
		pbsMailtype=${pbsMailtype}e
		shift 1
	elif [ $1 == "-mail-start" ]; then
		mailStart=true
		mail=true
		pbsMailtype=${pbsMailtype}b		
		shift 1
	elif [ $1 == "-mail-all" ]; then
		mailStart=true
		mailStop=true
		mailError=true
		mail=true
		pbsMailtype="abe"
		shift
	elif [ $1 == "-i" ]; then
		interactive=true
		shift 1
	elif [ $1 == "-verbose" ]; then
		verbose=true
		shift 1
	elif [ $1 == "-tail" ]; then
		tail=true
		shift 1
	elif [ $1 == "-Hermit-workspace" ]; then
		HermitWorkspace=true
		shift 1
	elif [ $1 == "---" ]; then
		shift
		break
	else
		echo "undefined option $1"
		exit
	fi
done

if [ $# -eq 0 ]; then
	echo "missing binary!"
	exit
fi

binary=$1
shift
args=$*

if [ $((npe%nppn)) -ne 0 ]; then
	echo "npe=$npe is not dividable by nppn=$nppn"
	exit
fi

######################################################################

# get path to executable
executable=`which $binary`
if [ -z $executable ]; then
	echo "The binary \"$binary\" could not be found.".
	executable=`which ./$binary`
	exit
fi
if [ ${executable:0:1} = "." ]; then
	executable=$execpath/$binary
fi
nnodes=$((npe/nppn))
#npe=$((nnodes*nppn)); # number of process entities (i.e. num processes)
mydate=$(date "+.%F.%T");
jobname=$jobname.$npe$mydate;


# UGSUBMIT_TYPE
if [ -z "$UGSUBMIT_TYPE" ]; then
   	echo "please set UGSUBMIT_TYPE or specify cluster with -cluster".
   	exit
fi	 

# save processnumber of shell to get a unique ticket
ticket=$$

#create output directory
if [ $HermitWorkspace == true ]; then
	if [ $UGSUBMIT_TYPE == "Hermit" ]; then
		outdir=`ws_allocate $jobname 31`
	else
		echo "Hermit Workspace only on Cluster Hermit, not on cluster=" $UGSUBMIT_TYPE " !"
		exit
	fi
else
	outdir=$execpath/$jobname
	if [ -d $outdir ]; then
		echo "Output directory $outdir already exist. Remove directory or choose other jobname"
		exit 0;
	else
		mkdir $outdir
	fi
fi
echo "Output dir is $outdir"
rm lastRun
ln -s $outdir lastRun

#create info file in output directory
if [ ! -e $outdir/info.txt ]; then
    touch $outdir/info.txt
fi

######################################################################
# info about args read
echo " ------------" >> $outdir/info.txt
echo "  Executing:" >> $outdir/info.txt
echo " ------------" >> $outdir/info.txt
echo " cluster type: "$UGSUBMIT_TYPE >> $outdir/info.txt
echo " script:       "$execpath/$scriptname >> $outdir/info.txt
echo " exec path:    "$execpath >> $outdir/info.txt
echo " date:         "$execdate >> $outdir/info.txt
#echo "" >> $outdir/info.txt
echo " jobname:      "$jobname >> $outdir/info.txt
echo " nnodes:       "$nnodes >> $outdir/info.txt
echo " nppn:         "$nppn >> $outdir/info.txt
echo " npe:          "$npe >> $outdir/info.txt
echo " walltime:     "$walltime >> $outdir/info.txt
echo " executable:   "$executable >> $outdir/info.txt
echo " arguments:    "$args >> $outdir/info.txt
echo " email:        "$UGSUBMIT_EMAIL >> $outdir/info.txt
echo "" >> $outdir/info.txt
echo " output will be written to: "$outdir/ >> $outdir/info.txt
echo "" >> $outdir/info.txt

echo "Job '$jobname' submitted on `date`" >> $outdir/info.txt
echo "Output to:      '$outdir'" >> $outdir/info.txt

if [ $verbose == true ]; then
	cat $outdir/info.txt
fi
#ugjob $UGSUBMIT_EMAIL $jobname $outdir $nnodes $nppn $walltime $executable $args

export UGS_JOBNAME=$jobname
export UGS_OUTDIR=$outdir
export UGS_NP=$npe
export UGS_NPPN=$nppn
export UGS_MYDIR=$execpath

# now call job schedulers

jobid="unknown"

######################################################################
#                     qsub on Hermit / HLRS (aprun)
#        qsub on NecNehalem / NEC Nehalem Cluster / HLRS (mpirun)
#-------------------------------------------------------------------
######################################################################
if [ $UGSUBMIT_TYPE == "Hermit" ] || [ $UGSUBMIT_TYPE == "NecNehalem" ]; then
	echo ""; 
	if [ $UGSUBMIT_TYPE == "NecNehalem" ]; then
		echo "Using qsub on NecNehalem / NEC Nehalem Cluster / HLRS"
		PBSnodes="-l nodes=$nnodes:nehalem:ppn=$nppn"
		qsubrun="mpirun -np $npe $executable $args"
		qsubqueue="-q user"
	else
		echo "Using qsub on Hermit/Cray XE6"
		PBSnodes="-l mppwidth=$npe -l mppnppn=$nppn"
		qsubrun="aprun -n $npe -N $nppn $executable $args"
		qsubqueue=""
	fi
	if [ $interactive == true ]; then
		echo "interactive mode is not supported at the moment"
	fi
	
	pbsMail=""
	if [ $mail == true ]; then 
		if [ -z "$UGSUBMIT_EMAIL" ]; then
			echo "please set UGSUBMIT_EMAIL or specify email with -email".
			exit
		fi	 
		$pbsMail="-M $UGSUBMIT_EMAIL -m $pbsMailtype"
	fi
	
	qsubargs="$qsubqueue -V -N $jobname -o $outdir/job.output -e $outdir/job.error -j oe -S /bin/bash -l walltime=$walltime $PBSnodes $pbsMail"
	
	echo "$qsubrun" >> $outdir/job.output
	echo "qsub $qsubargs" >> $outdir/job.output	
	
	if [ $test == true ]; then
		echo ""
		echo "test. not executing."
		echo $qsubrun
		echo "qsub $qsubargs"
		rm -rf $outdir/
		exit
	fi
	
# creating script file
	cat > $outdir/$jobname.sh << EOF
#!/bin/bash
$qsubrun
EOF

	
#submitting batch job
	cd $outdir	
	jobid=`qsub -q user $qsubargs $outdir/$jobname.sh`
	jobid=`echo $jobid | sed 's/\([0-9]*\).*/\1/'`
		
######################################################################
#                            Jugene
#-------------------------------------------------------------------
# http://www.lrz.de/services/compute/supermuc/loadleveler/
######################################################################
elif [ $UGSUBMIT_TYPE == "Jugene" ]; then
	echo ""; echo "On Jugene, using ll_submit"
	
	MYLDLPATH=/bgsys/drivers/ppcfloor/comm/lib/
	
	if [ $interactive == true ]; then
		echo "interactive mode is not supported at the moment"
	fi

	cat > $outdir/job.sh << EOF
# @ job_name = $jobname
# @ comment = $executable $args
# @ error = $outdir/job.error
# @ output = $outdir/job.output
# @ environment = COPY_ALL
# @ wall_clock_limit = $walltime
EOF
	if [ $mail == true ]; then 
		if [ -z "$UGSUBMIT_EMAIL" ]; then
			echo "please set UGSUBMIT_EMAIL or specify email with -email".
			exit
		fi

		JugeneNotification="never"
		if [ $mailStart == true ]; then
			JugeneNotification="start"
		fi
		if [ $mailEnd == true ]; then
			if [ $JugeneNotification == "never" ]; then
				JugeneNotification="stop"
			else
				JugeneNotification="always"
			fi
		fi
		if [ $mailError == true ]; then
			if [ $JugeneNotification == "never" ]; then
				JugeneNotification="error"
			else
				JugeneNotification="always"
			fi
		fi	 
		
		cat >> $outdir/job.sh << EOF
# @ notification = $JugeneNotification
# @ notify_user = $UGSUBMIT_EMAIL
EOF
	fi
	cat >> $outdir/job.sh << EOF
# @ job_type = bluegene
# @ bg_connection = TORUS
# @ bg_size = $npe
# @ queue
mpirun -np $npe -exe $executable -mode $JugeneMode -mapfile $JugeneMapfile -verbose $JugeneVerbose -env LD_LIBRARY_PATH=$MYLDLPATH -args $args
EOF

	cd $outdir
	echo $outdir/job.sh
	if [ $test == true ]; then
		echo "test. not executing."
		echo $outdir/job.sh ":"
		cat $outdir/job.sh
		rm -rf $outdir/
		exit
	fi
	
#todo: uncomment next line, get jobid=
# ll_submit $outdir/job.sh

######################################################################
#                            mpi
#-------------------------------------------------------------------
# not a real job scheduler, just for completeness and tests
# todo: wait for completion of "jobs"...
######################################################################
elif [ $UGSUBMIT_TYPE == "mpi" ]; then

	echo ""; echo "Using MPI"
	if [ $nppn -ne 1 ]; then
		echo "pure mpi does not support nppn > 1"
		exit
	fi
	cd $outdir
	echo mpirun -np $npe $executable $args
	if [ $test == true ]; then
		echo "test. not executing."
		rm -rf $outdir/
		exit
	fi
	if [ $interactive == true ]; then
		mpirun -np $npe $executable $args
	else
		nohup mpirun -np $npe $executable $args > $outdir/job.output &
	fi
######################################################################
#                           cekon
#-------------------------------------------------------------------
# using SLURM
######################################################################
elif [ $UGSUBMIT_TYPE == "cekon" ]; then
	echo ""; echo "Using SLURM on cekon"
	if [ $nppn -ne 1 ]; then
		echo "cekon does not support nppn > 1"
		exit
	fi

	SlurmMail=""
	if [ $mail == true ]; then 
		if [ -z "$UGSUBMIT_EMAIL" ]; then
			echo "please set UGSUBMIT_EMAIL or specify email with -email".
			exit
		fi

		SlurmNotification="never"
		if [ $mailStart == true ]; then
			SlurmNotification="BEGIN"
		fi
		if [ $mailEnd == true ]; then
			if [ $SlurmNotification == "never" ]; then
				SlurmNotification="END"
			else
				SlurmNotification="ALL"
			fi
		fi
		if [ $mailError == true ]; then
			if [ $SlurmNotification == "never" ]; then
				SlurmNotification="FAIL"
			else
				SlurmNotification="ALL"
			fi
		fi	 
		SlurmMail="--mail-user=$UGSUBMIT_EMAIL --mail-type=$SlurmNotification"
	fi
	cd $outdir
	echo salloc -n $npe $SlurmMail --job-name=$jobname mpirun $executable $args
	if [ $test == true ]; then
		echo "test. not executing."
		rm -rf $outdir/
		exit
	fi
	
	sallocrun="salloc -n $npe $SlurmMail --job-name=$jobname mpirun $executable $args"
	echo "nohup $sallocrun > $outdir/job.output &" >> $outdir/info.txt

	if [ $interactive == true ]; then
		`$sallocrun`
	else
		nohup $sallocrun > $outdir/job.output &
	fi
	sleep 1
	jobid=`cat job.output | sed -n 1p | sed 's/salloc: Granted job allocation \([0-9]*\).*/\1/'`

######################################################################
else
	echo "" 
	echo "ERROR: cluster "$UGSUBMIT_TYPE" is not supported."
	exit
fi

if [ $interactive == false ]; then
	if [ ! -e $execpath/ugjobs ]; then
		echo "JOBID EXECDATE DIRECTORY" > $execpath/ugjobs
	fi	
	echo "$jobid $mydate $outdir" >> $execpath/ugjobs
	echo "Received job id: $jobid" >> $outdir/info.txt
	echo "Received job id: $jobid"

	if [ $tail == true ]; then
		touch $outdir/job.output
		sleep 1; tail -f $outdir/job.output
	fi
fi