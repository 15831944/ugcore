/*
 * Copyright (c) 2012-2013:  G-CSC, Goethe University Frankfurt
 * Author: Martin Rupp
 * 
 * This file is part of UG4.
 * 
 * UG4 is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License version 3 (as published by the
 * Free Software Foundation) with the following additional attribution
 * requirements (according to LGPL/GPL v3 §7):
 * 
 * (1) The following notice must be displayed in the Appropriate Legal Notices
 * of covered and combined works: "Based on UG4 (www.ug4.org/license)".
 * 
 * (2) The following notice must be displayed at a prominent place in the
 * terminal output of covered works: "Based on UG4 (www.ug4.org/license)".
 * 
 * (3) The following bibliography is recommended for citation and must be
 * preserved in all covered files:
 * "Reiter, S., Vogel, A., Heppner, I., Rupp, M., and Wittum, G. A massively
 *   parallel geometric multigrid solver on hierarchically distributed grids.
 *   Computing and visualization in science 16, 4 (2013), 151-164"
 * "Vogel, A., Reiter, S., Rupp, M., Nägel, A., and Wittum, G. UG4 -- a novel
 *   flexible software system for simulating pde based models on high performance
 *   computers. Computing and visualization in science 16, 4 (2013), 165-179"
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 */

/**
\file stats_util.lua
\defgroup scripts_util_stats Statistics Utility
\ingroup scripts_util
\{
\author Martin Rupp

This file and the comments are intended to make your life easier when you want to do several runs of a script and
you need to evaluate data from the runs, like compare solution times for different number of refinements.
First you need to know, what statistics you want to output and compare. 
Imagine you want to run laplace.lua for several different numRefs or even num procs, 
and results should be saved in a file "stats.txt", so that you can use in a spreadsheet.
The stats format is as follows: it is an array, consisting of entries {description, content}
So we need to add to our laplace.lua file the following lines:
\code
stats = { {"procs", GetNumProcesses()}, {"numRefs", numRefs}, {"steps", convCheck:step()}, {"SVN Revision", GetSVNRevision()} }
     util.writeFileStats(stats, "stats.txt")
\endcode
after 2 runs, the file stats.txt looks as follows
\verbatim
procs 	numRefs 	steps 	SVN Revision
4 	8 	6 	4459M
16 	9 	6 	4459M
\endverbatim
Note that a heading "procs	numRefs..." is added to the file if it is empty.
All items are seperated by default by " \t", but you can choose different seperators.
You can copy and paste the data in most spreadsheet applications like OpenOffice Calc, Excel and Apple Numbers. 
If you wish a brief table result description of the current task, you can use
\code
util.printStats(stats)
\endcode
which prints
\verbatim
  procs: 4
  numRefs: 16
  steps: 6
  SVN Revision: 4459M
  to the console
\endverbatim
 
For boolean values, use <tt>tostring(bExternalCoarsening)</tt> -> "true" / "false".
You can seperate your runs by date with the following example bash script:
\code
mydate=`date +%Y-%m-%d-%H.%M.%S`
mkdir $mydate
for i in {3..6}
do
   ./ugshell -ex mycheck.lua -outdir $mydate/ -logtofile $mydate/mycheck${i} -numRefs $i
done
\endcode
and in you lua-file, you could use <tt>util.writeFileStats(stats, util.GetParam("-outdir", "").."stats.txt")</tt>.
Instead of defining -logtofile from the shell, you could also make something like
<tt>GetLogAssistant():enable_file_output(true, util.GetParam("-outdir". "").."check_numRefs"..numRefs.."_procs"..procs..".txt")</tt>
\}
*/
